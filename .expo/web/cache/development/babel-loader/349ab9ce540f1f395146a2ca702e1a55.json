{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport GoalItem from \"../components/GoalItem\";\nimport GoalInput from \"../components/GoalInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ToDo(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      courseGoals = _useState2[0],\n      setCourseGoals = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAddMode = _useState4[0],\n      setIsAddMode = _useState4[1];\n\n  var addGoalHandler = function addGoalHandler(goalTitle) {\n    setCourseGoals(function (currentGoals) {\n      return [].concat(_toConsumableArray(currentGoals), [{\n        id: Math.random().toString(),\n        value: goalTitle\n      }]);\n    });\n    setIsAddMode(false);\n  };\n\n  var removeGoalHandler = function removeGoalHandler(goalId) {\n    setCourseGoals(function (currentGoals) {\n      return currentGoals.filter(function (goal) {\n        return goal.id !== goalId;\n      });\n    });\n  };\n\n  var cancelGoalHandler = function cancelGoalHandler() {\n    setIsAddMode(false);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      children: _jsx(Button, {\n        title: \"Add New Goal\",\n        onPress: function onPress() {\n          return setIsAddMode(true);\n        }\n      })\n    }), _jsx(GoalInput, {\n      onCancel: cancelGoalHandler,\n      visible: isAddMode,\n      onAddGoal: addGoalHandler\n    }), _jsx(FlatList, {\n      keyExtractor: function keyExtractor(item, index) {\n        return item.id;\n      },\n      data: courseGoals,\n      renderItem: function renderItem(itemData) {\n        return _jsx(GoalItem, {\n          id: itemData.item.id,\n          onDelete: removeGoalHandler,\n          title: itemData.item.value\n        });\n      }\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#88d498\",\n    padding: 60\n  },\n  todo: {\n    fontSize: 24\n  },\n  listItem: {\n    padding: 10,\n    marginVertical: 10,\n    backgroundColor: \"#ccc\",\n    borderColor: \"black\",\n    borderWidth: 1\n  }\n});\nexport default ToDo;","map":{"version":3,"sources":["/home/havard/Desktop/Achive/screens/toDo.js"],"names":["React","useState","GoalItem","GoalInput","ToDo","props","courseGoals","setCourseGoals","isAddMode","setIsAddMode","addGoalHandler","goalTitle","currentGoals","id","Math","random","toString","value","removeGoalHandler","goalId","filter","goal","cancelGoalHandler","styles","container","item","index","itemData","StyleSheet","create","flex","backgroundColor","padding","todo","fontSize","listItem","marginVertical","borderColor","borderWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;;;;;AAKA,OAAOC,QAAP;AACA,OAAOC,SAAP;;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAChB,kBAAsCJ,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAkCN,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,SAAS,EAAI;AAChCJ,IAAAA,cAAc,CAAC,UAAAK,YAAY;AAAA,0CACpBA,YADoB,IAEvB;AAACC,QAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAAL;AAA+BC,QAAAA,KAAK,EAAEN;AAAtC,OAFuB;AAAA,KAAb,CAAd;AAIAF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAND;;AAQA,MAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AAChCZ,IAAAA,cAAc,CAAC,UAAAK,YAAY,EAAG;AAE1B,aAAOA,YAAY,CAACQ,MAAb,CAAoB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACR,EAAL,KAAYM,MAAtB;AAAA,OAApB,CAAP;AACH,KAHa,CAAd;AAIH,GALD;;AAOA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5Bb,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAIA,SAEI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA,eAEI,KAAC,IAAD;AAAA,gBACI,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,cAAd;AAA6B,QAAA,OAAO,EAAE;AAAA,iBAAMf,YAAY,CAAC,IAAD,CAAlB;AAAA;AAAtC;AADJ,MAFJ,EAMI,KAAC,SAAD;AACA,MAAA,QAAQ,EAAEa,iBADV;AAEA,MAAA,OAAO,EAAEd,SAFT;AAGA,MAAA,SAAS,EAAEE;AAHX,MANJ,EAWI,KAAC,QAAD;AACA,MAAA,YAAY,EAAE,sBAACe,IAAD,EAAMC,KAAN;AAAA,eAAgBD,IAAI,CAACZ,EAArB;AAAA,OADd;AAEA,MAAA,IAAI,EAAGP,WAFP;AAGA,MAAA,UAAU,EAAE,oBAAAqB,QAAQ;AAAA,eAAI,KAAC,QAAD;AACxB,UAAA,EAAE,EAAEA,QAAQ,CAACF,IAAT,CAAcZ,EADM;AAExB,UAAA,QAAQ,EAAGK,iBAFa;AAGxB,UAAA,KAAK,EAAES,QAAQ,CAACF,IAAT,CAAcR;AAHG,UAAJ;AAAA;AAHpB,MAXJ;AAAA,IAFJ;AAwBH;;AAED,IAAMM,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAC;AACNM,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,eAAe,EAAE,SAFX;AAGNC,IAAAA,OAAO,EAAE;AAHH,GADmB;AAO7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE;AADR,GAPuB;AAW7BC,EAAAA,QAAQ,EAAE;AACNH,IAAAA,OAAO,EAAE,EADH;AAENI,IAAAA,cAAc,EAAE,EAFV;AAGNL,IAAAA,eAAe,EAAE,MAHX;AAINM,IAAAA,WAAW,EAAE,OAJP;AAKNC,IAAAA,WAAW,EAAE;AALP;AAXmB,CAAlB,CAAf;AAqBA,eAAelC,IAAf","sourcesContent":["import React, {useState} from \"react\";\nimport {StyleSheet, TouchableOpacity, \n    Text, View, Image, Button, TextInput, \n    ScrollView, FlatList} from \"react-native\"; \n\nimport GoalItem from \"../components/GoalItem\";\nimport GoalInput from \"../components/GoalInput\";\n\nfunction ToDo(props){\n    const [courseGoals, setCourseGoals] = useState([]); \n    const [isAddMode, setIsAddMode] = useState(false);\n\n    const addGoalHandler = goalTitle => {\n        setCourseGoals(currentGoals => [\n            ...currentGoals, \n            {id: Math.random().toString(), value: goalTitle}\n        ]); \n        setIsAddMode(false); \n    }\n\n    const removeGoalHandler = goalId => {\n        setCourseGoals(currentGoals =>{\n            /* return a new array filter based on a new critiria */\n            return currentGoals.filter((goal) => goal.id !== goalId); \n        });\n    }\n\n    const cancelGoalHandler = () => {\n        setIsAddMode(false); \n    }; \n\n    return(\n        /* Background*/ \n        <View style={styles.container}>\n\n            <View >\n                <Button title=\"Add New Goal\" onPress={() => setIsAddMode(true)} />\n            </View>\n\n            <GoalInput \n            onCancel={cancelGoalHandler}\n            visible={isAddMode} \n            onAddGoal={addGoalHandler}/>\n\n            <FlatList \n            keyExtractor={(item,index) => item.id} \n            data ={courseGoals} \n            renderItem={itemData => <GoalItem \n            id={itemData.item.id} \n            onDelete ={removeGoalHandler} \n            title={itemData.item.value}/>} \n            />\n\n        </View>\n    ); \n}\n\nconst styles = StyleSheet.create({\n    container:{\n        flex: 1,\n        backgroundColor: \"#88d498\",\n        padding: 60, \n    },\n\n    todo: {\n        fontSize: 24,\n    }, \n\n    listItem: {\n        padding: 10, \n        marginVertical: 10,\n        backgroundColor: \"#ccc\",\n        borderColor: \"black\", \n        borderWidth: 1, \n        \n    },\n}); \n\nexport default ToDo; "]},"metadata":{},"sourceType":"module"}