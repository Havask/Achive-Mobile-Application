{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HapticType } from \"../types/Chatty.types\";\nvar hapticEngine;\nvar triggerHaptic;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  triggerHaptic = function triggerHaptic(type) {\n    return _regeneratorRuntime.async(function triggerHaptic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = type;\n            _context.next = _context.t0 === HapticType.Light ? 3 : _context.t0 === HapticType.Medium ? 6 : _context.t0 === HapticType.Heavy ? 9 : 12;\n            break;\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light));\n\n          case 5:\n            return _context.abrupt(\"break\", 13);\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium));\n\n          case 8:\n            return _context.abrupt(\"break\", 13);\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy));\n\n          case 11:\n            return _context.abrupt(\"break\", 13);\n\n          case 12:\n            return _context.abrupt(\"break\", 13);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n} catch (_unused) {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n\n    triggerHaptic = function triggerHaptic(type) {\n      return _regeneratorRuntime.async(function triggerHaptic$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = type;\n              _context2.next = _context2.t0 === HapticType.Light ? 3 : _context2.t0 === HapticType.Medium ? 5 : _context2.t0 === HapticType.Heavy ? 7 : 9;\n              break;\n\n            case 3:\n              hapticEngine.trigger('impactLight');\n              return _context2.abrupt(\"break\", 10);\n\n            case 5:\n              hapticEngine.trigger('impactMedium');\n              return _context2.abrupt(\"break\", 10);\n\n            case 7:\n              hapticEngine.trigger('impactHeavy');\n              return _context2.abrupt(\"break\", 10);\n\n            case 9:\n              return _context2.abrupt(\"break\", 10);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };","map":{"version":3,"mappings":";;AACA,SAASA,UAAT;AAEA,IAAIC,YAAJ;AAGA,IAAIC,aAAJ;;AAEA,IAAI;EACF,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;IACzB,MAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;EACD;;EAEDJ,YAAY,GAAGK,OAAO,CAAC,cAAD,CAAtBL;;EAGAC,aAAa,GAAG,uBAAOK,IAAP;IAAA;MAAA;QAAA;UAAA;YAAA,cACNA,IADM;YAAA,gCAEPP,UAAU,CAACQ,KAFJ,uBAKPR,UAAU,CAACS,MALJ,uBAQPT,UAAU,CAACU,KARJ;YAAA;;UAAA;YAAA;YAAA,iCAGJT,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCO,KAA1DP,CAHI;;UAAA;YAAA;;UAAA;YAAA;YAAA,iCAMJA,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCQ,MAA1DR,CANI;;UAAA;YAAA;;UAAA;YAAA;YAAA,iCASJA,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCS,KAA1DT,CATI;;UAAA;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAhBC;AARF,EAwBE,gBAAM;EACN,IAAI;IACFD,YAAY,GAAGK,OAAO,CAAC,8BAAD,CAAtBL;;IACAC,aAAa,GAAG,uBAAOK,IAAP;MAAA;QAAA;UAAA;YAAA;cAAA,eACNA,IADM;cAAA,kCAEPP,UAAU,CAACQ,KAFJ,wBAKPR,UAAU,CAACS,MALJ,wBAQPT,UAAU,CAACU,KARJ;cAAA;;YAAA;cAGVT,YAAY,CAACY,OAAbZ,CAAqB,aAArBA;cAHU;;YAAA;cAMVA,YAAY,CAACY,OAAbZ,CAAqB,cAArBA;cANU;;YAAA;cASVA,YAAY,CAACY,OAAbZ,CAAqB,aAArBA;cATU;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAhBC;EAFF,EAkBE,OAAOY,KAAP,EAAc;IACdC,OAAO,CAACC,IAARD,CAAa,yBAAbA;EACD;;EACDA,OAAO,CAACC,IAARD,CAAa,yBAAbA;AACD;;AAED,SAASb,aAAT,EAAwBD,YAAxB","names":["HapticType","hapticEngine","triggerHaptic","Platform","OS","Error","require","type","Light","Medium","Heavy","impactAsync","ImpactFeedbackStyle","trigger","error","console","warn"],"sources":["hapticEngine.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { HapticType } from '../types/Chatty.types';\n\nlet hapticEngine: any;\n\n/* This is a function that returns a promise. It is used to trigger haptic feedback. */\nlet triggerHaptic: (type: HapticType) => Promise<void>;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  // We're intitalizing the triggerHaptic function based on package they use.\n  triggerHaptic = async (type: HapticType) => {\n    switch (type) {\n      case HapticType.Light:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light);\n        break;\n      case HapticType.Medium:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium);\n        break;\n      case HapticType.Heavy:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy);\n        break;\n\n      default:\n        break;\n    }\n  };\n} catch {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n    triggerHaptic = async (type: HapticType) => {\n      switch (type) {\n        case HapticType.Light:\n          hapticEngine.trigger('impactLight');\n          break;\n        case HapticType.Medium:\n          hapticEngine.trigger('impactMedium');\n          break;\n        case HapticType.Heavy:\n          hapticEngine.trigger('impactHeavy');\n          break;\n\n        default:\n          break;\n      }\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };\n"]},"metadata":{},"sourceType":"module"}