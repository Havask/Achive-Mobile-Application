{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { createContext } from \"react\";\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, deleteUser, sendPasswordResetEmail, signOut, updatePassword, updateEmail } from \"firebase/auth\";\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { getFirestore, setDoc, doc, updateDoc, getDoc, collection, arrayUnion, arrayRemove } from \"firebase/firestore\";\nimport config from \"../config/Firebase\";\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar app = initializeApp(config);\nvar storage = getStorage(app);\nvar auth = getAuth(app);\nvar db = getFirestore(app);\nvar FirebaseContext = createContext();\nvar Firebase = {\n  getCurrentUser: function getCurrentUser() {\n    return auth.currentUser;\n  },\n  createUser: function createUser(user) {\n    var uid, profilePhotoUrl;\n    return _regeneratorRuntime.async(function createUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(createUserWithEmailAndPassword(auth, user.email, user.password));\n\n          case 3:\n            uid = Firebase.getCurrentUser().uid;\n            profilePhotoUrl = \"default\";\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", uid), {\n              username: user.username,\n              email: user.email,\n              profilePhotoUrl: profilePhotoUrl\n            }));\n\n          case 7:\n            if (!user.profilePhoto) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Firebase.uploadProfilePhoto(user.profilePhoto));\n\n          case 10:\n            profilePhotoUrl = _context.sent;\n\n          case 11:\n            delete user.password;\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, user), {}, {\n              profilePhotoUrl: profilePhotoUrl,\n              uid: uid\n            }));\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"Error @createUser:\", _context.t0.message);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  },\n  uploadProfilePhoto: function uploadProfilePhoto(uri) {\n    var uid, photo, imagesRef, uidRef, url, docRef;\n    return _regeneratorRuntime.async(function uploadProfilePhoto$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            uid = Firebase.getCurrentUser().uid;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.getBlob(uri));\n\n          case 4:\n            photo = _context2.sent;\n            imagesRef = ref(storage, 'profilePhotos');\n            uidRef = ref(imagesRef, uid);\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(uploadBytes(uidRef, photo));\n\n          case 9:\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(getDownloadURL(ref(storage, uidRef)));\n\n          case 11:\n            url = _context2.sent;\n            docRef = doc(db, \"users\", uid);\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              profilePhotoUrl: url\n            }));\n\n          case 15:\n            return _context2.abrupt(\"return\", url);\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(\"Error @uploadProfilePhoto\", _context2.t0);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 18]], Promise);\n  },\n  getBlob: function getBlob(uri) {\n    return _regeneratorRuntime.async(function getBlob$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var xhr = new XMLHttpRequest();\n\n              xhr.onload = function () {\n                resolve(xhr.response);\n              };\n\n              xhr.onerror = function () {\n                reject(new TypeError(\"Network request failed\"));\n              };\n\n              xhr.responseType = \"blob\";\n              xhr.open(\"GET\", uri, true);\n              xhr.send(null);\n            }));\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getUserInfo: function getUserInfo(uid) {\n    var docRef, _user;\n\n    return _regeneratorRuntime.async(function getUserInfo$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            docRef = doc(db, \"users\", uid);\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(getDoc(docRef));\n\n          case 4:\n            _user = _context4.sent;\n\n            if (!_user.exists()) {\n              _context4.next = 9;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", _user.data());\n\n          case 9:\n            console.log(\"Can't get document @getUserInfo!\");\n\n          case 10:\n            _context4.next = 15;\n            break;\n\n          case 12:\n            _context4.prev = 12;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log(\"error @getUserInfo\", _context4.t0);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  },\n  SignOutUser: function SignOutUser() {\n    return _regeneratorRuntime.async(function SignOutUser$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(signOut());\n\n          case 3:\n            return _context5.abrupt(\"return\", true);\n\n          case 6:\n            _context5.prev = 6;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(\"Error @SignOutUser\", _context5.t0);\n\n          case 9:\n            return _context5.abrupt(\"return\", false);\n\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  SignInUser: function SignInUser(email, password) {\n    return _regeneratorRuntime.async(function SignInUser$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(signInWithEmailAndPassword(auth, email, password));\n\n          case 3:\n            _context6.next = 8;\n            break;\n\n          case 5:\n            _context6.prev = 5;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(\"Error @SignInUser\", _context6.t0);\n\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  DeleteUser: function DeleteUser() {\n    var _user2;\n\n    return _regeneratorRuntime.async(function DeleteUser$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            try {\n              _user2 = auth.currentUser;\n              deleteUser(_user2);\n            } catch (error) {\n              console.log(\"Error @DeleteUser\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  ResetPassword: function ResetPassword(email) {\n    return _regeneratorRuntime.async(function ResetPassword$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return _regeneratorRuntime.awrap(sendPasswordResetEmail(auth, email));\n\n          case 3:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 6:\n            _context8.prev = 6;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(\"Error @ResetPassword\", _context8.t0);\n\n          case 9:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  UpdateEmail: function UpdateEmail(email) {\n    var uid, docRef;\n    return _regeneratorRuntime.async(function UpdateEmail$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            uid = Firebase.getCurrentUser().uid;\n            _context9.next = 4;\n            return _regeneratorRuntime.awrap(updateEmail(uid, email));\n\n          case 4:\n            docRef = doc(db, \"users\", uid);\n            _context9.next = 7;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              email: email\n            }));\n\n          case 7:\n            _context9.next = 12;\n            break;\n\n          case 9:\n            _context9.prev = 9;\n            _context9.t0 = _context9[\"catch\"](0);\n            console.log(\"Error @UpdateEmail\", _context9.t0);\n\n          case 12:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  },\n  UpdatePassword: function UpdatePassword(password) {\n    return _regeneratorRuntime.async(function UpdatePassword$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return _regeneratorRuntime.awrap(updatePassword(currentUser, password));\n\n          case 3:\n            _context10.next = 8;\n            break;\n\n          case 5:\n            _context10.prev = 5;\n            _context10.t0 = _context10[\"catch\"](0);\n            console.log(\"Error @UpdatePassword\", _context10.t0);\n\n          case 8:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  UpdateUsername: function UpdateUsername(NewUsername) {\n    var uid, docRef;\n    return _regeneratorRuntime.async(function UpdateUsername$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.prev = 0;\n            uid = Firebase.getCurrentUser().uid;\n            docRef = doc(db, \"users\", uid);\n            _context11.next = 5;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              username: NewUsername\n            }));\n\n          case 5:\n            _context11.next = 10;\n            break;\n\n          case 7:\n            _context11.prev = 7;\n            _context11.t0 = _context11[\"catch\"](0);\n            console.log(\"Error @updateUsername\", _context11.t0);\n\n          case 10:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  },\n  CreateNewGroup: function CreateNewGroup(groupName, usernames) {\n    var SubRef;\n    return _regeneratorRuntime.async(function CreateNewGroup$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.prev = 0;\n            SubRef = collection(db, \"Groups\", groupName);\n            _context12.next = 4;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, SubRef, \"users\"), {\n              username: user.username\n            }));\n\n          case 4:\n            _context12.next = 9;\n            break;\n\n          case 6:\n            _context12.prev = 6;\n            _context12.t0 = _context12[\"catch\"](0);\n            console.log(\"Error @CreateNewGroup\", _context12.t0);\n\n          case 9:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  AddToGroup: function AddToGroup() {\n    return _regeneratorRuntime.async(function AddToGroup$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @AddToGroup\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  AddTask: function AddTask() {\n    return _regeneratorRuntime.async(function AddTask$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @AddTask\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  AddRutine: function AddRutine() {\n    return _regeneratorRuntime.async(function AddRutine$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @AddRutine\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  TaskComplete: function TaskComplete() {\n    return _regeneratorRuntime.async(function TaskComplete$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @TaskComplete\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  StayLoggedIn: function StayLoggedIn() {\n    return _regeneratorRuntime.async(function StayLoggedIn$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @StayLoggedIn\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\n\nvar FirebaseProvider = function FirebaseProvider(props) {\n  return _jsx(FirebaseContext.Provider, {\n    value: Firebase,\n    children: props.children\n  });\n};\n\nexport { FirebaseContext, FirebaseProvider };","map":{"version":3,"sources":["/home/havard/Desktop/Achive/context/FirebaseContext.js"],"names":["React","createContext","initializeApp","getAuth","deleteUser","sendPasswordResetEmail","signOut","updatePassword","updateEmail","getStorage","ref","uploadBytes","getDownloadURL","getFirestore","setDoc","doc","updateDoc","getDoc","collection","arrayUnion","arrayRemove","config","signInWithEmailAndPassword","createUserWithEmailAndPassword","app","storage","auth","db","FirebaseContext","Firebase","getCurrentUser","currentUser","createUser","user","email","password","uid","profilePhotoUrl","username","profilePhoto","uploadProfilePhoto","console","log","message","uri","getBlob","photo","imagesRef","uidRef","url","docRef","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","TypeError","responseType","open","send","getUserInfo","exists","data","SignOutUser","SignInUser","DeleteUser","error","ResetPassword","UpdateEmail","UpdatePassword","UpdateUsername","NewUsername","CreateNewGroup","groupName","usernames","SubRef","AddToGroup","AddTask","AddRutine","TaskComplete","StayLoggedIn","FirebaseProvider","props","children"],"mappings":"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","sourcesContent":["import React, {createContext} from \"react\";\nimport { initializeApp } from 'firebase/app';\nimport {getAuth, \n        deleteUser, \n        sendPasswordResetEmail, \n        signOut, \n        updatePassword, \n        updateEmail, \n        } from \"firebase/auth\";\nimport {getStorage, \n        ref,\n        uploadBytes, \n        getDownloadURL, \n        } from \"firebase/storage\";\nimport {getFirestore, \n        setDoc, \n        doc, \n        updateDoc,\n        getDoc, \n        collection,\n        arrayUnion,\n        arrayRemove,\n        } from \"firebase/firestore\";\nimport config from \"../config/Firebase\"\nimport {signInWithEmailAndPassword, \n        createUserWithEmailAndPassword\n        } from \"firebase/auth\"; \n\n// Initialize Firebase\nconst app = initializeApp(config);\nconst storage = getStorage(app);\nconst auth = getAuth(app);\nconst db = getFirestore(app); \nconst FirebaseContext = createContext(); \n\n// DOCS: \n//https://firebase.google.com/docs\n\n//Icons \n//https://icons.expo.fyi/\n\nconst Firebase = {\n  \n  getCurrentUser: () => {\n      return auth.currentUser\n    },\n\n  createUser: async (user) => {\n    try{\n      await createUserWithEmailAndPassword(auth, user.email, user.password);\n      const uid = Firebase.getCurrentUser().uid;\n      let profilePhotoUrl = \"default\";\n\n      await setDoc(doc(db, \"users\", uid), {\n        username: user.username, \n        email: user.email,\n        profilePhotoUrl, \n       });\n\n      if(user.profilePhoto){\n        profilePhotoUrl = await Firebase.uploadProfilePhoto(user.profilePhoto)\n      }\n\n      delete user.password; \n      return{...user, profilePhotoUrl, uid}; \n\n    } catch(error) {\n      console.log(\"Error @createUser:\", error.message)\n    }\n  },\n\n  uploadProfilePhoto: async (uri) => {\n\n    const uid = Firebase.getCurrentUser().uid; \n\n    try{\n      const photo = await Firebase.getBlob(uri)\n      const imagesRef = ref(storage, 'profilePhotos');\n      const uidRef = ref(imagesRef, uid);\n\n      await uploadBytes(uidRef, photo); \n\n      const url = await getDownloadURL(ref(storage, uidRef)); \n      const docRef = doc(db, \"users\", uid);\n\n      await updateDoc(docRef, {\n        profilePhotoUrl: url\n     });\n      return url; \n\n    }catch(error){\n      console.log(\"Error @uploadProfilePhoto\", error)\n    }\n  },\n    \n  getBlob: async(uri) => {\n    return await new Promise((resolve, reject) => {\n      //creates XHR object\n      const xhr = new XMLHttpRequest()\n      xhr.onload = () => {\n        resolve(xhr.response)\n      };\n      xhr.onerror = () => {\n        reject(new TypeError(\"Network request failed\"))\n      };\n      xhr.responseType = \"blob\";\n      //takes in three arguments, type of request, url/file, async or not\n      xhr.open(\"GET\", uri, true); \n      xhr.send(null);\n    })\n  },\n\n  getUserInfo: async (uid) => {\n    try{\n      const docRef = doc(db, \"users\", uid);\n      const user = await getDoc(docRef);\n\n      if(user.exists()){\n        return user.data(); \n      } else {\n        console.log(\"Can't get document @getUserInfo!\");\n      }\n      }catch(error){\n        console.log(\"error @getUserInfo\", error)\n      }\n    },\n\n  SignOutUser: async () => {\n    try{\n      await signOut();\n      return true; \n\n    }catch(error){\n      console.log(\"Error @SignOutUser\", error)\n    }\n    return false; \n  }, \n\n  SignInUser: async (email, password) => {\n    try{\n      await signInWithEmailAndPassword(auth, email, password); \n    }catch(error){\n      console.log(\"Error @SignInUser\", error)\n    }\n  },\n\n  DeleteUser: async () => {\n    try{\n      const user = auth.currentUser\n      deleteUser(user); \n    }catch(error){\n      console.log(\"Error @DeleteUser\", error)\n    }\n  }, \n\n  ResetPassword: async (email) => {\n    try{\n      return await sendPasswordResetEmail(auth, email); \n    }catch(error){\n      console.log(\"Error @ResetPassword\", error)\n    }\n  },\n\n  UpdateEmail: async (email) => {\n    try{\n      const uid = Firebase.getCurrentUser().uid; \n      await updateEmail(uid, email); \n\n      const docRef = doc(db, \"users\", uid);\n      //Update the database with the new email address\n      await updateDoc(docRef, {\n        email: email, \n      });\n\n    }catch(error){\n      console.log(\"Error @UpdateEmail\", error)\n    }\n  },\n\n  UpdatePassword: async (password) => {\n    try{\n      await updatePassword(currentUser, password);\n    }catch(error){\n      console.log(\"Error @UpdatePassword\", error)\n    }\n  },\n\n  UpdateUsername: async (NewUsername) => {\n    try{\n      const uid = Firebase.getCurrentUser().uid; \n      const docRef = doc(db, \"users\", uid);\n\n      await updateDoc(docRef, {\n        username: NewUsername, \n      });\n      \n    }catch(error){\n      console.log(\"Error @updateUsername\", error)\n    }\n  },\n  \n  //Trenger en liste med medlemmer \n  CreateNewGroup: async (groupName, usernames) => {\n    try{\n\n      const SubRef = collection(db, \"Groups\", groupName);\n      \n      //adds all the users to the database\n      await setDoc(doc(db, SubRef, \"users\"), {\n        //liste med brukernavn\n        username: user.username, \n       });\n\n    }catch(error){\n      console.log(\"Error @CreateNewGroup\", error)\n    }\n  }, \n\n  AddToGroup: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @AddToGroup\", error)\n    }\n  }, \n\n  AddTask: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @AddTask\", error)\n    }\n  }, \n\n  AddRutine: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @AddRutine\", error)\n    }\n  }, \n\n  TaskComplete: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @TaskComplete\", error)\n    }\n  }, \n\n  StayLoggedIn: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @StayLoggedIn\", error)\n    }\n  }\n\n}; \n\nconst FirebaseProvider = (props) => {\n    return <FirebaseContext.Provider value={Firebase}>{props.children}</FirebaseContext.Provider>; \n}; \n\nexport {FirebaseContext, FirebaseProvider};"]},"metadata":{},"sourceType":"module"}