{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { snapValueToStep as $aTwux$snapValueToStep, clamp as $aTwux$clamp } from \"@react-aria/utils\";\nimport { useControlledState as $aTwux$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $aTwux$useMemo, useState as $aTwux$useState, useRef as $aTwux$useRef } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $28f99e3e86e6ec45$exports = {};\n$parcel$export($28f99e3e86e6ec45$exports, \"useSliderState\", function () {\n  return $28f99e3e86e6ec45$export$e5fda3247f5d67f9;\n});\nvar $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;\nvar $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;\nvar $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;\n\nfunction $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {\n  var isDisabled = props.isDisabled,\n      _props$minValue = props.minValue,\n      minValue = _props$minValue === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE : _props$minValue,\n      _props$maxValue = props.maxValue,\n      maxValue = _props$maxValue === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE : _props$maxValue,\n      formatter = props.numberFormatter,\n      _props$step = props.step,\n      step = _props$step === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE : _props$step;\n  var pageSize = $aTwux$useMemo(function () {\n    var calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = $aTwux$snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  var _defaultValue;\n\n  var _$aTwux$useControlled = $aTwux$useControlledState(props.value, (_defaultValue = props.defaultValue) !== null && _defaultValue !== void 0 ? _defaultValue : [minValue], props.onChange),\n      _$aTwux$useControlled2 = _slicedToArray(_$aTwux$useControlled, 2),\n      values = _$aTwux$useControlled2[0],\n      setValues = _$aTwux$useControlled2[1];\n\n  var _$aTwux$useState = $aTwux$useState(new Array(values.length).fill(false)),\n      _$aTwux$useState2 = _slicedToArray(_$aTwux$useState, 2),\n      isDraggings = _$aTwux$useState2[0],\n      setDraggings = _$aTwux$useState2[1];\n\n  var isEditablesRef = $aTwux$useRef(new Array(values.length).fill(true));\n\n  var _$aTwux$useState3 = $aTwux$useState(undefined),\n      _$aTwux$useState4 = _slicedToArray(_$aTwux$useState3, 2),\n      focusedIndex = _$aTwux$useState4[0],\n      setFocusedIndex = _$aTwux$useState4[1];\n\n  var valuesRef = $aTwux$useRef(null);\n  valuesRef.current = values;\n  var isDraggingsRef = $aTwux$useRef(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n\n  function getThumbMaxValue(index) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index, editable) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index, value) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    var thisMin = getThumbMinValue(index);\n    var thisMax = getThumbMaxValue(index);\n    value = $aTwux$snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index, dragging) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    var wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) props.onChangeEnd(valuesRef.current);\n  }\n\n  function getFormattedValue(value) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index, percent) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent) {\n    var val = percent * (maxValue - minValue) + minValue;\n    return $aTwux$clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index) {\n    var stepSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var s = Math.max(stepSize, step);\n    updateValue(index, $aTwux$snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index) {\n    var stepSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var s = Math.max(stepSize, step);\n    updateValue(index, $aTwux$snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: function getThumbValue(index) {\n      return values[index];\n    },\n    setThumbValue: updateValue,\n    setThumbPercent: setThumbPercent,\n    isThumbDragging: function isThumbDragging(index) {\n      return isDraggings[index];\n    },\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: function getThumbPercent(index) {\n      return getValuePercent(values[index]);\n    },\n    getValuePercent: getValuePercent,\n    getThumbValueLabel: function getThumbValueLabel(index) {\n      return getFormattedValue(values[index]);\n    },\n    getFormattedValue: getFormattedValue,\n    getThumbMinValue: getThumbMinValue,\n    getThumbMaxValue: getThumbMaxValue,\n    getPercentValue: getPercentValue,\n    isThumbEditable: isThumbEditable,\n    setThumbEditable: setThumbEditable,\n    incrementThumb: incrementThumb,\n    decrementThumb: decrementThumb,\n    step: step,\n    pageSize: pageSize\n  };\n}\n\nfunction $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {\n  if (array[index] === value) return array;\n  return [].concat(_toConsumableArray(array.slice(0, index)), [value], _toConsumableArray(array.slice(index + 1)));\n}\n\nexport { $28f99e3e86e6ec45$export$e5fda3247f5d67f9 as useSliderState };","map":{"version":3,"mappings":"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","names":["$28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE","$28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE","$28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE","$28f99e3e86e6ec45$export$e5fda3247f5d67f9","props","isDisabled","minValue","maxValue","formatter","numberFormatter","step","pageSize","$aTwux$useMemo","calcPageSize","$aTwux$snapValueToStep","Math","max","_defaultValue","$aTwux$useControlledState","value","defaultValue","onChange","values","setValues","$aTwux$useState","Array","length","fill","isDraggings","setDraggings","isEditablesRef","$aTwux$useRef","undefined","focusedIndex","setFocusedIndex","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","$28f99e3e86e6ec45$var$replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","round","val","$aTwux$clamp","incrementThumb","stepSize","s","decrementThumb","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice"],"sources":["packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * Increments the value of the thumb by the step or page amount.\n   */\n  incrementThumb(index: number, stepSize?: number): void,\n  /**\n   * Decrements the value of the thumb by the step or page amount.\n   */\n  decrementThumb(index: number, stepSize?: number): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number,\n\n  /**\n   * The page size for the slider, used to do a bigger step.\n   */\n  readonly pageSize: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {\n    isDisabled,\n    minValue = DEFAULT_MIN_VALUE,\n    maxValue = DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = DEFAULT_STEP_VALUE\n  } = props;\n\n  // Page step should be at least equal to step and always a multiple of the step.\n  let pageSize = useMemo(() => {\n    let calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    incrementThumb,\n    decrementThumb,\n    step,\n    pageSize\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"]},"metadata":{},"sourceType":"module"}