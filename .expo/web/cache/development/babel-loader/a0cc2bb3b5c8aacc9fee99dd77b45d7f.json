{"ast":null,"code":"import React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport GroupCards from \"../components/GroupCard\";\nimport Colors from \"../constants/colors.js\";\nimport { auth, db } from \"../firebase.js\";\nimport { signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar HomeScreen = function HomeScreen(_ref) {\n  var _auth$currentUser;\n\n  var navigation = _ref.navigation;\n\n  var getUserData = function getUserData(uid) {\n    db().ref('users/' + uid).once(\"value\", function (snap) {\n      console.log(snap.val());\n    });\n  };\n\n  auth.onAuthStateChanged(function (user) {\n    if (user) {\n      var userID = getUserData(user.uid);\n      console.log(userID);\n    }\n  });\n\n  var generateColor = function generateColor() {\n    var randomColor = Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0');\n    return \"#\" + randomColor;\n  };\n\n  var SignOutUser = function SignOutUser() {\n    auth.signOut().then(function () {\n      navigation.replace(\"LogInScreen\");\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  var createGroupHandler = function createGroupHandler() {};\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Button, {\n      title: \"sign out\",\n      onPress: SignOutUser\n    }), _jsxs(Text, {\n      children: [\"Email: \", (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.email, \" \"]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        return createGroupHandler();\n      },\n      children: _jsx(Text, {\n        style: styles.textstyle,\n        children: \"Add a group\"\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    paddingTop: 50,\n    alignItems: \"center\",\n    backgroundColor: Colors.primary\n  },\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center'\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2\n  },\n  textstyle: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["/home/havard/Desktop/Achive/screens/homeScreen.js"],"names":["React","useState","GroupCards","Colors","auth","db","signInWithEmailAndPassword","signOut","NavigationContainer","HomeScreen","navigation","getUserData","uid","ref","once","snap","console","log","val","onAuthStateChanged","user","userID","generateColor","randomColor","Math","floor","random","toString","padStart","SignOutUser","then","replace","catch","error","alert","message","createGroupHandler","styles","screen","currentUser","email","button","textstyle","StyleSheet","create","flex","paddingTop","alignItems","backgroundColor","primary","width","padding","borderRadius","buttonOutline","marginTop","borderColor","borderWidth","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {StyleSheet, TouchableOpacity, Text, View, Image, Button, TextInput} from \"react-native\"; \nimport GroupCards from \"../components/GroupCard\";\nimport Colors from \"../constants/colors.js\";\nimport { auth, db } from \"../firebase.js\";\nimport {signInWithEmailAndPassword, signOut} from \"firebase/auth\"; \nimport { NavigationContainer } from \"@react-navigation/native\";\n\n\nconst HomeScreen = ({navigation}) => {\n\n  const getUserData = uid => {\n    db().ref('users/' + uid).once(\"value\", snap => {\n      console.log(snap.val())\n  })\n}; \n  auth.onAuthStateChanged(user => {\n    if (user) {\n        const userID = getUserData(user.uid)\n        console.log(userID)\n    }\n  })\n\n  //generate a new color each time it is called\n  const generateColor = () => {\n    const randomColor = Math.floor(Math.random() * 16777215)\n      .toString(16)\n      .padStart(6, '0');\n    return `#${randomColor}`;\n  };\n\n  const SignOutUser = () => {\n    \n    auth\n    .signOut()\n    .then(() => {\n      navigation.replace(\"LogInScreen\")\n    })\n    .catch(error=> alert(error.message))\n  }\n\n  const createGroupHandler = () => {\n  \n  };\n\n  //when creating a group the random color should make a color\n  return (\n        <View style={styles.screen}>\n            <Button title=\"sign out\" onPress={SignOutUser}/>\n            <Text>Email: {auth.currentUser?.email} </Text>\n\n            <TouchableOpacity\n              style = {styles.button}\n              onPress={() => createGroupHandler()}\n            >\n              <Text style={styles.textstyle}>Add a group</Text>\n            </TouchableOpacity>\n  \n        </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n\n  screen: {\n      flex: 1, \n      paddingTop: 50, \n      alignItems: \"center\",\n      backgroundColor: Colors.primary,\n  },\n\n  button: {\n    backgroundColor: '#0782F9',\n    width: '60%',\n    padding: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonOutline: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: '#0782F9',\n    borderWidth: 2,\n  },\n\n  textstyle: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n\n}); \n\nexport default HomeScreen;\n//onPress={() => navigation.push(\"HomeScreen\")}"]},"metadata":{},"sourceType":"module"}