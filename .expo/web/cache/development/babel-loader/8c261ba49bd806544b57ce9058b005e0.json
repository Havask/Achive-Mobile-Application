{"ast":null,"code":"export function loadParsedText() {\n  try {\n    var ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\");\n  }\n}\nexport var HASHTAG_PATTERN_SHAPE = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan'\n  }\n};\nexport var MENTION_PATTERN_SHAPE = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange'\n  }\n};\nexport var URL_PATTERN_SHAPE = {\n  type: 'url',\n  style: {\n    color: 'blue'\n  }\n};\nexport var ALL_PATERNS_SHAPES = [HASHTAG_PATTERN_SHAPE, MENTION_PATTERN_SHAPE, URL_PATTERN_SHAPE];\nexport function LoadAllPaternShapes(onPress) {\n  ALL_PATERNS_SHAPES.map(function (pattern) {\n    if (pattern !== null && pattern !== void 0 && pattern.onPress) return;\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}","map":{"version":3,"sources":["patterns.ts"],"names":["ReactNativeParsedText","require","console","HASHTAG_PATTERN_SHAPE","pattern","style","color","MENTION_PATTERN_SHAPE","URL_PATTERN_SHAPE","type","ALL_PATERNS_SHAPES","Object"],"mappings":"AAEA,OAAO,SAAA,cAAA,GAA0B;AAC/B,MAAI;AACF,QAAMA,qBAAqB,GAAGC,OAAO,CAAPA,0BAAO,CAAPA,CAA9B,OAAA;;AAEA,WAAA,qBAAA;AAHF,GAAA,CAIE,OAAA,GAAA,EAAY;AACZC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,kGAAAA;AAGD;AACF;AAED,OAAO,IAAMC,qBAAoC,GAAG;AAClDC,EAAAA,OAAO,EAD2C,QAAA;AAElDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAF2C,CAA7C;AAMP,OAAO,IAAMC,qBAAoC,GAAG;AAClDH,EAAAA,OAAO,EAD2C,SAAA;AAElDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAF2C,CAA7C;AAMP,OAAO,IAAME,iBAAgC,GAAG;AAC9CC,EAAAA,IAAI,EAD0C,KAAA;AAE9CJ,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAFuC,CAAzC;AAOP,OAAO,IAAMI,kBAAkB,GAAG,CAAA,qBAAA,EAAA,qBAAA,EAA3B,iBAA2B,CAA3B;AAUP,OAAO,SAAA,mBAAA,CAAA,OAAA,EAEL;AACAA,EAAAA,kBAAkB,CAAlBA,GAAAA,CAAwBN,UAAAA,OAAD,EAAa;AAClC,QAAIA,OAAJ,KAAA,IAAIA,IAAAA,OAAJ,KAAA,KAAA,CAAIA,IAAAA,OAAO,CAAX,OAAA,EAAsB;AAEtBA,IAAAA,OAAO,CAAPA,OAAAA,GAAAA,OAAAA;AACAO,IAAAA,MAAM,CAANA,MAAAA,CAAAA,OAAAA;AAJFD,GAAAA;AAMD","sourcesContent":["import type { IPatternShape } from 'src/types/Chatty.types';\n\nexport function loadParsedText() {\n  try {\n    const ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\n      \"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\"\n    );\n  }\n}\n\nexport const HASHTAG_PATTERN_SHAPE: IPatternShape = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan',\n  },\n};\nexport const MENTION_PATTERN_SHAPE: IPatternShape = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange',\n  },\n};\nexport const URL_PATTERN_SHAPE: IPatternShape = {\n  type: 'url',\n  style: {\n    color: 'blue',\n  },\n};\n\nexport const ALL_PATERNS_SHAPES = [\n  HASHTAG_PATTERN_SHAPE,\n  MENTION_PATTERN_SHAPE,\n  URL_PATTERN_SHAPE,\n];\n\n/**\n * Load all the patterns and set the onPress function\n * @param onPress - (pattern: string, index: number) => void\n */\nexport function LoadAllPaternShapes(\n  onPress: (pattern: string, index: number) => void\n) {\n  ALL_PATERNS_SHAPES.map((pattern) => {\n    if (pattern?.onPress) return;\n\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}