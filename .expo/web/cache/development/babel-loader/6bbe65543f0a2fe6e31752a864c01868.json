{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useImperativeHandle, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ChatBubble } from \"../ChatBubble\";\nimport { PropsContext } from \"../Chatty\";\nimport { loadLottie } from \"../utils/lottie\";\n\nfunction _TypingStatus(_, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isTyping = _useState2[0],\n      _setIsTyping = _useState2[1];\n\n  var propsContext = useContext(PropsContext);\n  var LottieView = loadLottie();\n  useImperativeHandle(ref, function () {\n    return {\n      setIsTyping: function setIsTyping(_isTyping) {\n        _setIsTyping(_isTyping);\n      }\n    };\n  }, []);\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext !== null && propsContext !== void 0 && propsContext.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: React.createElement(LottieView, {\n          source: require(\"../assets/lottie/typing.json\"),\n          autoPlay: true,\n          style: {\n            width: 30\n          }\n        })\n      });\n    }\n\n    return React.createElement(ChatBubble, null, React.createElement(LottieView, {\n      source: require(\"../assets/lottie/typing.json\"),\n      autoPlay: true,\n      style: {\n        width: 30\n      }\n    }));\n  } else {\n    if (propsContext !== null && propsContext !== void 0 && propsContext.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return React.createElement(Text, null, \"Typing...\");\n  }\n}\n\nexport var TypingStatus = React.memo(React.forwardRef(_TypingStatus));","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,IAAqBC,UAArB,EAAiCC,mBAAjC,EAAsDC,QAAtD,QAAsE,OAAtE;;AAGA,SAASC,UAAT;AACA,SAASC,YAAT;AACA,SAASC,UAAT;;AAEA,SAASC,aAAT,CAAuBC,CAAvB,EAA+BC,GAA/B,EAA2D;EACzD,gBAAgCN,QAAQ,CAAC,KAAD,CAAxC;EAAA;EAAA,IAAOO,QAAP;EAAA,IAAiBC,YAAjB;;EACA,IAAMC,YAAY,GAAGX,UAAU,CAACI,YAAD,CAA/B;EACA,IAAMQ,UAAU,GAAGP,UAAU,EAA7B;EAEAJ,mBAAmB,CACjBO,GADiB,EAEjB;IAAA,OAAO;MACLE,WAAW,EAAGG,8BAAD,EAAwB;QACnCH,YAAW,CAACG,SAAD,CAAXH;MACD;IAHI,CAAP;EAAA,CAFiB,EAOjB,EAPiB,CAAnBT;EAUA,IAAI,CAACQ,QAAL,EAAe,OAAO,IAAP;;EAEf,IAAIG,UAAJ,EAAgB;IACd,IAAID,YAAJ,SAAIA,gBAAJ,WAAIA,gBAAY,CAAEG,kBAAlB,EAAsC;MACpC,OAAOH,YAAY,CAACG,kBAAbH,CAAgC;QACrCI,eAAe,EACbhB,oBAACa,UAAD;UACEI,MAAM,EAAEC,OAAO,gCADjB;UAEEC,QAAQ,MAFV;UAGEC,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAT;QAHT;MAFmC,CAAhCT,CAAP;IASD;;IAED,OACEZ,oBAACI,UAAD,QACEJ,oBAACa,UAAD;MACEI,MAAM,EAAEC,OAAO,gCADjB;MAEEC,QAAQ,MAFV;MAGEC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAT;IAHT,EADF,CADF;EAbF,OAsBO;IACL,IAAIT,YAAJ,SAAIA,gBAAJ,WAAIA,gBAAY,CAAEG,kBAAlB,EAAsC;MACpC,OAAOH,YAAY,CAACG,kBAAbH,EAAP;IACD;;IAED,OAAOZ,oBAACsB,IAAD,oBAAP;EACD;AACF;;AAED,OAAO,IAAMC,YAAY,GAAGvB,KAAK,CAACwB,IAANxB,CAAWA,KAAK,CAACyB,UAANzB,CAAiBO,aAAjBP,CAAXA,CAArB","names":["React","useContext","useImperativeHandle","useState","ChatBubble","PropsContext","loadLottie","_TypingStatus","_","ref","isTyping","setIsTyping","propsContext","LottieView","_isTyping","renderTypingBubble","typingAnimation","source","require","autoPlay","style","width","Text","TypingStatus","memo","forwardRef"],"sources":["TypingStatus.tsx"],"sourcesContent":["import React, { Ref, useContext, useImperativeHandle, useState } from 'react';\nimport { Text } from 'react-native';\nimport type { ITypingStatusRef } from 'src/types/Chatty.types';\nimport { ChatBubble } from '../ChatBubble';\nimport { PropsContext } from '../Chatty';\nimport { loadLottie } from '../utils/lottie';\n\nfunction _TypingStatus(_: any, ref: Ref<ITypingStatusRef>) {\n  const [isTyping, setIsTyping] = useState(false);\n  const propsContext = useContext(PropsContext);\n  const LottieView = loadLottie();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setIsTyping: (_isTyping: boolean) => {\n        setIsTyping(_isTyping);\n      },\n    }),\n    []\n  );\n\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: (\n          <LottieView\n            source={require('../assets/lottie/typing.json')}\n            autoPlay\n            style={{ width: 30 }}\n          />\n        ),\n      });\n    }\n\n    return (\n      <ChatBubble>\n        <LottieView\n          source={require('../assets/lottie/typing.json')}\n          autoPlay\n          style={{ width: 30 }}\n        />\n      </ChatBubble>\n    );\n  } else {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return <Text>Typing...</Text>;\n  }\n}\n\nexport const TypingStatus = React.memo(React.forwardRef(_TypingStatus));\n"]},"metadata":{},"sourceType":"module"}