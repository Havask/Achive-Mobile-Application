{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState, useEffect, useLayoutEffect, useCallback } from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, deleteUser, sendPasswordResetEmail, signOut, updatePassword, updateEmail, FacebookAuthProvider, getRedirectResult, signInWithRedirect } from \"firebase/auth\";\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { getFirestore, setDoc, doc, updateDoc, getDoc, addDoc, orderBy, query, onSnapshot, collection, arrayUnion, arrayRemove, limit, getDocs, where } from \"firebase/firestore\";\nimport config from \"../config/Firebase\";\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport * as SecureStore from 'expo-secure-store';\nimport { getDatabase } from \"firebase/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar app = initializeApp(config);\nvar storage = getStorage(app);\nvar auth = getAuth(app);\nvar db = getFirestore(app);\nvar FirebaseContext = createContext();\nvar database = getDatabase(app);\nvar Firebase = {\n  CacheUserContext: function CacheUserContext(user) {\n    var jsonValue;\n    return _regeneratorRuntime.async(function CacheUserContext$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            jsonValue = JSON.stringify(user);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"User\", jsonValue));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  CacheGroupData: function CacheGroupData() {\n    var groups, objectArray, jsonValue;\n    return _regeneratorRuntime.async(function CacheGroupData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Firebase.RetriveGroupData());\n\n          case 2:\n            groups = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(Firebase.LoadGroups(groups));\n\n          case 5:\n            objectArray = _context2.sent;\n            jsonValue = JSON.stringify(objectArray);\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"groups\", jsonValue));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  RemoveCacheGroupData: function RemoveCacheGroupData(groupID) {\n    var value, parsedJson, indexOfObject, jsonValue;\n    return _regeneratorRuntime.async(function RemoveCacheGroupData$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"groups\"));\n\n          case 2:\n            value = _context3.sent;\n\n            if (!(value !== null)) {\n              _context3.next = 19;\n              break;\n            }\n\n            parsedJson = JSON.parse(value);\n            console.log(parsedJson);\n            indexOfObject = parsedJson.findIndex(function (object) {\n              return object.groupID === groupID;\n            });\n            parsedJson.splice(indexOfObject, 1);\n            console.log(parsedJson);\n\n            if (!(parsedJson.length === 0)) {\n              _context3.next = 13;\n              break;\n            }\n\n            console.log(\"Array is empty!\");\n            AsyncStorage.removeItem(\"groups\");\n            return _context3.abrupt(\"return\", 1);\n\n          case 13:\n            jsonValue = JSON.stringify(parsedJson);\n            _context3.next = 16;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"groups\", jsonValue));\n\n          case 16:\n            return _context3.abrupt(\"return\", parsedJson);\n\n          case 19:\n            console.log(\" no groups to remove in persistent storage\");\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  ClearCacheGroupData: function ClearCacheGroupData() {\n    var value;\n    return _regeneratorRuntime.async(function ClearCacheGroupData$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"groups\"));\n\n          case 2:\n            value = _context4.sent;\n\n            if (value !== null) {\n              AsyncStorage.removeItem(\"groups\");\n            } else {\n              console.log(\" no groups to remove in persistent storage\");\n            }\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  ValidateSignUpForm: function ValidateSignUpForm(email, password) {\n    var UserRef, q;\n    return _regeneratorRuntime.async(function ValidateSignUpForm$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            UserRef = collection(db, \"user\");\n            q = query(UserRef, where(\"email\", \"==\", email));\n\n            if (!(q != null)) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", 2);\n\n          case 5:\n            if (!(password.length < 6)) {\n              _context5.next = 7;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", 1);\n\n          case 7:\n            return _context5.abrupt(\"return\");\n\n          case 10:\n            _context5.prev = 10;\n            _context5.t0 = _context5[\"catch\"](0);\n            console.log(\"Error @ValidateSignUpForm:\", _context5.t0.message);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  },\n  getCurrentUser: function getCurrentUser() {\n    return auth.currentUser;\n  },\n  createUser: function createUser(user) {\n    var _uid, _profilePhotoUrl;\n\n    return _regeneratorRuntime.async(function createUser$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(createUserWithEmailAndPassword(auth, user.email, user.password));\n\n          case 3:\n            _uid = Firebase.getCurrentUser().uid;\n            _profilePhotoUrl = \"default\";\n            console.log(\"Sets the docs to database\");\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", _uid), {\n              username: user.username,\n              email: user.email,\n              password: user.password,\n              profilePhotoUrl: _profilePhotoUrl,\n              groups: []\n            }));\n\n          case 8:\n            if (!user.profilePhoto) {\n              _context6.next = 12;\n              break;\n            }\n\n            _context6.next = 11;\n            return _regeneratorRuntime.awrap(Firebase.uploadProfilePhoto(user.profilePhoto));\n\n          case 11:\n            _profilePhotoUrl = _context6.sent;\n\n          case 12:\n            delete user.password;\n            return _context6.abrupt(\"return\", _objectSpread(_objectSpread({}, user), {}, {\n              profilePhotoUrl: _profilePhotoUrl,\n              uid: _uid\n            }));\n\n          case 16:\n            _context6.prev = 16;\n            _context6.t0 = _context6[\"catch\"](0);\n            console.log(\"Error @createUser:\", _context6.t0.message);\n\n          case 19:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  },\n  uploadProfilePhoto: function uploadProfilePhoto(uri) {\n    var uid, photo, imagesRef, uidRef, url, docRef;\n    return _regeneratorRuntime.async(function uploadProfilePhoto$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            uid = Firebase.getCurrentUser().uid;\n            _context7.prev = 1;\n            _context7.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.getBlob(uri));\n\n          case 4:\n            photo = _context7.sent;\n            imagesRef = ref(storage, 'profilePhotos');\n            uidRef = ref(imagesRef, uid);\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(uploadBytes(uidRef, photo));\n\n          case 9:\n            _context7.next = 11;\n            return _regeneratorRuntime.awrap(getDownloadURL(ref(storage, uidRef)));\n\n          case 11:\n            url = _context7.sent;\n            docRef = doc(db, \"users\", uid);\n            _context7.next = 15;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              profilePhotoUrl: url\n            }));\n\n          case 15:\n            return _context7.abrupt(\"return\", url);\n\n          case 18:\n            _context7.prev = 18;\n            _context7.t0 = _context7[\"catch\"](1);\n            console.log(\"Error @uploadProfilePhoto\", _context7.t0);\n\n          case 21:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[1, 18]], Promise);\n  },\n  uploadGroupPhoto: function uploadGroupPhoto(uri, GroupID) {\n    var photo, imagesRef, uidRef, url, _GroupRef;\n\n    return _regeneratorRuntime.async(function uploadGroupPhoto$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            console.log(\"1\");\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(Firebase.getBlob(uri));\n\n          case 4:\n            photo = _context8.sent;\n            imagesRef = ref(storage, 'GroupPhotos');\n            uidRef = ref(imagesRef, GroupID);\n            _context8.next = 9;\n            return _regeneratorRuntime.awrap(uploadBytes(uidRef, photo));\n\n          case 9:\n            console.log(\"2\");\n            _context8.next = 12;\n            return _regeneratorRuntime.awrap(getDownloadURL(ref(storage, uidRef)));\n\n          case 12:\n            url = _context8.sent;\n            _GroupRef = doc(db, \"groups\", GroupID);\n            _context8.next = 16;\n            return _regeneratorRuntime.awrap(updateDoc(_GroupRef, {\n              GroupPhotoUrl: url\n            }));\n\n          case 16:\n            console.log(\"3\");\n            return _context8.abrupt(\"return\", url);\n\n          case 20:\n            _context8.prev = 20;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(\"Error @uploadGroupPhoto\", _context8.t0);\n\n          case 23:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 20]], Promise);\n  },\n  getBlob: function getBlob(uri) {\n    return _regeneratorRuntime.async(function getBlob$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n              var xhr = new XMLHttpRequest();\n\n              xhr.onload = function () {\n                resolve(xhr.response);\n              };\n\n              xhr.onerror = function () {\n                reject(new TypeError(\"Network request failed\"));\n              };\n\n              xhr.responseType = \"blob\";\n              xhr.open(\"GET\", uri, true);\n              xhr.send(null);\n            }));\n\n          case 2:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 3:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getUserInfo: function getUserInfo(uid) {\n    var docRef, _user;\n\n    return _regeneratorRuntime.async(function getUserInfo$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            docRef = doc(db, \"users\", uid);\n            _context10.next = 4;\n            return _regeneratorRuntime.awrap(getDoc(docRef));\n\n          case 4:\n            _user = _context10.sent;\n\n            if (!_user.exists()) {\n              _context10.next = 9;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", _user.data());\n\n          case 9:\n            console.log(\"Can't get document @getUserInfo!\");\n\n          case 10:\n            _context10.next = 15;\n            break;\n\n          case 12:\n            _context10.prev = 12;\n            _context10.t0 = _context10[\"catch\"](0);\n            console.log(\"error @getUserInfo\", _context10.t0);\n\n          case 15:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  },\n  SignOutUser: function SignOutUser() {\n    return _regeneratorRuntime.async(function SignOutUser$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.prev = 0;\n            _context11.next = 3;\n            return _regeneratorRuntime.awrap(SecureStore.deleteItemAsync(\"User\"));\n\n          case 3:\n            _context11.next = 5;\n            return _regeneratorRuntime.awrap(signOut(auth));\n\n          case 5:\n            return _context11.abrupt(\"return\", true);\n\n          case 8:\n            _context11.prev = 8;\n            _context11.t0 = _context11[\"catch\"](0);\n            console.log(\"Error @SignOutUser\", _context11.t0);\n\n          case 11:\n            return _context11.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  },\n  SignInUser: function SignInUser(email, password) {\n    return _regeneratorRuntime.async(function SignInUser$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.prev = 0;\n            _context12.next = 3;\n            return _regeneratorRuntime.awrap(signInWithEmailAndPassword(auth, email, password));\n\n          case 3:\n            _context12.next = 8;\n            break;\n\n          case 5:\n            _context12.prev = 5;\n            _context12.t0 = _context12[\"catch\"](0);\n            console.log(\"Error @SignInUser\", _context12.t0);\n\n          case 8:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  SignInUserWithFacebook: function SignInUserWithFacebook() {\n    var provider, result, _user2, credential, token;\n\n    return _regeneratorRuntime.async(function SignInUserWithFacebook$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.prev = 0;\n            provider = new FacebookAuthProvider();\n            console.log(provider);\n            _context13.next = 5;\n            return _regeneratorRuntime.awrap(signInWithRedirect(auth, provider));\n\n          case 5:\n            _context13.next = 7;\n            return _regeneratorRuntime.awrap(getRedirectResult(auth));\n\n          case 7:\n            result = _context13.sent;\n\n            if (result) {\n              _user2 = result.user;\n              credential = FacebookAuthProvider.credentialFromResult(result);\n              token = credential.accessToken;\n            }\n\n            _context13.next = 14;\n            break;\n\n          case 11:\n            _context13.prev = 11;\n            _context13.t0 = _context13[\"catch\"](0);\n            console.log(\"Error @SignInUserWithFacebook\", _context13.t0);\n\n          case 14:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  },\n  DeleteUser: function DeleteUser() {\n    var _user3;\n\n    return _regeneratorRuntime.async(function DeleteUser$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            try {\n              _user3 = auth.currentUser;\n              deleteUser(_user3);\n            } catch (error) {\n              console.log(\"Error @DeleteUser\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  ResetPassword: function ResetPassword(email) {\n    return _regeneratorRuntime.async(function ResetPassword$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.prev = 0;\n            _context15.next = 3;\n            return _regeneratorRuntime.awrap(sendPasswordResetEmail(auth, email));\n\n          case 3:\n            return _context15.abrupt(\"return\", _context15.sent);\n\n          case 6:\n            _context15.prev = 6;\n            _context15.t0 = _context15[\"catch\"](0);\n            console.log(\"Error @ResetPassword\", _context15.t0);\n\n          case 9:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  UpdateEmail: function UpdateEmail(email) {\n    var _uid2, docRef;\n\n    return _regeneratorRuntime.async(function UpdateEmail$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.prev = 0;\n            _uid2 = Firebase.getCurrentUser().uid;\n            _context16.next = 4;\n            return _regeneratorRuntime.awrap(updateEmail(_uid2, email));\n\n          case 4:\n            docRef = doc(db, \"users\", _uid2);\n            _context16.next = 7;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              email: email\n            }));\n\n          case 7:\n            _context16.next = 12;\n            break;\n\n          case 9:\n            _context16.prev = 9;\n            _context16.t0 = _context16[\"catch\"](0);\n            console.log(\"Error @UpdateEmail\", _context16.t0);\n\n          case 12:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  },\n  UpdatePassword: function UpdatePassword(password) {\n    return _regeneratorRuntime.async(function UpdatePassword$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.prev = 0;\n            _context17.next = 3;\n            return _regeneratorRuntime.awrap(updatePassword(currentUser, password));\n\n          case 3:\n            _context17.next = 8;\n            break;\n\n          case 5:\n            _context17.prev = 5;\n            _context17.t0 = _context17[\"catch\"](0);\n            console.log(\"Error @UpdatePassword\", _context17.t0);\n\n          case 8:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  UpdateUsername: function UpdateUsername(NewUsername) {\n    var _uid3, docRef;\n\n    return _regeneratorRuntime.async(function UpdateUsername$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            _context18.prev = 0;\n            _uid3 = Firebase.getCurrentUser().uid;\n            docRef = doc(db, \"users\", _uid3);\n            _context18.next = 5;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              username: NewUsername\n            }));\n\n          case 5:\n            _context18.next = 10;\n            break;\n\n          case 7:\n            _context18.prev = 7;\n            _context18.t0 = _context18[\"catch\"](0);\n            console.log(\"Error @updateUsername\", _context18.t0);\n\n          case 10:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  },\n  retrieveQR: function retrieveQR() {\n    return _regeneratorRuntime.async(function retrieveQR$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            try {} catch (_unused) {\n              console.log(\"Could not retrive QR\");\n            }\n\n          case 1:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  CreateNewGroup: function CreateNewGroup(Group) {\n    var _uid4, UserRef, GroupPhotoUrl;\n\n    return _regeneratorRuntime.async(function CreateNewGroup$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            _context20.prev = 0;\n            _uid4 = Firebase.getCurrentUser().uid;\n            UserRef = doc(db, \"users\", _uid4);\n            _context20.next = 5;\n            return _regeneratorRuntime.awrap(updateDoc(UserRef, {\n              groups: arrayUnion(Group.GroupID)\n            }));\n\n          case 5:\n            GroupPhotoUrl = \"default\";\n            _context20.next = 8;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"groups\", Group.GroupID), {\n              groupname: Group.Groupname,\n              groupID: Group.GroupID,\n              color: Group.Color,\n              members: [_uid4],\n              privacy: Group.Privacy,\n              GroupPhotoUrl: GroupPhotoUrl\n            }));\n\n          case 8:\n            if (!Group.GroupPhoto) {\n              _context20.next = 12;\n              break;\n            }\n\n            _context20.next = 11;\n            return _regeneratorRuntime.awrap(Firebase.uploadGroupPhoto(Group.GroupPhoto, Group.GroupID));\n\n          case 11:\n            GroupPhotoUrl = _context20.sent;\n\n          case 12:\n            Firebase.CacheGroupData();\n            _context20.next = 18;\n            break;\n\n          case 15:\n            _context20.prev = 15;\n            _context20.t0 = _context20[\"catch\"](0);\n            console.log(\"Error @CreateNewGroup\", _context20.t0);\n\n          case 18:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  },\n  RetriveGroupData: function RetriveGroupData() {\n    var _uid5, snap;\n\n    return _regeneratorRuntime.async(function RetriveGroupData$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            _context21.prev = 0;\n            _uid5 = Firebase.getCurrentUser().uid;\n            _context21.next = 4;\n            return _regeneratorRuntime.awrap(getDoc(doc(db, \"users\", _uid5)));\n\n          case 4:\n            snap = _context21.sent;\n            return _context21.abrupt(\"return\", snap.data().groups);\n\n          case 8:\n            _context21.prev = 8;\n            _context21.t0 = _context21[\"catch\"](0);\n            console.log(\"Error @RetriveGroupData\", _context21.t0);\n\n          case 11:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  },\n  LoadGroups: function LoadGroups(array) {\n    var objectList, arrayLength, i, Snap;\n    return _regeneratorRuntime.async(function LoadGroups$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            _context22.prev = 0;\n            objectList = [];\n            arrayLength = array.length;\n            i = 0;\n\n          case 4:\n            if (!(i < arrayLength)) {\n              _context22.next = 12;\n              break;\n            }\n\n            _context22.next = 7;\n            return _regeneratorRuntime.awrap(getDoc(doc(db, \"groups\", array[i])));\n\n          case 7:\n            Snap = _context22.sent;\n            objectList.push({\n              groupname: Snap.data().groupname,\n              groupID: Snap.data().groupID,\n              color: Snap.data().color,\n              members: Snap.data().members,\n              privacy: Snap.data().privacy,\n              GroupPhotoUrl: Snap.data().GroupPhotoUrl\n            });\n\n          case 9:\n            i++;\n            _context22.next = 4;\n            break;\n\n          case 12:\n            ;\n            return _context22.abrupt(\"return\", objectList);\n\n          case 16:\n            _context22.prev = 16;\n            _context22.t0 = _context22[\"catch\"](0);\n            console.log(\"Could not Load Groups\", _context22.t0);\n\n          case 19:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  },\n  LeaveGroup: function LeaveGroup(GroupID) {\n    var _uid6, UserRef, _GroupRef2;\n\n    return _regeneratorRuntime.async(function LeaveGroup$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            _context23.prev = 0;\n            _uid6 = Firebase.getCurrentUser().uid;\n            UserRef = doc(db, \"users\", _uid6);\n            _context23.next = 5;\n            return _regeneratorRuntime.awrap(updateDoc(UserRef, {\n              groups: arrayRemove(GroupID)\n            }));\n\n          case 5:\n            _GroupRef2 = doc(db, \"groups\", GroupID);\n            _context23.next = 8;\n            return _regeneratorRuntime.awrap(updateDoc(_GroupRef2, {\n              members: arrayRemove(_uid6)\n            }));\n\n          case 8:\n            _context23.next = 13;\n            break;\n\n          case 10:\n            _context23.prev = 10;\n            _context23.t0 = _context23[\"catch\"](0);\n            console.log(\"Error @LeaveGroup\", _context23.t0);\n\n          case 13:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  },\n  JoinGroup: function JoinGroup(GroupID) {\n    var _uid7, UserRef, _GroupRef3, arrayObject, Snap;\n\n    return _regeneratorRuntime.async(function JoinGroup$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            _context24.prev = 0;\n            _uid7 = Firebase.getCurrentUser().uid;\n            UserRef = doc(db, \"users\", _uid7);\n            _context24.next = 5;\n            return _regeneratorRuntime.awrap(updateDoc(UserRef, {\n              groups: arrayUnion(GroupID)\n            }));\n\n          case 5:\n            _GroupRef3 = doc(db, \"groups\", GroupID);\n            _context24.next = 8;\n            return _regeneratorRuntime.awrap(updateDoc(_GroupRef3, {\n              members: arrayUnion(_uid7)\n            }));\n\n          case 8:\n            arrayObject = [];\n            _context24.next = 11;\n            return _regeneratorRuntime.awrap(getDoc(doc(db, \"groups\", GroupID)));\n\n          case 11:\n            Snap = _context24.sent;\n            arrayObject.push({\n              groupname: Snap.data().groupname,\n              groupID: Snap.data().groupID,\n              color: Snap.data().color,\n              members: Snap.data().members,\n              privacy: Snap.data().privacy,\n              GroupPhotoUrl: Snap.data().GroupPhotoUrl\n            });\n            console.log(arrayObject);\n            Firebase.CacheGroupData(arrayObject);\n            _context24.next = 20;\n            break;\n\n          case 17:\n            _context24.prev = 17;\n            _context24.t0 = _context24[\"catch\"](0);\n            console.log(\"Error @JoinGroup\", _context24.t0);\n\n          case 20:\n          case \"end\":\n            return _context24.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  },\n  AddMemberToGroup: function AddMemberToGroup(member) {\n    var docRef;\n    return _regeneratorRuntime.async(function AddMemberToGroup$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            _context25.prev = 0;\n            docRef = doc(db, \"users\", uid);\n            _context25.next = 4;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              Member: member\n            }));\n\n          case 4:\n            _context25.next = 9;\n            break;\n\n          case 6:\n            _context25.prev = 6;\n            _context25.t0 = _context25[\"catch\"](0);\n            console.log(\"Error @AddToGroup\", _context25.t0);\n\n          case 9:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  AddTask: function AddTask() {\n    return _regeneratorRuntime.async(function AddTask$(_context26) {\n      while (1) {\n        switch (_context26.prev = _context26.next) {\n          case 0:\n            _context26.prev = 0;\n            _context26.next = 3;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", uid), {\n              username: user.username,\n              email: user.email,\n              profilePhotoUrl: profilePhotoUrl\n            }));\n\n          case 3:\n            _context26.next = 8;\n            break;\n\n          case 5:\n            _context26.prev = 5;\n            _context26.t0 = _context26[\"catch\"](0);\n            console.log(\"Error @AddTask\", _context26.t0);\n\n          case 8:\n          case \"end\":\n            return _context26.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  UpdateTask: function UpdateTask() {\n    var docRef;\n    return _regeneratorRuntime.async(function UpdateTask$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            _context27.prev = 0;\n            docRef = doc(db, \"users\", uid);\n            _context27.next = 4;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              TaskName: TaskName,\n              Frequency: Frequency\n            }));\n\n          case 4:\n            _context27.next = 9;\n            break;\n\n          case 6:\n            _context27.prev = 6;\n            _context27.t0 = _context27[\"catch\"](0);\n            console.log(\"Error @UpdateTask\", _context27.t0);\n\n          case 9:\n          case \"end\":\n            return _context27.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  AddRoutine: function AddRoutine(TaskName, frequency, Members) {\n    return _regeneratorRuntime.async(function AddRoutine$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            _context28.prev = 0;\n            _context28.next = 3;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"users\", uid), {\n              username: user.username,\n              email: user.email,\n              profilePhotoUrl: profilePhotoUrl\n            }));\n\n          case 3:\n            _context28.next = 8;\n            break;\n\n          case 5:\n            _context28.prev = 5;\n            _context28.t0 = _context28[\"catch\"](0);\n            console.log(\"Error @AddRutine\", _context28.t0);\n\n          case 8:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  },\n  UpdateRoutine: function UpdateRoutine(TaskName, frequency, Members) {\n    var docRef;\n    return _regeneratorRuntime.async(function UpdateRoutine$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            _context29.prev = 0;\n            docRef = doc(db, \"users\", uid);\n            _context29.next = 4;\n            return _regeneratorRuntime.awrap(updateDoc(docRef, {\n              TaskName: TaskName,\n              Frequency: Frequency\n            }));\n\n          case 4:\n            _context29.next = 9;\n            break;\n\n          case 6:\n            _context29.prev = 6;\n            _context29.t0 = _context29[\"catch\"](0);\n            console.log(\"Error @UpdateRutine\", _context29.t0);\n\n          case 9:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  },\n  TaskComplete: function TaskComplete() {\n    return _regeneratorRuntime.async(function TaskComplete$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @TaskComplete\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  StayLoggedIn: function StayLoggedIn() {\n    return _regeneratorRuntime.async(function StayLoggedIn$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @StayLoggedIn\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  RetriveMessages: function RetriveMessages() {\n    var DocRef, q;\n    return _regeneratorRuntime.async(function RetriveMessages$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            try {\n              s;\n              DocRef = doc(db, \"chats\", \"snusken\");\n              q = query(DocRef, orderBy(\"createdAt\", \"desc\"));\n              onSnapshot(q, function (querySnapshot) {\n                var MessageArray = [];\n                querySnapshot.forEach(function (doc) {\n                  MessageArray.push(doc.data());\n                  console.log(\"retrived messages\", MessageArray);\n                  return MessageArray;\n                });\n              });\n            } catch (error) {\n              console.log(\"Error @RetriveMessages\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  SendMessage: function SendMessage(text) {\n    var uid;\n    return _regeneratorRuntime.async(function SendMessage$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            uid = Firebase.getCurrentUser().uid;\n            _context33.prev = 1;\n            _context33.next = 4;\n            return _regeneratorRuntime.awrap(setDoc(doc(db, \"chats\", \"snusken\"), {\n              id: uid,\n              text: text\n            }));\n\n          case 4:\n            _context33.next = 9;\n            break;\n\n          case 6:\n            _context33.prev = 6;\n            _context33.t0 = _context33[\"catch\"](1);\n            console.log(\"Error @SendMessage\", _context33.t0);\n\n          case 9:\n          case \"end\":\n            return _context33.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  },\n  RetrivingMessages: function RetrivingMessages(text) {\n    return _regeneratorRuntime.async(function RetrivingMessages$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            setState({\n              readError: null\n            });\n\n            try {\n              database.ref(\"chats\").on(\"value\", function (snapshot) {\n                var chats = [];\n                snapshot.forEach(function (snap) {\n                  chats.push(snap.val());\n                });\n                setState({\n                  chats: chats\n                });\n              });\n            } catch (error) {\n              setState({\n                readError: error.message\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context34.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  SendingMessages: function SendingMessages(text) {\n    return _regeneratorRuntime.async(function SendingMessages$(_context35) {\n      while (1) {\n        switch (_context35.prev = _context35.next) {\n          case 0:\n            preventDefault();\n            setState({\n              writeError: null\n            });\n            _context35.prev = 2;\n            _context35.next = 5;\n            return _regeneratorRuntime.awrap(db.ref(\"chats\").push({\n              content: state.content,\n              timestamp: Date.now(),\n              uid: state.user.uid\n            }));\n\n          case 5:\n            setState({\n              content: ''\n            });\n            _context35.next = 11;\n            break;\n\n          case 8:\n            _context35.prev = 8;\n            _context35.t0 = _context35[\"catch\"](2);\n            setState({\n              writeError: _context35.t0.message\n            });\n\n          case 11:\n          case \"end\":\n            return _context35.stop();\n        }\n      }\n    }, null, null, [[2, 8]], Promise);\n  },\n  RetriveFeed: function RetriveFeed(SortSettings) {\n    var objectList, GroupArray, groups, i, docRef, collectionRef, q, querySnapshot, SortedFeed;\n    return _regeneratorRuntime.async(function RetriveFeed$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            objectList = [];\n            GroupArray = [];\n            _context36.prev = 2;\n            _context36.next = 5;\n            return _regeneratorRuntime.awrap(Firebase.RetriveGroupsStorage());\n\n          case 5:\n            groups = _context36.sent;\n            groups.forEach(function (doc) {\n              GroupArray.push({\n                groupname: doc.groupID\n              });\n            });\n            i = 0;\n\n          case 8:\n            if (!(i < GroupArray.length)) {\n              _context36.next = 19;\n              break;\n            }\n\n            docRef = doc(db, \"groups\", GroupArray[i].groupname);\n            collectionRef = collection(docRef, \"posts\");\n            q = query(collectionRef, orderBy(\"id\"), limit(3));\n            _context36.next = 14;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 14:\n            querySnapshot = _context36.sent;\n            querySnapshot.forEach(function (doc) {\n              objectList.push({\n                id: doc.data().id,\n                user: doc.data().user,\n                avatar: doc.data().avatar,\n                postedAt: doc.data().postedAt,\n                post: doc.data().post,\n                Upvotes: doc.data().Upvotes,\n                Downvotes: doc.data().Downvotes\n              });\n            });\n\n          case 16:\n            i++;\n            _context36.next = 8;\n            break;\n\n          case 19:\n            return _context36.abrupt(\"return\", objectList);\n\n          case 23:\n            _context36.prev = 23;\n            _context36.t0 = _context36[\"catch\"](2);\n            console.log(\"Error @RetriveFeed\", _context36.t0);\n\n          case 26:\n          case \"end\":\n            return _context36.stop();\n        }\n      }\n    }, null, null, [[2, 23]], Promise);\n  },\n  AddPost: function AddPost(post, groupID) {\n    var docRef;\n    return _regeneratorRuntime.async(function AddPost$(_context37) {\n      while (1) {\n        switch (_context37.prev = _context37.next) {\n          case 0:\n            docRef = doc(db, \"groups\", groupID);\n            _context37.prev = 1;\n            _context37.next = 4;\n            return _regeneratorRuntime.awrap(setDoc(doc(docRef, \"posts\", post.id), {\n              id: post.id,\n              user: post.user,\n              avatar: post.avatar,\n              postedAt: post.postedAt,\n              post: post.post,\n              Upvotes: post.Upvotes,\n              Downvotes: post.Downvotes\n            }));\n\n          case 4:\n            _context37.next = 9;\n            break;\n\n          case 6:\n            _context37.prev = 6;\n            _context37.t0 = _context37[\"catch\"](1);\n            console.log(\"Error @AddPost\", _context37.t0);\n\n          case 9:\n          case \"end\":\n            return _context37.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  },\n  UpdatePost: function UpdatePost(post, groupID) {\n    var docRef, postRef;\n    return _regeneratorRuntime.async(function UpdatePost$(_context38) {\n      while (1) {\n        switch (_context38.prev = _context38.next) {\n          case 0:\n            docRef = doc(db, \"groups\", groupID);\n            postRef = doc(docRef, \"\", \"\");\n\n            try {\n              updateDoc(postRef, post);\n            } catch (_unused2) {\n              console.log(\"Error @UpdatePost\");\n            }\n\n          case 3:\n          case \"end\":\n            return _context38.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  RetriveGroupsStorage: function RetriveGroupsStorage() {\n    var value, parsedJson, groups, objectArray, jsonValue;\n    return _regeneratorRuntime.async(function RetriveGroupsStorage$(_context39) {\n      while (1) {\n        switch (_context39.prev = _context39.next) {\n          case 0:\n            _context39.prev = 0;\n            _context39.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"groups\"));\n\n          case 3:\n            value = _context39.sent;\n\n            if (!(value !== null)) {\n              _context39.next = 9;\n              break;\n            }\n\n            parsedJson = JSON.parse(value);\n            return _context39.abrupt(\"return\", parsedJson);\n\n          case 9:\n            _context39.next = 11;\n            return _regeneratorRuntime.awrap(Firebase.RetriveGroupData());\n\n          case 11:\n            groups = _context39.sent;\n            _context39.next = 14;\n            return _regeneratorRuntime.awrap(Firebase.LoadGroups(groups));\n\n          case 14:\n            objectArray = _context39.sent;\n            jsonValue = JSON.stringify(objectArray);\n            _context39.next = 18;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"groups\", jsonValue));\n\n          case 18:\n            return _context39.abrupt(\"return\", objectArray);\n\n          case 19:\n            _context39.next = 24;\n            break;\n\n          case 21:\n            _context39.prev = 21;\n            _context39.t0 = _context39[\"catch\"](0);\n            console.log(\"Error @RetriveGroupsStorage\", _context39.t0);\n\n          case 24:\n          case \"end\":\n            return _context39.stop();\n        }\n      }\n    }, null, null, [[0, 21]], Promise);\n  },\n  SortGroupFeed: function SortGroupFeed(posts, sortsettings) {\n    return _regeneratorRuntime.async(function SortGroupFeed$(_context40) {\n      while (1) {\n        switch (_context40.prev = _context40.next) {\n          case 0:\n            try {\n              if (sortsettings === \"recent\") {}\n\n              if (sortsettings === \"upvotes\") {}\n            } catch (error) {\n              console.log(\"Error @SortGroupFeed\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context40.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  ExplorationFeed: function ExplorationFeed() {\n    var objectList, q, querySnapshot;\n    return _regeneratorRuntime.async(function ExplorationFeed$(_context41) {\n      while (1) {\n        switch (_context41.prev = _context41.next) {\n          case 0:\n            _context41.prev = 0;\n            objectList = [];\n            q = query(collection(db, \"groups\"), where(\"privacy\", \"==\", false));\n            _context41.next = 5;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 5:\n            querySnapshot = _context41.sent;\n            querySnapshot.forEach(function (doc) {\n              objectList.push({\n                groupID: doc.data().groupID,\n                groupname: doc.data().groupname,\n                GroupPhotoUrl: doc.data().GroupPhotoUrl\n              });\n            });\n            return _context41.abrupt(\"return\", objectList);\n\n          case 10:\n            _context41.prev = 10;\n            _context41.t0 = _context41[\"catch\"](0);\n            console.log(\"Error @ExplorationFeed\", _context41.t0);\n\n          case 13:\n          case \"end\":\n            return _context41.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  },\n  ProfileTheUser: function ProfileTheUser() {\n    return _regeneratorRuntime.async(function ProfileTheUser$(_context42) {\n      while (1) {\n        switch (_context42.prev = _context42.next) {\n          case 0:\n            try {} catch (error) {\n              console.log(\"Error @ProfileTheUser\", error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context42.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  SearchForCommunities: function SearchForCommunities(Query) {\n    var groupList, q, querySnapshot;\n    return _regeneratorRuntime.async(function SearchForCommunities$(_context43) {\n      while (1) {\n        switch (_context43.prev = _context43.next) {\n          case 0:\n            _context43.prev = 0;\n            groupList = [];\n            q = query(GroupRef, where(\"groupname\", \"==\", \"Query\"));\n            _context43.next = 5;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 5:\n            querySnapshot = _context43.sent;\n            querySnapshot.forEach(function (doc) {\n              groupList.push({\n                groupID: doc.data().groupID,\n                groupname: doc.data().groupname,\n                GroupPhotoUrl: doc.data().GroupPhotoUrl\n              });\n              console.log(groupList);\n              return groupList;\n            });\n            _context43.next = 12;\n            break;\n\n          case 9:\n            _context43.prev = 9;\n            _context43.t0 = _context43[\"catch\"](0);\n            console.log(\"Error @SearchForCommunities\", _context43.t0);\n\n          case 12:\n          case \"end\":\n            return _context43.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n};\n\nvar FirebaseProvider = function FirebaseProvider(props) {\n  return _jsx(FirebaseContext.Provider, {\n    value: Firebase,\n    children: props.children\n  });\n};\n\nexport { FirebaseContext, FirebaseProvider };","map":{"version":3,"sources":["/Users/havardskjaerstein/Desktop/Achive/context/FirebaseContext.js"],"names":["React","createContext","useState","useEffect","useLayoutEffect","useCallback","AsyncStorage","initializeApp","getAuth","deleteUser","sendPasswordResetEmail","signOut","updatePassword","updateEmail","FacebookAuthProvider","getRedirectResult","signInWithRedirect","getStorage","ref","uploadBytes","getDownloadURL","getFirestore","setDoc","doc","updateDoc","getDoc","addDoc","orderBy","query","onSnapshot","collection","arrayUnion","arrayRemove","limit","getDocs","where","config","signInWithEmailAndPassword","createUserWithEmailAndPassword","SecureStore","getDatabase","app","storage","auth","db","FirebaseContext","database","Firebase","CacheUserContext","user","jsonValue","JSON","stringify","setItem","CacheGroupData","RetriveGroupData","groups","LoadGroups","objectArray","RemoveCacheGroupData","groupID","getItem","value","parsedJson","parse","console","log","indexOfObject","findIndex","object","splice","length","removeItem","ClearCacheGroupData","ValidateSignUpForm","email","password","UserRef","q","message","getCurrentUser","currentUser","createUser","uid","profilePhotoUrl","username","profilePhoto","uploadProfilePhoto","uri","getBlob","photo","imagesRef","uidRef","url","docRef","uploadGroupPhoto","GroupID","GroupRef","GroupPhotoUrl","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","TypeError","responseType","open","send","getUserInfo","exists","data","SignOutUser","deleteItemAsync","SignInUser","SignInUserWithFacebook","provider","result","credential","credentialFromResult","token","accessToken","DeleteUser","error","ResetPassword","UpdateEmail","UpdatePassword","UpdateUsername","NewUsername","retrieveQR","CreateNewGroup","Group","groupname","Groupname","color","Color","members","privacy","Privacy","GroupPhoto","snap","array","objectList","arrayLength","i","Snap","push","LeaveGroup","JoinGroup","arrayObject","AddMemberToGroup","member","Member","AddTask","UpdateTask","TaskName","Frequency","AddRoutine","frequency","Members","UpdateRoutine","TaskComplete","StayLoggedIn","RetriveMessages","s","DocRef","querySnapshot","MessageArray","forEach","SendMessage","text","id","RetrivingMessages","setState","readError","on","snapshot","chats","val","SendingMessages","preventDefault","writeError","content","state","timestamp","Date","now","RetriveFeed","SortSettings","GroupArray","RetriveGroupsStorage","collectionRef","avatar","postedAt","post","Upvotes","Downvotes","AddPost","UpdatePost","postRef","SortGroupFeed","posts","sortsettings","ExplorationFeed","ProfileTheUser","SearchForCommunities","Query","groupList","FirebaseProvider","props","children"],"mappings":"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","sourcesContent":["import React, {createContext, useState,useEffect,\n        useLayoutEffect,useCallback } from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { initializeApp } from 'firebase/app';\nimport {getAuth, \n  deleteUser, \n  sendPasswordResetEmail, \n  signOut, \n  updatePassword, \n  updateEmail, \n  FacebookAuthProvider,\n  getRedirectResult,\n  signInWithRedirect,\n\n  } from \"firebase/auth\";\nimport {getStorage, \n  ref,\n  uploadBytes, \n  getDownloadURL, \n  } from \"firebase/storage\";\nimport {getFirestore, \n  setDoc, \n  doc, \n  updateDoc,\n  getDoc, \n  addDoc,\n  orderBy,\n  query,\n  onSnapshot,\n  collection,\n  arrayUnion,\n  arrayRemove, limit, getDocs, where, \n  } from \"firebase/firestore\";\nimport config from \"../config/Firebase\"\nimport {signInWithEmailAndPassword, createUserWithEmailAndPassword} from \"firebase/auth\"; \nimport * as SecureStore from 'expo-secure-store';\n\nimport { getDatabase } from \"firebase/database\";\n\n// Initialize Firebase\nconst app = initializeApp(config);\nconst storage = getStorage(app);\nconst auth = getAuth(app);\nconst db = getFirestore(app); \nconst FirebaseContext = createContext(); \nconst database = getDatabase(app);\n\n// DOCS: \n//https://firebase.google.com/docs\n\nconst Firebase = {\n\n  CacheUserContext: async (user) => {\n\n    const jsonValue = JSON.stringify(user)\n    await AsyncStorage.setItem(\"User\", jsonValue)\n  },    \n\n  //hent ting fra databasen for å oppdatere. Ikke fra telefonen. Consistency\n  CacheGroupData: async () => {\n\n      //henter ut hvilken grupper brukeren tilhører \n      const groups = await Firebase.RetriveGroupData(); \n\n      //returnerer et array av json objekter\n      const objectArray = await Firebase.LoadGroups(groups); \n\n      const jsonValue = JSON.stringify(objectArray)\n      await AsyncStorage.setItem(\n        \"groups\",\n        jsonValue\n      );\n  },\n\n  RemoveCacheGroupData: async (groupID) => {\n\n    const value = await AsyncStorage.getItem(\"groups\");\n    if (value !== null) {\n      //Hent ut data fra async storage\n      const parsedJson = JSON.parse(value)\n      console.log(parsedJson)\n\n      const indexOfObject = parsedJson.findIndex(object => {\n        return object.groupID === groupID;\n      });\n      \n      parsedJson.splice(indexOfObject, 1);\n      console.log(parsedJson)\n\n      //prøver å stringifye en tom \n      if (parsedJson.length === 0) {\n         console.log(\"Array is empty!\") \n         AsyncStorage.removeItem(\"groups\")\n        return 1; \n      }\n\n      //check if the array is empty. If it is put Null inside it. \n      const jsonValue = JSON.stringify(parsedJson)\n      await AsyncStorage.setItem(\n        \"groups\",\n        jsonValue\n      );\n\n      return parsedJson; \n\n    }else{\n     console.log(\" no groups to remove in persistent storage\") \n    }\n },  \n\n ClearCacheGroupData: async () => {\n\n  const value = await AsyncStorage.getItem(\"groups\");\n  if (value !== null) {\n\n    AsyncStorage.removeItem(\"groups\")\n\n  }else{\n   console.log(\" no groups to remove in persistent storage\") \n  }\n},  \n\nValidateSignUpForm: async (email, password) => {\n  try{\n    \n    //query databasen for en epost\n    const UserRef = collection(db, \"user\");\n    const q = query(UserRef, where(\"email\", \"==\", email));\n\n    if(q != null){\n      return 2; \n    } \n\n    //Sjekk først om legden på passordet er bra nok \n    if(password.length < 6){\n      return 1; \n    } \n\n\n    //Sjekk med databasen om en bruker har samme epost, brukernavn \n    return; \n\n  \n  } catch(error) {\n    console.log(\"Error @ValidateSignUpForm:\", error.message)\n  }\n\n\n},  \n\n  getCurrentUser: () => {\n    return auth.currentUser; \n  },\n\n  createUser: async (user) => {\n\n    try{\n      await createUserWithEmailAndPassword(auth, user.email, user.password);\n\n      const uid = Firebase.getCurrentUser().uid;\n\n      let profilePhotoUrl = \"default\";\n\n      console.log(\"Sets the docs to database\")\n      \n      await setDoc(doc(db, \"users\", uid), {\n        username: user.username, \n        email: user.email,\n        password: user.password,\n        profilePhotoUrl, \n        groups:[],\n       });\n\n      if(user.profilePhoto){\n        profilePhotoUrl = await Firebase.uploadProfilePhoto(user.profilePhoto)\n      }\n\n      delete user.password; \n      return{...user, profilePhotoUrl, uid}; \n\n    } catch(error) {\n      console.log(\"Error @createUser:\", error.message)\n    }\n  },\n\n  uploadProfilePhoto: async (uri) => {\n\n    const uid = Firebase.getCurrentUser().uid; \n\n    try{\n      const photo = await Firebase.getBlob(uri)\n      const imagesRef = ref(storage, 'profilePhotos');\n      const uidRef = ref(imagesRef, uid);\n\n      await uploadBytes(uidRef, photo); \n\n      const url = await getDownloadURL(ref(storage, uidRef)); \n      const docRef = doc(db, \"users\", uid);\n\n      await updateDoc(docRef, {\n        profilePhotoUrl: url\n     });\n      return url; \n\n    }catch(error){\n      console.log(\"Error @uploadProfilePhoto\", error)\n    }\n  },\n\n  uploadGroupPhoto: async (uri, GroupID) => {\n\n    try{\n      console.log(\"1\")\n      const photo = await Firebase.getBlob(uri)\n      const imagesRef = ref(storage, 'GroupPhotos');\n      const uidRef = ref(imagesRef, GroupID);\n\n      await uploadBytes(uidRef, photo); \n      console.log(\"2\")\n      const url = await getDownloadURL(ref(storage, uidRef)); \n      const GroupRef = doc(db, \"groups\", GroupID);\n\n      await updateDoc(GroupRef, {\n        GroupPhotoUrl: url\n     });\n     console.log(\"3\")\n      return url; \n\n    }catch(error){\n      console.log(\"Error @uploadGroupPhoto\", error)\n    }\n  },\n    \n  getBlob: async(uri) => {\n    return await new Promise((resolve, reject) => {\n      //creates XHR object\n      const xhr = new XMLHttpRequest()\n      xhr.onload = () => {\n        resolve(xhr.response)\n      };\n      xhr.onerror = () => {\n        reject(new TypeError(\"Network request failed\"))\n      };\n      xhr.responseType = \"blob\";\n      //takes in three arguments, type of request, url/file, async or not\n      xhr.open(\"GET\", uri, true); \n      xhr.send(null);\n    })\n  },\n\n  getUserInfo: async (uid) => {\n    try{\n      const docRef = doc(db, \"users\", uid);\n      const user = await getDoc(docRef);\n\n      if(user.exists()){\n        return user.data(); \n      } else {\n        console.log(\"Can't get document @getUserInfo!\");\n      }\n      }catch(error){\n        console.log(\"error @getUserInfo\", error)\n      }\n    },\n\n  SignOutUser: async () => {\n    try{\n\n      await SecureStore.deleteItemAsync(\"User\");\n    \n      await signOut(auth);\n      return true; \n\n    }catch(error){\n      console.log(\"Error @SignOutUser\", error)\n    }\n    return false; \n  }, \n\n  SignInUser: async (email, password) => {\n    try{\n      await signInWithEmailAndPassword(auth, email, password); \n    }catch(error){\n      console.log(\"Error @SignInUser\", error)\n    }\n  },\n\n  SignInUserWithFacebook: async () => {\n    try{\n      const provider = new FacebookAuthProvider();\n      console.log(provider)\n      // This will trigger a full page redirect away from your app\n      await signInWithRedirect(auth, provider);\n      // After returning from the redirect when your app initializes you can obtain the result\n      const result = await getRedirectResult(auth);\n      if (result) {\n        // This is the signed-in user\n        const user = result.user;\n        // This gives you a Facebook Access Token.\n        const credential = FacebookAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n      }\n    }catch(error){\n      console.log(\"Error @SignInUserWithFacebook\", error)\n    }\n  },\n  DeleteUser: async () => {\n    try{\n      const user = auth.currentUser\n      deleteUser(user); \n    }catch(error){\n      console.log(\"Error @DeleteUser\", error)\n    }\n  }, \n\n  ResetPassword: async (email) => {\n    try{\n      return await sendPasswordResetEmail(auth, email); \n    }catch(error){\n      console.log(\"Error @ResetPassword\", error)\n    }\n  },\n\n  UpdateEmail: async (email) => {\n    try{\n      const uid = Firebase.getCurrentUser().uid; \n      await updateEmail(uid, email); \n\n      const docRef = doc(db, \"users\", uid);\n      //Update the database with the new email address\n      await updateDoc(docRef, {\n        email: email, \n      });\n\n    }catch(error){\n      console.log(\"Error @UpdateEmail\", error)\n    }\n  },\n\n  UpdatePassword: async (password) => {\n    try{\n      await updatePassword(currentUser, password);\n    }catch(error){\n      console.log(\"Error @UpdatePassword\", error)\n    }\n  },\n\n  UpdateUsername: async (NewUsername) => {\n    try{\n      const uid = Firebase.getCurrentUser().uid; \n      const docRef = doc(db, \"users\", uid);\n\n      await updateDoc(docRef, {\n        username: NewUsername, \n      });\n      \n    }catch(error){\n      console.log(\"Error @updateUsername\", error)\n    }\n  },\n\n  retrieveQR: async () => {\n    try{\n\n    } catch {\n      console.log(\"Could not retrive QR\")\n    }\n  }, \n  \n  //For å lage ei helt ny gruppe\n  CreateNewGroup: async (Group) => {\n\n    try{\n      //Gå også inn på user id og oppdater groups\n      const uid = Firebase.getCurrentUser().uid;\n      const UserRef = doc(db, \"users\", uid);\n\n      await updateDoc(UserRef, {\n        groups: arrayUnion(Group.GroupID)\n      });\n\n      let GroupPhotoUrl = \"default\"\n      \n      await setDoc(doc(db, \"groups\", Group.GroupID), {\n        groupname: Group.Groupname, \n        groupID: Group.GroupID, \n        color: Group.Color, \n        members: [uid],\n        privacy: Group.Privacy,\n        GroupPhotoUrl: GroupPhotoUrl\n        \n        //EncodedSVG: encodedData\n        //GroupPicture: picture\n      });\n      \n      if(Group.GroupPhoto){\n        GroupPhotoUrl = await Firebase.uploadGroupPhoto(Group.GroupPhoto, Group.GroupID)\n      }\n\n      //update persistent storage with the new group\n      Firebase.CacheGroupData()\n        \n    }catch(error){\n      console.log(\"Error @CreateNewGroup\", error)\n    }\n  }, \n\n   //Returnerer en liste over hvilke grupper man tilhører \n  RetriveGroupData: async () => {\n    try{\n     \n      const uid = Firebase.getCurrentUser().uid;\n      const snap = await getDoc(doc(db, \"users\", uid));\n      return snap.data().groups; \n      \n    }catch(error){\n      console.log(\"Error @RetriveGroupData\", error)\n    }\n  }, \n  \n  //hent ut objektene til gruppene\n  LoadGroups: async (array) => {\n    try{\n      \n      const objectList = [];\n      var arrayLength = array.length;\n      \n      for (var i = 0; i < arrayLength; i++) {\n        \n        const Snap = await getDoc(doc(db, \"groups\", array[i]))\n\n        objectList.push({\n          groupname: Snap.data().groupname, \n          groupID: Snap.data().groupID, \n          color: Snap.data().color, \n          members: Snap.data().members, \n          privacy: Snap.data().privacy,\n          GroupPhotoUrl: Snap.data().GroupPhotoUrl,\n        })\n      }; \n      \n      //returnerer en Liste med objekter.\n      return objectList; \n\n    } catch(error) {\n      console.log(\"Could not Load Groups\", error)\n    }\n  }, \n\n\n  LeaveGroup: async (GroupID) => {\n    try{\n\n      //updates the users data\n      const uid = Firebase.getCurrentUser().uid;\n      const UserRef = doc(db, \"users\", uid);\n\n      // Atomically remove a region from the \"regions\" array field.\n      await updateDoc(UserRef, {\n          groups: arrayRemove(GroupID)\n      }); \n\n    //updates the group data\n      const GroupRef = doc(db, \"groups\", GroupID);\n      // Atomically remove a region from the \"regions\" array field.\n      await updateDoc(GroupRef, {\n          members: arrayRemove(uid)\n      });\n\n    }catch(error){\n      console.log(\"Error @LeaveGroup\", error)\n    }\n  }, \n\n  JoinGroup: async (GroupID) => {\n\n    try{\n     //updates the users data\n     const uid = Firebase.getCurrentUser().uid;\n     const UserRef = doc(db, \"users\", uid);\n     // Atomically remove a region from the \"regions\" array field.\n     await updateDoc(UserRef, {\n         groups: arrayUnion(GroupID)\n     }); \n \n    //updates the group data\n     const GroupRef = doc(db, \"groups\", GroupID);\n     // Atomically remove a region from the \"regions\" array field.\n     await updateDoc(GroupRef,{\n         members: arrayUnion(uid)\n    });\n\n    //get the group data\n    let arrayObject = [];\n    const Snap = await getDoc(doc(db, \"groups\", GroupID ))\n\n    arrayObject.push({\n      groupname: Snap.data().groupname, \n      groupID: Snap.data().groupID, \n      color: Snap.data().color, \n      members: Snap.data().members, \n      privacy: Snap.data().privacy,\n      GroupPhotoUrl: Snap.data().GroupPhotoUrl,\n    })\n\n    console.log(arrayObject); \n\n    //update persistent storage with the new group\n    Firebase.CacheGroupData(arrayObject)\n    \n    }catch(error){\n      console.log(\"Error @JoinGroup\", error)\n    }\n  }, \n\n  AddMemberToGroup: async (member) => {\n    try{\n      const docRef = doc(db, \"users\", uid);\n      //Update the database with the new email address\n      await updateDoc(docRef, {\n        Member: member, \n      });\n    }catch(error){\n      console.log(\"Error @AddToGroup\", error)\n    }\n  }, \n\n  AddTask: async () => {\n    try{\n      await setDoc(doc(db, \"users\", uid), {\n        username: user.username, \n        email: user.email,\n        profilePhotoUrl, \n       });\n    }catch(error){\n      console.log(\"Error @AddTask\", error)\n    }\n  }, \n\n  UpdateTask: async () => {\n    try{\n\n      const docRef = doc(db, \"users\", uid);\n      //Update the database with the new email address\n      await updateDoc(docRef, {\n        TaskName: TaskName, \n        Frequency: Frequency\n\n      });\n\n    }catch(error){\n      console.log(\"Error @UpdateTask\", error)\n    }\n  }, \n\n  AddRoutine: async (TaskName, frequency, Members) => {\n    try{\n\n      await setDoc(doc(db, \"users\", uid), {\n        username: user.username, \n        email: user.email,\n        profilePhotoUrl, \n       });\n\n    }catch(error){\n      console.log(\"Error @AddRutine\", error)\n    }\n  }, \n\n  UpdateRoutine: async (TaskName, frequency, Members) => {\n    try{\n      const docRef = doc(db, \"users\", uid);\n      //Update the database with the new email address\n      await updateDoc(docRef, {\n        TaskName: TaskName, \n        Frequency: Frequency\n\n      });\n\n    }catch(error){\n      console.log(\"Error @UpdateRutine\", error)\n    }\n  }, \n\n  TaskComplete: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @TaskComplete\", error)\n    }\n  }, \n\n  StayLoggedIn: async () => {\n    try{\n\n    }catch(error){\n      console.log(\"Error @StayLoggedIn\", error)\n    }\n  },\n\n  RetriveMessages: async () => {\n    try{\ns\n      const DocRef = doc(db, \"chats\", \"snusken\" );\n      const q = query(DocRef, orderBy(\"createdAt\", \"desc\"));\n      //const taskQuery = doc(collection(db, \"chats\"), where(\"GroupID\", \"==\", groupID))\n      onSnapshot(q, querySnapshot => {\n          const MessageArray = []\n          querySnapshot.forEach((doc) => {\n            MessageArray.push(doc.data())\n            console.log(\"retrived messages\", MessageArray)\n            return MessageArray; \n          })\n      });\n    }catch(error){\n      console.log(\"Error @RetriveMessages\", error)\n      // unsubscribe(); når brukeren går ut av chatterommet\n    }\n  }, \n\n  SendMessage: async (text) => {\n    \n    const uid = Firebase.getCurrentUser().uid;\n\n    try{\n      await setDoc(doc(db, \"chats\", \"snusken\"), {\n        id: uid,\n        text, \n      });\n      }catch(error){\n        console.log(\"Error @SendMessage\", error)\n      }\n    \n    }, \n\n  RetrivingMessages: async (text) => {\n  \n    setState({ readError: null });\n    try {\n      database.ref(\"chats\").on(\"value\", snapshot => {\n        let chats = [];\n        snapshot.forEach((snap) => {\n          chats.push(snap.val());\n        });\n        setState({ chats });\n      });\n    } catch (error) {\n      setState({ readError: error.message });\n    }\n  },\n\n  SendingMessages: async (text) => {\n  \n    preventDefault();\n    setState({ writeError: null });\n    try {\n      await db.ref(\"chats\").push({\n        content: state.content,\n        timestamp: Date.now(),\n        uid: state.user.uid\n      });\n      setState({ content: '' });\n    } catch (error) {\n      setState({ writeError: error.message });\n    }\n  }, \n\n  RetriveFeed: async (SortSettings) => {\n\n    const objectList = [];\n    const GroupArray = [];\n\n    try {\n\n      const groups = await Firebase.RetriveGroupsStorage(); \n      \n      groups.forEach((doc) => {\n        GroupArray.push({\n          groupname: doc.groupID, \n        })\n      })\n\n      for (let i = 0; i < GroupArray.length; i++) {\n\n        const docRef = doc(db, \"groups\", GroupArray[i].groupname); \n        const collectionRef = collection(docRef, \"posts\"); \n  \n        const q = query(collectionRef, orderBy(\"id\"), limit(3));\n        const querySnapshot = await getDocs(q);\n  \n        querySnapshot.forEach((doc) => {\n          \n            objectList.push({\n            id: doc.data().id, \n            user: doc.data().user, \n            avatar: doc.data().avatar, \n            postedAt: doc.data().postedAt, \n            post: doc.data().post,   \n            Upvotes: doc.data().Upvotes, \n            Downvotes: doc.data().Downvotes, \n          })\n        })\n      }\n  \n      return objectList; \n\n      const SortedFeed = SortGroupFeed(objectList, SortSettings); \n\n    }catch (error) {\n      console.log(\"Error @RetriveFeed\", error)\n    }\n  }, \n\nAddPost: async (post, groupID) => {\n  \n  const docRef = doc(db, \"groups\", groupID); \n\n  try{\n    await setDoc(doc(docRef, \"posts\", post.id), {\n      id: post.id, \n      user: post.user, \n      avatar: post.avatar, \n      postedAt: post.postedAt, \n      post: post.post,   \n      Upvotes: post.Upvotes, \n      Downvotes: post.Downvotes\n    });\n\n    }catch(error){\n      console.log(\"Error @AddPost\", error)\n    }\n  }, \n\nUpdatePost: async (post, groupID) => {\n  \n  const docRef = doc(db, \"groups\", groupID); \n  const postRef = doc(docRef, \"\", \"\")\n\n  try{\n    updateDoc(postRef, post)\n  }catch{\n    console.log(\"Error @UpdatePost\")\n  }\n}, \n\nRetriveGroupsStorage: async () => {\n\n  try {\n\n    const value = await AsyncStorage.getItem(\"groups\");\n\n    if (value !== null) {\n      const parsedJson = JSON.parse(value)\n      return parsedJson; \n\n    }else{\n      //henter ut hvilken grupper brukeren tilhører \n      const groups = await Firebase.RetriveGroupData(); \n      //returnerer et array av json objekter\n      const objectArray = await Firebase.LoadGroups(groups); \n\n      const jsonValue = JSON.stringify(objectArray)\n      await AsyncStorage.setItem(\n        \"groups\",\n        jsonValue\n      );\n      return objectArray; \n    }\n  } catch (error) {\n    console.log(\"Error @RetriveGroupsStorage\", error)\n  }\n},\n\nSortGroupFeed: async (posts, sortsettings) => {\n\n  try{\n    /*sorter postene etter \n    -Upvotes \n    -nylige \n    -\n\n    */\n   if(sortsettings === \"recent\"){\n    //sjekker \n\n   }\n   if(sortsettings === \"upvotes\"){\n\n    \n  }\n\n    \n    }catch(error){\n      console.log(\"Error @SortGroupFeed\", error)\n    }\n  }, \n\n  ExplorationFeed: async () => {\n\n  try{\n\n    const objectList = [];\n\n    const q = query(collection(db, \"groups\"), where(\"privacy\", \"==\", false));\n    const querySnapshot = await getDocs(q);\n\n    querySnapshot.forEach((doc) => {\n        objectList.push({\n        groupID: doc.data().groupID, \n        groupname: doc.data().groupname, \n        GroupPhotoUrl: doc.data().GroupPhotoUrl\n      })\n    })\n    \n    return objectList; \n    \n    }catch(error){\n      console.log(\"Error @ExplorationFeed\", error)\n    }\n  }, \n  \n  ProfileTheUser: async () => {\n\n    try{\n      /*\n      Try and make a profile\n      What data points would i need to suggest the best content?\n      -Hvilken type grupper bruker man mest tid i. \n      -Hvilken grupper er andre i samme gruppe med i\n      \n      */\n  \n      \n      }catch(error){\n        console.log(\"Error @ProfileTheUser\", error)\n      }\n    }, \n\n  SearchForCommunities: async (Query) => {\n\n    try{\n\n      const groupList = [];\n\n      const q = query(GroupRef, where(\"groupname\", \"==\", \"Query\"));\n      const querySnapshot = await getDocs(q);\n\n      querySnapshot.forEach((doc) => {\n      \n        groupList.push({\n        groupID: doc.data().groupID, \n        groupname: doc.data().groupname, \n        GroupPhotoUrl: doc.data().GroupPhotoUrl\n      })\n\n      console.log(groupList)\n      return groupList; \n\n    })\n      \n      }catch(error){\n        console.log(\"Error @SearchForCommunities\", error)\n      }\n    }, \n}; \n\n\nconst FirebaseProvider = (props) => {\n    return <FirebaseContext.Provider value={Firebase}>{props.children}</FirebaseContext.Provider>; \n}; \n\nexport {FirebaseContext, FirebaseProvider};"]},"metadata":{},"sourceType":"module"}