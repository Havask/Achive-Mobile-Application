{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useContext } from 'react';\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PropsContext } from \"../Chatty\";\nvar isLoaded = false;\n\ntry {\n  require('moti');\n\n  require('expo-linear-gradient');\n\n  isLoaded = true;\n} catch (_unused) {\n  console.warn('Moti and expo-linear-gradient is not installed. Skeleton loader will not work.');\n}\n\nexport function Skeleton(props) {\n  var propsContext = useContext(PropsContext);\n\n  if (propsContext !== null && propsContext !== void 0 && propsContext.enableSkeletonLoader && isLoaded) {\n    try {\n      var SS = require('moti/skeleton').Skeleton;\n\n      return React.createElement(SS, _extends({\n        colorMode: Appearance.getColorScheme()\n      }, props), props.children);\n    } catch (_unused2) {\n      console.warn('Moti and expo-linear-gradient is not installed. Skeleton loader will not work.');\n    }\n  }\n\n  return React.createElement(View, null, props.children);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;AAEA,SAASC,YAAT;AACA,IAAIC,QAAiB,GAAG,KAAxB;;AAEA,IAAI;EACFC,OAAO,CAAC,MAAD,CAAPA;;EACAA,OAAO,CAAC,sBAAD,CAAPA;;EACAD,QAAQ,GAAG,IAAXA;AAHF,EAIE,gBAAM;EACNE,OAAO,CAACC,IAARD,CACE,gFADFA;AAGD;;AAOD,OAAO,SAASE,QAAT,CAAkBC,KAAlB,EAA8B;EACnC,IAAMC,YAAY,GAAGR,UAAU,CAACC,YAAD,CAA/B;;EAEA,IAAIO,YAAY,SAAZA,gBAAY,WAAZA,gBAAY,CAAEC,oBAAdD,IAAsCN,QAA1C,EAAoD;IAClD,IAAI;MACF,IAAMQ,EAAE,GAAGP,OAAO,CAAC,eAAD,CAAPA,CAAyBG,QAApC;;MAEA,OACEP,oBAACW,EAAD;QAAIC,SAAS,EAAEC,UAAU,CAACC,cAAXD;MAAf,GAAgDL,KAAhD,GACGA,KAAK,CAACO,QADT,CADF;IAHF,EAQE,iBAAM;MACNV,OAAO,CAACC,IAARD,CACE,gFADFA;IAGD;EACF;;EAED,OAAOL,oBAACgB,IAAD,QAAOR,KAAK,CAACO,QAAb,CAAP;AACD","names":["React","useContext","PropsContext","isLoaded","require","console","warn","Skeleton","props","propsContext","enableSkeletonLoader","SS","colorMode","Appearance","getColorScheme","children","View"],"sources":["moti.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Appearance, View } from 'react-native';\nimport { PropsContext } from '../Chatty';\nlet isLoaded: boolean = false;\n\ntry {\n  require('moti');\n  require('expo-linear-gradient');\n  isLoaded = true;\n} catch {\n  console.warn(\n    'Moti and expo-linear-gradient is not installed. Skeleton loader will not work.'\n  );\n}\n\n/**\n * If the skeleton loader is enabled, then render the skeleton loader. Otherwise, render the children\n * @param {any} props - any\n * @returns A skeleton component / Native view object\n */\nexport function Skeleton(props: any) {\n  const propsContext = useContext(PropsContext);\n\n  if (propsContext?.enableSkeletonLoader && isLoaded) {\n    try {\n      const SS = require('moti/skeleton').Skeleton;\n\n      return (\n        <SS colorMode={Appearance.getColorScheme()} {...props}>\n          {props.children}\n        </SS>\n      );\n    } catch {\n      console.warn(\n        'Moti and expo-linear-gradient is not installed. Skeleton loader will not work.'\n      );\n    }\n  }\n\n  return <View>{props.children}</View>;\n}\n"]},"metadata":{},"sourceType":"module"}