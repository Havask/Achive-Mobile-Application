{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { ChatBubbleEmitter } from \"../utils/eventEmitter\";\n\nfunction _ReplyingTo(props) {\n  var username = props.username,\n      text = props.text,\n      messageId = props.messageId;\n  var cuttedText = useMemo(function () {\n    return text.slice(0, 100) + '...';\n  }, [text]);\n  var onPressChatBubble = useCallback(function () {\n    ChatBubbleEmitter.emit('replyBubblePressed', messageId);\n  }, [messageId]);\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: onPressChatBubble\n  }, React.createElement(View, {\n    style: styles.reply\n  }, React.createElement(View, {\n    style: styles.replyBody\n  }, React.createElement(Text, {\n    style: styles.replyUsername\n  }, username), React.createElement(Text, null, cuttedText))));\n}\n\nexport var ReplyingTo = React.memo(_ReplyingTo);\nvar styles = StyleSheet.create({\n  reply: {\n    borderRadius: 10,\n    flexDirection: 'row',\n    padding: 10,\n    backgroundColor: '#f5f5f5',\n    borderLeftColor: '#a35d96',\n    borderLeftWidth: 6,\n    marginBottom: 10\n  },\n  replyBody: {},\n  replyUsername: {\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["ReplyingTo.tsx"],"names":["messageId","cuttedText","useMemo","text","onPressChatBubble","useCallback","ChatBubbleEmitter","styles","reply","replyBody","replyUsername","ReplyingTo","React","borderRadius","flexDirection","padding","backgroundColor","borderLeftColor","borderLeftWidth","marginBottom","fontWeight"],"mappings":"AAAA,OAAA,KAAA,IAAA,WAAA,QAAA,OAAA;AACA,SAAA,OAAA,QAAA,OAAA;;;;AAEA,SAAA,wBAAA,QAAA,8BAAA;AACA,SAAA,iBAAA;;AAEA,SAAA,WAAA,CAAA,KAAA,EAIG;AACD,MAAM,QAAN,GAAA,KAAA,CAAM,QAAN;AAAA,MAAM,IAAN,GAAA,KAAA,CAAM,IAAN;AAAA,MAAwBA,SAAxB,GAAA,KAAA,CAAwBA,SAAxB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAM;AAC/B,WAAOC,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAAA,GAAAA,IAAP,KAAA;AADwB,GAAA,EAEvB,CAFH,IAEG,CAFuB,CAA1B;AAIA,MAAMC,iBAAiB,GAAGC,WAAW,CAAC,YAAM;AAC1CC,IAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,oBAAAA,EAAAA,SAAAA;AADmC,GAAA,EAElC,CAFH,SAEG,CAFkC,CAArC;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AAA0B,IAAA,OAAO,EAAEF;AAAnC,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG;AAApB,GAAA,EADF,QACE,CADF,EAEE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EALR,UAKQ,CAFF,CADF,CADF,CADF;AAUD;;AAED,OAAO,IAAMC,UAAU,GAAGC,KAAK,CAALA,IAAAA,CAAnB,WAAmBA,CAAnB;AAEP,IAAML,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,KAAK,EAAE;AACLK,IAAAA,YAAY,EADP,EAAA;AAELC,IAAAA,aAAa,EAFR,KAAA;AAGLC,IAAAA,OAAO,EAHF,EAAA;AAILC,IAAAA,eAAe,EAJV,SAAA;AAKLC,IAAAA,eAAe,EALV,SAAA;AAMLC,IAAAA,eAAe,EANV,CAAA;AAOLC,IAAAA,YAAY,EAAE;AAPT,GADwB;AAU/BV,EAAAA,SAAS,EAVsB,EAAA;AAW/BC,EAAAA,aAAa,EAAE;AACbU,IAAAA,UAAU,EAAE;AADC;AAXgB,CAAlB,CAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { ChatBubbleEmitter } from '../utils/eventEmitter';\n\nfunction _ReplyingTo(props: {\n  username: string;\n  text: string;\n  messageId: number;\n}) {\n  const { username, text, messageId } = props;\n\n  const cuttedText = useMemo(() => {\n    return text.slice(0, 100) + '...';\n  }, [text]);\n\n  const onPressChatBubble = useCallback(() => {\n    ChatBubbleEmitter.emit('replyBubblePressed', messageId);\n  }, [messageId]);\n\n  return (\n    <TouchableWithoutFeedback onPress={onPressChatBubble}>\n      <View style={styles.reply}>\n        <View style={styles.replyBody}>\n          <Text style={styles.replyUsername}>{username}</Text>\n          <Text>{cuttedText}</Text>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport const ReplyingTo = React.memo(_ReplyingTo);\n\nconst styles = StyleSheet.create({\n  reply: {\n    borderRadius: 10,\n    flexDirection: 'row',\n    padding: 10,\n    backgroundColor: '#f5f5f5',\n    borderLeftColor: '#a35d96',\n    borderLeftWidth: 6,\n    marginBottom: 10,\n  },\n  replyBody: {},\n  replyUsername: {\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}