{"ast":null,"code":"export function loadParsedText() {\n  try {\n    var ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\");\n  }\n}\nexport var HASHTAG_PATTERN_SHAPE = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan'\n  }\n};\nexport var MENTION_PATTERN_SHAPE = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange'\n  }\n};\nexport var URL_PATTERN_SHAPE = {\n  type: 'url',\n  style: {\n    color: 'blue'\n  }\n};\nexport var ALL_PATERNS_SHAPES = [HASHTAG_PATTERN_SHAPE, MENTION_PATTERN_SHAPE, URL_PATTERN_SHAPE];\nexport function LoadAllPaternShapes(onPress) {\n  ALL_PATERNS_SHAPES.map(function (pattern) {\n    if (pattern !== null && pattern !== void 0 && pattern.onPress) return;\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}","map":{"version":3,"mappings":"AAEA,OAAO,SAASA,cAAT,GAA0B;EAC/B,IAAI;IACF,IAAMC,qBAAqB,GAAGC,OAAO,CAAC,0BAAD,CAAPA,CAAoCC,OAAlE;;IAEA,OAAOF,qBAAP;EAHF,EAIE,OAAOG,GAAP,EAAY;IACZC,OAAO,CAACC,IAARD,CACE,kGADFA;EAGD;AACF;AAED,OAAO,IAAME,qBAAoC,GAAG;EAClDC,OAAO,EAAE,QADyC;EAElDC,KAAK,EAAE;IACLC,KAAK,EAAE;EADF;AAF2C,CAA7C;AAMP,OAAO,IAAMC,qBAAoC,GAAG;EAClDH,OAAO,EAAE,SADyC;EAElDC,KAAK,EAAE;IACLC,KAAK,EAAE;EADF;AAF2C,CAA7C;AAMP,OAAO,IAAME,iBAAgC,GAAG;EAC9CC,IAAI,EAAE,KADwC;EAE9CJ,KAAK,EAAE;IACLC,KAAK,EAAE;EADF;AAFuC,CAAzC;AAOP,OAAO,IAAMI,kBAAkB,GAAG,CAChCP,qBADgC,EAEhCI,qBAFgC,EAGhCC,iBAHgC,CAA3B;AAUP,OAAO,SAASG,mBAAT,CACLC,OADK,EAEL;EACAF,kBAAkB,CAACG,GAAnBH,CAAwBN,iBAAD,EAAa;IAClC,IAAIA,OAAJ,SAAIA,WAAJ,WAAIA,WAAO,CAAEQ,OAAb,EAAsB;IAEtBR,OAAO,CAACQ,OAARR,GAAkBQ,OAAlBR;IACAU,MAAM,CAACC,MAAPD,CAAcV,OAAdU;EAJF;AAMD","names":["loadParsedText","ReactNativeParsedText","require","default","err","console","warn","HASHTAG_PATTERN_SHAPE","pattern","style","color","MENTION_PATTERN_SHAPE","URL_PATTERN_SHAPE","type","ALL_PATERNS_SHAPES","LoadAllPaternShapes","onPress","map","Object","freeze"],"sources":["patterns.ts"],"sourcesContent":["import type { IPatternShape } from 'src/types/Chatty.types';\n\nexport function loadParsedText() {\n  try {\n    const ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\n      \"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\"\n    );\n  }\n}\n\nexport const HASHTAG_PATTERN_SHAPE: IPatternShape = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan',\n  },\n};\nexport const MENTION_PATTERN_SHAPE: IPatternShape = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange',\n  },\n};\nexport const URL_PATTERN_SHAPE: IPatternShape = {\n  type: 'url',\n  style: {\n    color: 'blue',\n  },\n};\n\nexport const ALL_PATERNS_SHAPES = [\n  HASHTAG_PATTERN_SHAPE,\n  MENTION_PATTERN_SHAPE,\n  URL_PATTERN_SHAPE,\n];\n\n/**\n * Load all the patterns and set the onPress function\n * @param onPress - (pattern: string, index: number) => void\n */\nexport function LoadAllPaternShapes(\n  onPress: (pattern: string, index: number) => void\n) {\n  ALL_PATERNS_SHAPES.map((pattern) => {\n    if (pattern?.onPress) return;\n\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}