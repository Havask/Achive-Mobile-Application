{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { Video } from \"./Video\";\nexport function VideoThumbnail(_ref) {\n  var _media$videoOptions3, _media$videoOptions4;\n\n  var media = _ref.media,\n      isSelected = _ref.isSelected;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showVideo = _useState2[0],\n      setShowVideo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showThumbnail = _useState4[0],\n      setShowThumbnail = _useState4[1];\n\n  var playIcon = useMemo(function () {\n    return require(\"../assets/icons/play.png\");\n  }, []);\n  useEffect(function () {\n    return function () {\n      setShowVideo(false);\n    };\n  }, []);\n  var onPressThumbnail = useCallback(function () {\n    setShowVideo(true);\n  }, []);\n  useEffect(function () {\n    InteractionManager.runAfterInteractions(function () {\n      var _media$videoOptions;\n\n      if (media !== null && media !== void 0 && (_media$videoOptions = media.videoOptions) !== null && _media$videoOptions !== void 0 && _media$videoOptions.thumbnail) {\n        var _media$videoOptions2;\n\n        Image.prefetch(media === null || media === void 0 ? void 0 : (_media$videoOptions2 = media.videoOptions) === null || _media$videoOptions2 === void 0 ? void 0 : _media$videoOptions2.thumbnail).then(function () {\n          setShowThumbnail(true);\n        });\n      } else {\n        setShowThumbnail(true);\n      }\n    });\n  }, [media === null || media === void 0 ? void 0 : (_media$videoOptions3 = media.videoOptions) === null || _media$videoOptions3 === void 0 ? void 0 : _media$videoOptions3.thumbnail]);\n\n  if (showVideo) {\n    return React.createElement(Video, {\n      media: media\n    });\n  }\n\n  if (!showThumbnail) {\n    React.createElement(View, {\n      style: styles.spinner\n    }, React.createElement(ActivityIndicator, {\n      size: \"small\"\n    }));\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: isSelected ? onPressThumbnail : function () {\n      return null;\n    }\n  }, React.createElement(ImageBackground, {\n    source: {\n      uri: media === null || media === void 0 ? void 0 : (_media$videoOptions4 = media.videoOptions) === null || _media$videoOptions4 === void 0 ? void 0 : _media$videoOptions4.thumbnail\n    },\n    style: !isSelected ? styles.container : styles.isSelecetedContainer,\n    imageStyle: styles.contentContainer\n  }, React.createElement(View, {\n    style: styles.overlay\n  }), React.createElement(Image, {\n    source: playIcon,\n    style: !isSelected ? styles.image : styles.isSelectedImage\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    width: 110,\n    height: 100,\n    borderRadius: 15,\n    marginRight: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center'\n  },\n  isSelecetedContainer: {\n    width: 300,\n    height: 300,\n    borderRadius: 15,\n    marginRight: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center'\n  },\n  contentContainer: {\n    borderRadius: 15\n  },\n  image: {\n    width: 25,\n    height: 25\n  },\n  isSelectedImage: {\n    width: 50,\n    height: 50\n  },\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    borderRadius: 15\n  },\n  spinner: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center'\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;;;;;;;AASA,SAASC,wBAAT,QAAyC,8BAAzC;AAEA,SAASC,KAAT;AAOA,OAAO,SAASC,cAAT,OAAuD;EAAA;;EAAA,IAA7BC,KAA6B,QAA7BA,KAA6B;EAAA,IAAtBC,UAAsB,QAAtBA,UAAsB;;EAC5D,gBAAkCL,QAAQ,CAAU,KAAV,CAA1C;EAAA;EAAA,IAAOM,SAAP;EAAA,IAAkBC,YAAlB;;EACA,iBAA0CP,QAAQ,CAAC,KAAD,CAAlD;EAAA;EAAA,IAAOQ,aAAP;EAAA,IAAsBC,gBAAtB;;EACA,IAAMC,QAAQ,GAAGX,OAAO,CAAC;IAAA,OAAMY,OAAO,4BAAb;EAAA,CAAD,EAA4C,EAA5C,CAAxB;EAEAb,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACXS,YAAY,CAAC,KAAD,CAAZA;IADF;EADO,GAIN,EAJM,CAATT;EAMA,IAAMc,gBAAgB,GAAGf,WAAW,CAAC,YAAM;IACzCU,YAAY,CAAC,IAAD,CAAZA;EADkC,GAEjC,EAFiC,CAApC;EAIAT,SAAS,CAAC,YAAM;IACde,kBAAkB,CAACC,oBAAnBD,CAAwC,YAAM;MAAA;;MAC5C,IAAIT,KAAJ,SAAIA,SAAJ,WAAIA,IAAJ,uBAAIA,KAAK,CAAEW,YAAX,UAAIX,IAAJY,8BAAIZ,wBAAqBa,SAAzB,EAAoC;QAAA;;QAClCC,KAAK,CAACC,QAAND,CAAed,KAAf,SAAeA,SAAf,WAAeA,GAAf,MAAeA,GAAf,wBAAeA,KAAK,CAAEW,YAAtB,yDAAeK,qBAAqBH,SAApCC,EAA+CG,IAA/CH,CAAoD,YAAM;UACxDT,gBAAgB,CAAC,IAAD,CAAhBA;QADF;MADF,OAIO;QACLA,gBAAgB,CAAC,IAAD,CAAhBA;MACD;IAPH;EADO,GAUN,CAACL,KAAD,SAACA,SAAD,WAACA,GAAD,MAACA,GAAD,wBAACA,KAAK,CAAEW,YAAR,yDAACO,qBAAqBL,SAAtB,CAVM,CAATnB;;EAYA,IAAIQ,SAAJ,EAAe;IACb,OAAOV,oBAACM,KAAD;MAAOE,KAAK,EAAEA;IAAd,EAAP;EACD;;EAED,IAAI,CAACI,aAAL,EAAoB;IAClBZ,oBAAC2B,IAAD;MAAMC,KAAK,EAAEC,MAAM,CAACC;IAApB,GACE9B,oBAAC+B,iBAAD;MAAmBC,IAAI,EAAC;IAAxB,EADF;EAGD;;EAED,OACEhC,oBAACK,wBAAD;IACE4B,OAAO,EAAExB,UAAU,GAAGO,gBAAH,GAAsB;MAAA,OAAM,IAAN;IAAA;EAD3C,GAGEhB,oBAACkC,eAAD;IACEC,MAAM,EAAE;MACNC,GAAG,EAAE5B,KAAF,SAAEA,SAAF,WAAEA,GAAF,MAAEA,GAAF,wBAAEA,KAAK,CAAEW,YAAT,yDAAEkB,qBAAqBhB;IADpB,CADV;IAIEO,KAAK,EAAE,CAACnB,UAAD,GAAcoB,MAAM,CAACS,SAArB,GAAiCT,MAAM,CAACU,oBAJjD;IAKEC,UAAU,EAAEX,MAAM,CAACY;EALrB,GAOEzC,oBAAC2B,IAAD;IAAMC,KAAK,EAAEC,MAAM,CAACa;EAApB,EAPF,EAQE1C,oBAACsB,KAAD;IACEa,MAAM,EAAErB,QADV;IAEEc,KAAK,EAAE,CAACnB,UAAD,GAAcoB,MAAM,CAACc,KAArB,GAA6Bd,MAAM,CAACe;EAF7C,EARF,CAHF,CADF;AAmBD;AAED,IAAMf,MAAM,GAAGgB,UAAU,CAACC,MAAXD,CAAkB;EAC/BP,SAAS,EAAE;IACTS,KAAK,EAAE,GADE;IAETC,MAAM,EAAE,GAFC;IAGTC,YAAY,EAAE,EAHL;IAITC,WAAW,EAAE,EAJJ;IAKTC,YAAY,EAAE,EALL;IAMTC,cAAc,EAAE,QANP;IAOTC,UAAU,EAAE,QAPH;IAQTC,YAAY,EAAE;EARL,CADoB;EAW/Bf,oBAAoB,EAAE;IACpBQ,KAAK,EAAE,GADa;IAEpBC,MAAM,EAAE,GAFY;IAGpBC,YAAY,EAAE,EAHM;IAIpBC,WAAW,EAAE,EAJO;IAKpBC,YAAY,EAAE,EALM;IAMpBC,cAAc,EAAE,QANI;IAOpBC,UAAU,EAAE,QAPQ;IAQpBC,YAAY,EAAE;EARM,CAXS;EAqB/Bb,gBAAgB,EAAE;IAChBQ,YAAY,EAAE;EADE,CArBa;EAwB/BN,KAAK,EAAE;IACLI,KAAK,EAAE,EADF;IAELC,MAAM,EAAE;EAFH,CAxBwB;EA4B/BJ,eAAe,EAAE;IACfG,KAAK,EAAE,EADQ;IAEfC,MAAM,EAAE;EAFO,CA5Bc;EAgC/BN,OAAO,EAAE;IACPa,QAAQ,EAAE,UADH;IAEPC,GAAG,EAAE,CAFE;IAGPC,IAAI,EAAE,CAHC;IAIPC,KAAK,EAAE,CAJA;IAKPC,MAAM,EAAE,CALD;IAMPC,eAAe,EAAE,oBANV;IAOPX,YAAY,EAAE;EAPP,CAhCsB;EAyC/BnB,OAAO,EAAE;IACP+B,IAAI,EAAE,CADC;IAEPT,cAAc,EAAE,QAFT;IAGPC,UAAU,EAAE,QAHL;IAIPC,YAAY,EAAE;EAJP;AAzCsB,CAAlBT,CAAf","names":["React","useCallback","useEffect","useMemo","useState","TouchableWithoutFeedback","Video","VideoThumbnail","media","isSelected","showVideo","setShowVideo","showThumbnail","setShowThumbnail","playIcon","require","onPressThumbnail","InteractionManager","runAfterInteractions","videoOptions","_media$videoOptions","thumbnail","Image","prefetch","_media$videoOptions2","then","_media$videoOptions3","View","style","styles","spinner","ActivityIndicator","size","onPress","ImageBackground","source","uri","_media$videoOptions4","container","isSelecetedContainer","imageStyle","contentContainer","overlay","image","isSelectedImage","StyleSheet","create","width","height","borderRadius","marginRight","marginBottom","justifyContent","alignItems","alignContent","position","top","left","right","bottom","backgroundColor","flex"],"sources":["VideoThumbnail.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  ActivityIndicator,\n  Image,\n  ImageBackground,\n  InteractionManager,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport type { IMedia } from '../types/Chatty.types';\nimport { Video } from './Video';\n\ninterface IProps {\n  media: IMedia;\n  isSelected?: boolean;\n}\n\nexport function VideoThumbnail({ media, isSelected }: IProps) {\n  const [showVideo, setShowVideo] = useState<boolean>(false);\n  const [showThumbnail, setShowThumbnail] = useState(false);\n  const playIcon = useMemo(() => require('../assets/icons/play.png'), []);\n\n  useEffect(() => {\n    return () => {\n      setShowVideo(false);\n    };\n  }, []);\n\n  const onPressThumbnail = useCallback(() => {\n    setShowVideo(true);\n  }, []);\n\n  useEffect(() => {\n    InteractionManager.runAfterInteractions(() => {\n      if (media?.videoOptions?.thumbnail) {\n        Image.prefetch(media?.videoOptions?.thumbnail).then(() => {\n          setShowThumbnail(true);\n        });\n      } else {\n        setShowThumbnail(true);\n      }\n    });\n  }, [media?.videoOptions?.thumbnail]);\n\n  if (showVideo) {\n    return <Video media={media} />;\n  }\n\n  if (!showThumbnail) {\n    <View style={styles.spinner}>\n      <ActivityIndicator size=\"small\" />\n    </View>;\n  }\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={isSelected ? onPressThumbnail : () => null}\n    >\n      <ImageBackground\n        source={{\n          uri: media?.videoOptions?.thumbnail,\n        }}\n        style={!isSelected ? styles.container : styles.isSelecetedContainer}\n        imageStyle={styles.contentContainer}\n      >\n        <View style={styles.overlay} />\n        <Image\n          source={playIcon}\n          style={!isSelected ? styles.image : styles.isSelectedImage}\n        />\n      </ImageBackground>\n    </TouchableWithoutFeedback>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 110,\n    height: 100,\n    borderRadius: 15,\n    marginRight: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n  isSelecetedContainer: {\n    width: 300,\n    height: 300,\n    borderRadius: 15,\n    marginRight: 10,\n    marginBottom: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n  contentContainer: {\n    borderRadius: 15,\n  },\n  image: {\n    width: 25,\n    height: 25,\n  },\n  isSelectedImage: {\n    width: 50,\n    height: 50,\n  },\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    borderRadius: 15,\n  },\n  spinner: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}