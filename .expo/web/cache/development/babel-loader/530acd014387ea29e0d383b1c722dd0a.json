{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useImperativeHandle, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ChatBubble } from \"../ChatBubble\";\nimport { PropsContext } from \"../Chatty\";\nimport { loadLottie } from \"../utils/lottie\";\n\nfunction _TypingStatus(_, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isTyping = _useState2[0],\n      _setIsTyping = _useState2[1];\n\n  var propsContext = useContext(PropsContext);\n  var LottieView = loadLottie();\n  useImperativeHandle(ref, function () {\n    return {\n      setIsTyping: function setIsTyping(_isTyping) {\n        _setIsTyping(_isTyping);\n      }\n    };\n  }, []);\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext !== null && propsContext !== void 0 && propsContext.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: React.createElement(LottieView, {\n          source: require(\"../assets/lottie/typing.json\"),\n          autoPlay: true,\n          style: {\n            width: 30\n          }\n        })\n      });\n    }\n\n    return React.createElement(ChatBubble, null, React.createElement(LottieView, {\n      source: require(\"../assets/lottie/typing.json\"),\n      autoPlay: true,\n      style: {\n        width: 30\n      }\n    }));\n  } else {\n    if (propsContext !== null && propsContext !== void 0 && propsContext.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return React.createElement(Text, null, \"Typing...\");\n  }\n}\n\nexport var TypingStatus = React.memo(React.forwardRef(_TypingStatus));","map":{"version":3,"sources":["TypingStatus.tsx"],"names":["useState","propsContext","useContext","LottieView","loadLottie","useImperativeHandle","setIsTyping","_isTyping","typingAnimation","require","width","TypingStatus","React"],"mappings":";AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,mBAAA,EAAA,QAAA,QAAA,OAAA;;AAGA,SAAA,UAAA;AACA,SAAA,YAAA;AACA,SAAA,UAAA;;AAEA,SAAA,aAAA,CAAA,CAAA,EAAA,GAAA,EAA2D;AACzD,kBAAgCA,QAAQ,CAAxC,KAAwC,CAAxC;AAAA;AAAA,MAAM,QAAN;AAAA,MAAM,YAAN;;AACA,MAAMC,YAAY,GAAGC,UAAU,CAA/B,YAA+B,CAA/B;AACA,MAAMC,UAAU,GAAGC,UAAnB,EAAA;AAEAC,EAAAA,mBAAmB,CAAA,GAAA,EAEjB;AAAA,WAAO;AACLC,MAAAA,WAAW,EAAGC,qBAAAA,SAAD,EAAwB;AACnCD,QAAAA,YAAW,CAAXA,SAAW,CAAXA;AACD;AAHI,KAAP;AAAA,GAFiB,EAAnBD,EAAmB,CAAnBA;AAUA,MAAI,CAAJ,QAAA,EAAe,OAAA,IAAA;;AAEf,MAAA,UAAA,EAAgB;AACd,QAAIJ,YAAJ,KAAA,IAAIA,IAAAA,YAAJ,KAAA,KAAA,CAAIA,IAAAA,YAAY,CAAhB,kBAAA,EAAsC;AACpC,aAAO,YAAY,CAAZ,kBAAA,CAAgC;AACrCO,QAAAA,eAAe,EACb,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,UAAA,MAAM,EAAEC,OADV,gCAAA;AAEE,UAAA,QAAQ,EAFV,IAAA;AAGE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAHT,SAAA;AAFmC,OAAhC,CAAP;AASD;;AAED,WACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,MAAA,MAAM,EAAED,OADV,gCAAA;AAEE,MAAA,QAAQ,EAFV,IAAA;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAHT,KAAA,CADF,CADF;AAbF,GAAA,MAsBO;AACL,QAAIT,YAAJ,KAAA,IAAIA,IAAAA,YAAJ,KAAA,KAAA,CAAIA,IAAAA,YAAY,CAAhB,kBAAA,EAAsC;AACpC,aAAOA,YAAY,CAAnB,kBAAOA,EAAP;AACD;;AAED,WAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAP,WAAO,CAAP;AACD;AACF;;AAED,OAAO,IAAMU,YAAY,GAAGC,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAAhC,aAAgCA,CAAXA,CAArB","sourcesContent":["import React, { Ref, useContext, useImperativeHandle, useState } from 'react';\nimport { Text } from 'react-native';\nimport type { ITypingStatusRef } from 'src/types/Chatty.types';\nimport { ChatBubble } from '../ChatBubble';\nimport { PropsContext } from '../Chatty';\nimport { loadLottie } from '../utils/lottie';\n\nfunction _TypingStatus(_: any, ref: Ref<ITypingStatusRef>) {\n  const [isTyping, setIsTyping] = useState(false);\n  const propsContext = useContext(PropsContext);\n  const LottieView = loadLottie();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setIsTyping: (_isTyping: boolean) => {\n        setIsTyping(_isTyping);\n      },\n    }),\n    []\n  );\n\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: (\n          <LottieView\n            source={require('../assets/lottie/typing.json')}\n            autoPlay\n            style={{ width: 30 }}\n          />\n        ),\n      });\n    }\n\n    return (\n      <ChatBubble>\n        <LottieView\n          source={require('../assets/lottie/typing.json')}\n          autoPlay\n          style={{ width: 30 }}\n        />\n      </ChatBubble>\n    );\n  } else {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return <Text>Typing...</Text>;\n  }\n}\n\nexport const TypingStatus = React.memo(React.forwardRef(_TypingStatus));\n"]},"metadata":{},"sourceType":"module"}