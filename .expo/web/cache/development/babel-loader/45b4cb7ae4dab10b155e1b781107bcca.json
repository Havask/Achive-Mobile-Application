{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAOA,OAAO,SAASC,WAAT,CAAwBC,KAAxB,EAAmD;EACxD,IAAMC,GAAG,GAAGH,MAAM,EAAlB;EACAD,SAAS,CAAC,YAAM;IACdI,GAAG,CAACC,OAAJD,GAAcD,KAAdC;EADO,GAEN,CAACD,KAAD,CAFM,CAATH;EAGA,OAAOI,GAAG,CAACC,OAAX;AACD","names":["useEffect","useRef","usePrevious","value","ref","current"],"sources":["usePrevious.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n/**\n * UsePrevious returns the previous value of a given value.\n * @param {any} value - any\n * @returns The previous value of the input value.\n */\nexport function usePrevious<T>(value: any): T | undefined {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}