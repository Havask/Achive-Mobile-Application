{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HapticType } from \"../types/Chatty.types\";\nvar hapticEngine;\nvar triggerHaptic;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  triggerHaptic = function triggerHaptic(type) {\n    return _regeneratorRuntime.async(function triggerHaptic$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = type;\n            _context.next = _context.t0 === HapticType.Light ? 3 : _context.t0 === HapticType.Medium ? 6 : _context.t0 === HapticType.Heavy ? 9 : 12;\n            break;\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light));\n\n          case 5:\n            return _context.abrupt(\"break\", 13);\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium));\n\n          case 8:\n            return _context.abrupt(\"break\", 13);\n\n          case 9:\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy));\n\n          case 11:\n            return _context.abrupt(\"break\", 13);\n\n          case 12:\n            return _context.abrupt(\"break\", 13);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n} catch (_unused) {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n\n    triggerHaptic = function triggerHaptic(type) {\n      return _regeneratorRuntime.async(function triggerHaptic$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = type;\n              _context2.next = _context2.t0 === HapticType.Light ? 3 : _context2.t0 === HapticType.Medium ? 5 : _context2.t0 === HapticType.Heavy ? 7 : 9;\n              break;\n\n            case 3:\n              hapticEngine.trigger('impactLight');\n              return _context2.abrupt(\"break\", 10);\n\n            case 5:\n              hapticEngine.trigger('impactMedium');\n              return _context2.abrupt(\"break\", 10);\n\n            case 7:\n              hapticEngine.trigger('impactHeavy');\n              return _context2.abrupt(\"break\", 10);\n\n            case 9:\n              return _context2.abrupt(\"break\", 10);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };","map":{"version":3,"sources":["hapticEngine.ts"],"names":["Platform","hapticEngine","require","triggerHaptic","HapticType","console"],"mappings":";;AACA,SAAA,UAAA;AAEA,IAAA,YAAA;AAGA,IAAA,aAAA;;AAEA,IAAI;AACF,MAAIA,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB,UAAM,IAAA,KAAA,CAAN,kCAAM,CAAN;AACD;;AAEDC,EAAAA,YAAY,GAAGC,OAAO,CALpB,cAKoB,CAAtBD;;AAGAE,EAAAA,aAAa,GAAG,uBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACd,IADc;AAAA,4CAEPC,UAAU,CAAf,KAFY,uBAKPA,UAAU,CAAf,MALY,uBAQPA,UAAU,CAAf,KARY;AAAA;;AAAA;AAAA;AAAA,6CAGJH,YAAY,CAAZA,WAAAA,CAAyBA,YAAY,CAAZA,mBAAAA,CAA/B,KAAMA,CAHI;;AAAA;AAAA;;AAAA;AAAA;AAAA,6CAMJA,YAAY,CAAZA,WAAAA,CAAyBA,YAAY,CAAZA,mBAAAA,CAA/B,MAAMA,CANI;;AAAA;AAAA;;AAAA;AAAA;AAAA,6CASJA,YAAY,CAAZA,WAAAA,CAAyBA,YAAY,CAAZA,mBAAAA,CAA/B,KAAMA,CATI;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhBE;AARF,CAAA,CAwBE,gBAAM;AACN,MAAI;AACFF,IAAAA,YAAY,GAAGC,OAAO,CAAtBD,8BAAsB,CAAtBA;;AACAE,IAAAA,aAAa,GAAG,uBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACd,IADc;AAAA,gDAEPC,UAAU,CAAf,KAFY,wBAKPA,UAAU,CAAf,MALY,wBAQPA,UAAU,CAAf,KARY;AAAA;;AAAA;AAGVH,cAAAA,YAAY,CAAZA,OAAAA,CAAAA,aAAAA;AAHU;;AAAA;AAMVA,cAAAA,YAAY,CAAZA,OAAAA,CAAAA,cAAAA;AANU;;AAAA;AASVA,cAAAA,YAAY,CAAZA,OAAAA,CAAAA,aAAAA;AATU;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhBE;AAFF,GAAA,CAkBE,OAAA,KAAA,EAAc;AACdE,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,yBAAAA;AACD;;AACDA,EAAAA,OAAO,CAAPA,IAAAA,CAAAA,yBAAAA;AACD;;AAED,SAAA,aAAA,EAAA,YAAA","sourcesContent":["import { Platform } from 'react-native';\nimport { HapticType } from '../types/Chatty.types';\n\nlet hapticEngine: any;\n\n/* This is a function that returns a promise. It is used to trigger haptic feedback. */\nlet triggerHaptic: (type: HapticType) => Promise<void>;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  // We're intitalizing the triggerHaptic function based on package they use.\n  triggerHaptic = async (type: HapticType) => {\n    switch (type) {\n      case HapticType.Light:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light);\n        break;\n      case HapticType.Medium:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium);\n        break;\n      case HapticType.Heavy:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy);\n        break;\n\n      default:\n        break;\n    }\n  };\n} catch {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n    triggerHaptic = async (type: HapticType) => {\n      switch (type) {\n        case HapticType.Light:\n          hapticEngine.trigger('impactLight');\n          break;\n        case HapticType.Medium:\n          hapticEngine.trigger('impactMedium');\n          break;\n        case HapticType.Heavy:\n          hapticEngine.trigger('impactHeavy');\n          break;\n\n        default:\n          break;\n      }\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };\n"]},"metadata":{},"sourceType":"module"}