{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useCallback } from 'react';\nimport { triggerHaptic } from \"../utils/hapticEngine\";\nexport function useHaptic() {\n  var trigger = useCallback(function _callee(type) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(triggerHaptic(type).catch(function (err) {\n              return console.error('Error while triggering haptic', err);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return {\n    trigger: trigger\n  };\n}","map":{"version":3,"sources":["useHaptic.ts"],"names":["trigger","useCallback","triggerHaptic","err","console"],"mappings":";AAAA,SAAA,WAAA,QAAA,OAAA;AAEA,SAAA,aAAA;AAMA,OAAO,SAAA,SAAA,GAAqB;AAC1B,MAAMA,OAAO,GAAGC,WAAW,CAAC,iBAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACpBC,aAAa,CAAbA,IAAa,CAAbA,CAAAA,KAAAA,CAA2BC,UAAAA,GAAD;AAAA,qBAC9BC,OAAO,CAAPA,KAAAA,CAAAA,+BAAAA,EADF,GACEA,CAD8B;AAAA,aAA1BF,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAA3B,EAA2B,CAA3B;AAMA,SAAO;AAAEF,IAAAA,OAAAA,EAAAA;AAAF,GAAP;AACD","sourcesContent":["import { useCallback } from 'react';\nimport type { HapticType } from '../types/Chatty.types';\nimport { triggerHaptic } from '../utils/hapticEngine';\n\n/**\n * `useHaptic` returns a `trigger` function that triggers haptic feedback\n * @returns A function that triggers haptic feedback.\n */\nexport function useHaptic() {\n  const trigger = useCallback(async (type: HapticType) => {\n    await triggerHaptic(type).catch((err) =>\n      console.error('Error while triggering haptic', err)\n    );\n  }, []);\n\n  return { trigger };\n}\n"]},"metadata":{},"sourceType":"module"}