{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useContext } from 'react';\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PropsContext } from \"../Chatty\";\nvar isLoaded = false;\n\ntry {\n  require('moti');\n\n  require('expo-linear-gradient');\n\n  isLoaded = true;\n} catch (_unused) {\n  console.warn('Moti and expo-linear-gradient is not installed. Skeleton loader will not work.');\n}\n\nexport function Skeleton(props) {\n  var propsContext = useContext(PropsContext);\n\n  if (propsContext !== null && propsContext !== void 0 && propsContext.enableSkeletonLoader && isLoaded) {\n    try {\n      var SS = require('moti/skeleton').Skeleton;\n\n      return React.createElement(SS, _extends({\n        colorMode: Appearance.getColorScheme()\n      }, props), props.children);\n    } catch (_unused2) {\n      console.warn('Moti and expo-linear-gradient is not installed. Skeleton loader will not work.');\n    }\n  }\n\n  return React.createElement(View, null, props.children);\n}","map":{"version":3,"sources":["moti.tsx"],"names":["isLoaded","require","console","propsContext","useContext","SS","Appearance","props"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;;;AAEA,SAAA,YAAA;AACA,IAAIA,QAAiB,GAArB,KAAA;;AAEA,IAAI;AACFC,EAAAA,OAAO,CAAPA,MAAO,CAAPA;;AACAA,EAAAA,OAAO,CAAPA,sBAAO,CAAPA;;AACAD,EAAAA,QAAQ,GAARA,IAAAA;AAHF,CAAA,CAIE,gBAAM;AACNE,EAAAA,OAAO,CAAPA,IAAAA,CAAAA,gFAAAA;AAGD;;AAOD,OAAO,SAAA,QAAA,CAAA,KAAA,EAA8B;AACnC,MAAMC,YAAY,GAAGC,UAAU,CAA/B,YAA+B,CAA/B;;AAEA,MAAID,YAAY,KAAZA,IAAAA,IAAAA,YAAY,KAAA,KAAZA,CAAAA,IAAAA,YAAY,CAAZA,oBAAAA,IAAJ,QAAA,EAAoD;AAClD,QAAI;AACF,UAAME,EAAE,GAAGJ,OAAO,CAAPA,eAAO,CAAPA,CAAX,QAAA;;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,EAAA,EAAA,QAAA,CAAA;AAAI,QAAA,SAAS,EAAEK,UAAU,CAAVA,cAAAA;AAAf,OAAA,EAAA,KAAA,CAAA,EACGC,KAAK,CAFV,QACE,CADF;AAHF,KAAA,CAQE,iBAAM;AACNL,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,gFAAAA;AAGD;AACF;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAOK,KAAK,CAAnB,QAAO,CAAP;AACD","sourcesContent":["import React, { useContext } from 'react';\nimport { Appearance, View } from 'react-native';\nimport { PropsContext } from '../Chatty';\nlet isLoaded: boolean = false;\n\ntry {\n  require('moti');\n  require('expo-linear-gradient');\n  isLoaded = true;\n} catch {\n  console.warn(\n    'Moti and expo-linear-gradient is not installed. Skeleton loader will not work.'\n  );\n}\n\n/**\n * If the skeleton loader is enabled, then render the skeleton loader. Otherwise, render the children\n * @param {any} props - any\n * @returns A skeleton component / Native view object\n */\nexport function Skeleton(props: any) {\n  const propsContext = useContext(PropsContext);\n\n  if (propsContext?.enableSkeletonLoader && isLoaded) {\n    try {\n      const SS = require('moti/skeleton').Skeleton;\n\n      return (\n        <SS colorMode={Appearance.getColorScheme()} {...props}>\n          {props.children}\n        </SS>\n      );\n    } catch {\n      console.warn(\n        'Moti and expo-linear-gradient is not installed. Skeleton loader will not work.'\n      );\n    }\n  }\n\n  return <View>{props.children}</View>;\n}\n"]},"metadata":{},"sourceType":"module"}