{"ast":null,"code":"import React, { useCallback, useContext, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from \"./ChatBubble\";\nimport { PropsContext } from \"./Chatty\";\n\nfunction _SwipeableBubble(props) {\n  var _propsContext$bubbleP3;\n\n  var onReply = props.onReply,\n      message = props.message,\n      children = props.children;\n  var propsContext = useContext(PropsContext);\n  var swipeableRef = useRef(null);\n\n  var _onReply = useCallback(function () {\n    var _swipeableRef$current;\n\n    if (!message) return;\n    onReply(message);\n    (_swipeableRef$current = swipeableRef.current) === null || _swipeableRef$current === void 0 ? void 0 : _swipeableRef$current.close();\n  }, [message, onReply, swipeableRef]);\n\n  var renderLeftActions = useCallback(function () {\n    var _propsContext$bubbleP, _propsContext$bubbleP2;\n\n    return (_propsContext$bubbleP = (_propsContext$bubbleP2 = propsContext.bubbleProps) === null || _propsContext$bubbleP2 === void 0 ? void 0 : _propsContext$bubbleP2.replyDragElement) !== null && _propsContext$bubbleP !== void 0 ? _propsContext$bubbleP : React.createElement(Text, null, \" \");\n  }, [(_propsContext$bubbleP3 = propsContext.bubbleProps) === null || _propsContext$bubbleP3 === void 0 ? void 0 : _propsContext$bubbleP3.replyDragElement]);\n  if (!onReply) return children !== null && children !== void 0 ? children : React.createElement(ChatBubble, props);\n  return React.createElement(Swipeable, {\n    renderLeftActions: renderLeftActions,\n    friction: 2,\n    overshootFriction: 2,\n    onEnded: function onEnded() {\n      return _onReply();\n    },\n    enableTrackpadTwoFingerGesture: true,\n    ref: swipeableRef\n  }, children !== null && children !== void 0 ? children : React.createElement(ChatBubble, props));\n}\n\nexport var SwipeableBubble = React.memo(_SwipeableBubble);","map":{"version":3,"sources":["SwipeableBubble.tsx"],"names":["children","propsContext","useContext","swipeableRef","useRef","_onReply","useCallback","onReply","renderLeftActions","SwipeableBubble","React"],"mappings":"AAAA,OAAA,KAAA,IAAA,WAAA,EAAA,UAAA,EAAA,MAAA,QAAA,OAAA;;AAEA,SAAA,SAAA,QAAA,8BAAA;AACA,SAAA,UAAA;AACA,SAAA,YAAA;;AAGA,SAAA,gBAAA,CAAA,KAAA,EAAmD;AAAA,MAAA,sBAAA;;AACjD,MAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,MAAM,OAAN,GAAA,KAAA,CAAM,OAAN;AAAA,MAA0BA,QAA1B,GAAA,KAAA,CAA0BA,QAA1B;AACA,MAAMC,YAAY,GAAGC,UAAU,CAA/B,YAA+B,CAA/B;AACA,MAAMC,YAAY,GAAGC,MAAM,CAA3B,IAA2B,CAA3B;;AAEA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAAA,QAAA,qBAAA;;AACjC,QAAI,CAAJ,OAAA,EAAc;AAEdC,IAAAA,OAAO,CAH0B,OAG1B,CAAPA;AAEA,KAAA,qBAAA,GAAA,YAAY,CAAZ,OAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,KAAA,EAAA;AAL0B,GAAA,EAMzB,CAAA,OAAA,EAAA,OAAA,EANH,YAMG,CANyB,CAA5B;;AAQA,MAAMC,iBAAiB,GAAGF,WAAW,CAAC,YAAM;AAAA,QAAA,qBAAA,EAAA,sBAAA;;AAC1C,WAAA,CAAA,qBAAA,GAAA,CAAA,sBAAA,GAAOL,YAAY,CAAnB,WAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,sBAAAA,CAAP,gBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAqD,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAArD,GAAqD,CAArD;AADmC,GAAA,EAElC,CAAA,CAAA,sBAAA,GAACA,YAAY,CAAb,WAAA,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAACA,sBAAAA,CAFJ,gBAEG,CAFkC,CAArC;AAIA,MAAI,CAAJ,OAAA,EAAc,OAAOD,QAAP,KAAA,IAAOA,IAAAA,QAAP,KAAA,KAAA,CAAOA,GAAP,QAAOA,GAAY,KAAA,CAAA,aAAA,CAAA,UAAA,EAAnB,KAAmB,CAAnB;AAEd,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,iBAAiB,EADnB,iBAAA;AAEE,IAAA,QAAQ,EAFV,CAAA;AAGE,IAAA,iBAAiB,EAHnB,CAAA;AAIE,IAAA,OAAO,EAAE;AAAA,aAAMK,QAJjB,EAIW;AAAA,KAJX;AAKE,IAAA,8BAA8B,EALhC,IAAA;AAME,IAAA,GAAG,EAAEF;AANP,GAAA,EAQGH,QARH,KAAA,IAQGA,IAAAA,QARH,KAAA,KAAA,CAQGA,GARH,QAQGA,GAAY,KAAA,CAAA,aAAA,CAAA,UAAA,EATjB,KASiB,CARf,CADF;AAYD;;AAED,OAAO,IAAMS,eAAe,GAAGC,KAAK,CAALA,IAAAA,CAAxB,gBAAwBA,CAAxB","sourcesContent":["import React, { useCallback, useContext, useRef } from 'react';\nimport { Text } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from './ChatBubble';\nimport { PropsContext } from './Chatty';\nimport type { ISwipeableBubble } from './types/Chatty.types';\n\nfunction _SwipeableBubble(props: ISwipeableBubble) {\n  const { onReply, message, children } = props;\n  const propsContext = useContext(PropsContext);\n  const swipeableRef = useRef(null);\n\n  const _onReply = useCallback(() => {\n    if (!message) return;\n\n    onReply!(message);\n    //@ts-ignore\n    swipeableRef.current?.close();\n  }, [message, onReply, swipeableRef]);\n\n  const renderLeftActions = useCallback(() => {\n    return propsContext.bubbleProps?.replyDragElement ?? <Text> </Text>;\n  }, [propsContext.bubbleProps?.replyDragElement]);\n\n  if (!onReply) return children ?? <ChatBubble {...props} />;\n\n  return (\n    <Swipeable\n      renderLeftActions={renderLeftActions}\n      friction={2}\n      overshootFriction={2}\n      onEnded={() => _onReply()}\n      enableTrackpadTwoFingerGesture\n      ref={swipeableRef}\n    >\n      {children ?? <ChatBubble {...props} />}\n    </Swipeable>\n  );\n}\n\nexport const SwipeableBubble = React.memo(_SwipeableBubble);\n"]},"metadata":{},"sourceType":"module"}