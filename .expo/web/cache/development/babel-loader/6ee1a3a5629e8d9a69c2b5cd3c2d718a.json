{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport React, { useState, useContext } from \"react\";\nimport styled from \"styled-components/native\";\nimport { FirebaseContext } from \"../../../context/FirebaseContext\";\nimport { UserContext } from \"../../../context/UserContext\";\nimport { GroupContext } from \"../../../context/GroupContext\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Flex, Box, Text, Pressable, Heading, IconButton, Icon, HStack, Avatar, VStack, Spacer, Center, Image, Divider, Stack, Button } from \"native-base\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default GroupScreen = function GroupScreen(_ref) {\n  var navigation = _ref.navigation;\n  var firebase = useContext(FirebaseContext);\n\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useContext3 = useContext(GroupContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      Group = _useContext4[0],\n      setGroup = _useContext4[1];\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      settext = _useState2[1];\n\n  var makeid = function makeid(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  };\n\n  var ChangeGroup = function ChangeGroup(item) {\n    try {\n      navigation.push(\"GroupFeeds\");\n    } catch (error) {\n      alert(\"Unable to set up groupContext\");\n    }\n  };\n\n  var DATA = [{\n    id: makeid(6),\n    title: \"Posts\",\n    color: Group.color\n  }];\n\n  var renderitem = function renderitem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(Box, {\n      maxW: \"100%\",\n      children: _jsxs(VStack, {\n        children: [_jsx(Divider, {}), _jsx(Pressable, {\n          onPress: function onPress() {\n            return ChangeGroup(item);\n          },\n          children: _jsx(Box, {\n            children: _jsxs(HStack, {\n              space: 2,\n              w: \"100%\",\n              h: \"70\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              bg: \"primary.50\",\n              children: [_jsx(Text, {\n                color: \"coolGray.800\",\n                bold: true,\n                fontSize: \"xl\",\n                children: item.title\n              }), _jsx(Ionicons, {\n                name: \"chevron-forward-outline\",\n                size: 30\n              })]\n            })\n          })\n        }), _jsx(Divider, {})]\n      })\n    });\n  };\n\n  var RenderText = function RenderText() {\n    if (text === true) {\n      return _jsx(Pressable, {\n        onPress: toggleSwitch,\n        children: _jsx(Stack, {\n          alignItems: \"center\",\n          children: _jsx(Heading, {\n            fontSize: \"3xl\",\n            color: Group.color,\n            children: Group.groupname\n          })\n        })\n      });\n    } else {\n      return _jsx(Pressable, {\n        onPress: toggleSwitch,\n        children: _jsx(Stack, {\n          alignItems: \"center\",\n          children: _jsx(Heading, {\n            fontSize: \"3xl\",\n            color: Group.color,\n            children: Group.groupID\n          })\n        })\n      });\n    }\n  };\n\n  var toggleSwitch = function toggleSwitch() {\n    return settext(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  return _jsxs(Flex, {\n    children: [_jsx(Box, {\n      pt: \"5\",\n      children: _jsx(RenderText, {})\n    }), _jsx(Box, {\n      pl: \"75%\",\n      children: _jsx(IconButton, {\n        onPress: function onPress() {\n          return navigation.push(\"GroupSetting\");\n        },\n        icon: _jsx(Ionicons, {\n          name: \"settings-outline\",\n          size: 30\n        })\n      })\n    }), _jsx(FlatList, {\n      data: DATA,\n      renderItem: renderitem,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      refreshControl: _jsx(RefreshControl, {})\n    }), _jsx(Stack, {\n      pb: \"5\",\n      alignItems: \"center\",\n      mb: \"2.5\",\n      mt: \"1.5\",\n      children: _jsx(Button, {\n        variant: \"link\",\n        onPress: function onPress() {\n          return navigation.push(\"AddTask\");\n        },\n        height: \"50\",\n        width: \"150\",\n        leftIcon: _jsx(Icon, {\n          as: Ionicons,\n          name: \"create-outline\",\n          size: \"sm\"\n        }),\n        children: \"Add more feature\"\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/Users/havardskjaerstein/Desktop/Achive/screens/GroupTab/GroupScreens/GroupScreen.js"],"names":["React","useState","useContext","styled","FirebaseContext","UserContext","GroupContext","Ionicons","Flex","Box","Text","Pressable","Heading","IconButton","Icon","HStack","Avatar","VStack","Spacer","Center","Image","Divider","Stack","Button","GroupScreen","navigation","firebase","user","setUser","Group","setGroup","text","settext","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","ChangeGroup","item","push","error","alert","DATA","id","title","color","renderitem","RenderText","toggleSwitch","groupname","groupID","previousState"],"mappings":"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","sourcesContent":["import {FlatList} from 'react-native';\nimport React, {useState, useContext} from \"react\";\nimport styled from \"styled-components/native\"; \nimport {FirebaseContext} from \"../../../context/FirebaseContext\";\nimport {UserContext} from \"../../../context/UserContext\";\nimport {GroupContext} from \"../../../context/GroupContext\";\nimport {Ionicons} from \"@expo/vector-icons\"; \nimport {Flex,Box, Text, Pressable, Heading, IconButton, Icon, HStack, Avatar, VStack, Spacer, Center, Image,Divider,Stack, Button} from \"native-base\";\n\nimport {\n  RefreshControl\n} from 'react-native';\n\nexport default GroupScreen = ({navigation}) => {\n\nconst firebase = useContext(FirebaseContext); \nconst [user, setUser] = useContext(UserContext); \nconst [Group, setGroup] = useContext(GroupContext); \nconst [text, settext] = useState(true)\n\nconst makeid = length => {\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * \n    charactersLength));\n }\n  return result;\n}\n\nconst ChangeGroup = ( item ) => {\n  \n  try{\n\n    navigation.push(\"GroupFeeds\"); \n  }catch(error){\n    alert(\"Unable to set up groupContext\")\n  }\n}\n\nconst DATA = [\n  {\n    id: makeid(6),\n    title: \"Posts\",\n    color: Group.color, \n  },\n];\n\nconst renderitem = ({\n  item\n}) => \n    <Box maxW=\"100%\">\n    <VStack >\n      <Divider />\n        <Pressable onPress={() => ChangeGroup(item)} >\n          <Box>\n          <HStack space={2} w=\"100%\" h=\"70\" justifyContent=\"center\" alignItems=\"center\" bg=\"primary.50\">\n              <Text color=\"coolGray.800\" bold fontSize=\"xl\" >\n                {item.title}\n              </Text>\n              <Ionicons \n                  name={\"chevron-forward-outline\"} \n                  size={30} />\n            </HStack>\n          </Box>\n        </Pressable>\n      <Divider />\n    </VStack>\n  </Box>;\n\nconst RenderText = () => {\n  if(text === true){\n    return (\n    <Pressable onPress={toggleSwitch}>\n      <Stack alignItems=\"center\">\n        <Heading fontSize=\"3xl\" color={Group.color}>\n          {Group.groupname}\n        </Heading>\n      </Stack>\n    </Pressable>\n    )\n  }else{\n    return(\n      <Pressable onPress={toggleSwitch}>\n        <Stack alignItems=\"center\">\n          <Heading fontSize=\"3xl\" color={Group.color}>\n            {Group.groupID}\n          </Heading>\n        </Stack>\n      </Pressable>\n    )\n  }\n}\n\nconst toggleSwitch = () => settext(previousState => !previousState);\n\nreturn(\n  <Flex >\n    <Box pt=\"5\">\n      <RenderText/>\n    </Box>\n\n    <Box pl=\"75%\">\n      <IconButton onPress={() => navigation.push(\"GroupSetting\")} icon={<Ionicons \n          name={\"settings-outline\"} \n          size={30} />}\n      />\n    </Box>\n    \n    <FlatList \n      data={DATA}\n      renderItem={renderitem}\n      keyExtractor={item => item.id}\n      refreshControl={<RefreshControl />}\n    /> \n\n    <Stack pb=\"5\" alignItems=\"center\" mb=\"2.5\" mt=\"1.5\">\n      <Button  variant=\"link\" onPress={() => navigation.push(\"AddTask\")} height=\"50\" width=\"150\" leftIcon={<Icon as={Ionicons} name=\"create-outline\" size=\"sm\"  />}>\n        Add more feature\n      </Button>\n    </Stack>\n   </Flex>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}