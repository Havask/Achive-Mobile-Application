{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nexport var UrlPreviewBubble = function UrlPreviewBubble(props) {\n  var url = props.url,\n      title = props.title,\n      description = props.description,\n      image = props.image;\n  var onPressLink = useCallback(function _callee() {\n    var canOpen;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n          case 2:\n            canOpen = _context.sent;\n\n            if (canOpen) {\n              Linking.openURL(url);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [url]);\n  return React.createElement(TouchableOpacity, {\n    onPress: onPressLink\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: styles.previewImage\n  }), React.createElement(View, {\n    style: styles.subContainer\n  }, React.createElement(Text, {\n    style: styles.title\n  }, title), React.createElement(Text, {\n    style: styles.description\n  }, description.slice(0, 50), \"...\"), React.createElement(Text, {\n    style: styles.url\n  }, url))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    backgroundColor: '#f5f5f5',\n    borderRadius: 10,\n    padding: 10,\n    maxHeight: 100,\n    overflow: 'hidden'\n  },\n  subContainer: {\n    marginLeft: 10\n  },\n  previewImage: {\n    width: 30,\n    height: 30,\n    borderRadius: 10\n  },\n  title: {\n    fontSize: 13,\n    fontWeight: 'bold'\n  },\n  description: {\n    fontSize: 12,\n    color: '#888'\n  },\n  url: {\n    marginTop: 40,\n    color: '#3C91E6'\n  }\n});","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;;;;;;;AAWA,OAAO,IAAMC,gBAAgB,GAAIC,SAApBD,gBAAoBC,MAAD,EAA8B;EAC5D,IAAQC,GAAR,GAA2CD,KAA3C,CAAQC,GAAR;EAAA,IAAaC,KAAb,GAA2CF,KAA3C,CAAaE,KAAb;EAAA,IAAoBC,WAApB,GAA2CH,KAA3C,CAAoBG,WAApB;EAAA,IAAiCC,KAAjC,GAA2CJ,KAA3C,CAAiCI,KAAjC;EAEA,IAAMC,WAAW,GAAGP,WAAW,CAAC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACRQ,OAAO,CAACC,UAARD,CAAmBL,GAAnBK,CADQ;;UAAA;YACxBE,OADwB;;YAG9B,IAAIA,OAAJ,EAAa;cACXF,OAAO,CAACG,OAARH,CAAgBL,GAAhBK;YACD;;UAL6B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EAM5B,CAACL,GAAD,CAN4B,CAA/B;EAQA,OACEJ,oBAACa,gBAAD;IAAkBC,OAAO,EAAEN;EAA3B,GACER,oBAACe,IAAD;IAAMC,KAAK,EAAEC,MAAM,CAACC;EAApB,GACElB,oBAACmB,KAAD;IAAOC,MAAM,EAAE;MAAEC,GAAG,EAAEd;IAAP,CAAf;IAA+BS,KAAK,EAAEC,MAAM,CAACK;EAA7C,EADF,EAGEtB,oBAACe,IAAD;IAAMC,KAAK,EAAEC,MAAM,CAACM;EAApB,GACEvB,oBAACwB,IAAD;IAAMR,KAAK,EAAEC,MAAM,CAACZ;EAApB,GAA4BA,KAA5B,CADF,EAEEL,oBAACwB,IAAD;IAAMR,KAAK,EAAEC,MAAM,CAACX;EAApB,GAAkCA,WAAW,CAACmB,KAAZnB,CAAkB,CAAlBA,EAAqB,EAArBA,CAAlC,QAFF,EAGEN,oBAACwB,IAAD;IAAMR,KAAK,EAAEC,MAAM,CAACb;EAApB,GAA0BA,GAA1B,CAHF,CAHF,CADF,CADF;AAXK;AA0BP,IAAMa,MAAM,GAAGS,UAAU,CAACC,MAAXD,CAAkB;EAC/BR,SAAS,EAAE;IACTU,aAAa,EAAE,KADN;IAETC,eAAe,EAAE,SAFR;IAGTC,YAAY,EAAE,EAHL;IAITC,OAAO,EAAE,EAJA;IAKTC,SAAS,EAAE,GALF;IAMTC,QAAQ,EAAE;EAND,CADoB;EAS/BV,YAAY,EAAE;IACZW,UAAU,EAAE;EADA,CATiB;EAY/BZ,YAAY,EAAE;IACZa,KAAK,EAAE,EADK;IAEZC,MAAM,EAAE,EAFI;IAGZN,YAAY,EAAE;EAHF,CAZiB;EAiB/BzB,KAAK,EAAE;IACLgC,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE;EAFP,CAjBwB;EAqB/BhC,WAAW,EAAE;IACX+B,QAAQ,EAAE,EADC;IAEXE,KAAK,EAAE;EAFI,CArBkB;EAyB/BnC,GAAG,EAAE;IACHoC,SAAS,EAAE,EADR;IAEHD,KAAK,EAAE;EAFJ;AAzB0B,CAAlBb,CAAf","names":["React","useCallback","UrlPreviewBubble","props","url","title","description","image","onPressLink","Linking","canOpenURL","canOpen","openURL","TouchableOpacity","onPress","View","style","styles","container","Image","source","uri","previewImage","subContainer","Text","slice","StyleSheet","create","flexDirection","backgroundColor","borderRadius","padding","maxHeight","overflow","marginLeft","width","height","fontSize","fontWeight","color","marginTop"],"sources":["UrlPreviewBubble.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  Image,\n  Linking,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport type { IUrlPreviewBubble } from 'src/types/Chatty.types';\n\nexport const UrlPreviewBubble = (props: IUrlPreviewBubble) => {\n  const { url, title, description, image } = props;\n\n  const onPressLink = useCallback(async () => {\n    const canOpen = await Linking.canOpenURL(url);\n\n    if (canOpen) {\n      Linking.openURL(url);\n    }\n  }, [url]);\n\n  return (\n    <TouchableOpacity onPress={onPressLink}>\n      <View style={styles.container}>\n        <Image source={{ uri: image }} style={styles.previewImage} />\n\n        <View style={styles.subContainer}>\n          <Text style={styles.title}>{title}</Text>\n          <Text style={styles.description}>{description.slice(0, 50)}...</Text>\n          <Text style={styles.url}>{url}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    backgroundColor: '#f5f5f5',\n    borderRadius: 10,\n    padding: 10,\n    maxHeight: 100,\n    overflow: 'hidden',\n  },\n  subContainer: {\n    marginLeft: 10,\n  },\n  previewImage: {\n    width: 30,\n    height: 30,\n    borderRadius: 10,\n  },\n  title: {\n    fontSize: 13,\n    fontWeight: 'bold',\n  },\n  description: {\n    fontSize: 12,\n    color: '#888',\n  },\n  url: {\n    marginTop: 40,\n    color: '#3C91E6',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}