{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect } from \"react\";\nimport { UserContext } from \"../context/UserContext\";\nimport { FirebaseContext } from \"../context/FirebaseContext\";\nimport { useContext } from \"react\";\nimport styled from \"styled-components/native\";\nimport LottieView from \"lottie-react-native\";\nimport Text from \"../components/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default LoadingScreen = function LoadingScreen() {\n  var firebase = useContext(FirebaseContext);\n\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      _ = _useContext2[0],\n      setUser = _useContext2[1];\n\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var user, userInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user = firebase.getCurrentUser();\n\n              if (!user) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(firebase.getCurrentUser(user.uid));\n\n            case 4:\n              userInfo = _context.sent;\n              setUser({\n                isLoggedIn: true,\n                email: userInfo.email,\n                uid: user.uid,\n                username: userInfo.username,\n                profilePhotoUrl: userInfo.profilePhotoUrl\n              });\n              _context.next = 9;\n              break;\n\n            case 8:\n              setUser(function (state) {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                  isLoggedIn: false\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 500);\n  }, []);\n  return _jsxs(Container, {\n    children: [_jsx(Text, {\n      title: true,\n      color: \"#88d498\",\n      children: \"Achive\"\n    }), _jsx(LottieView, {\n      source: require(\"../assets/loading.json\"),\n      autoPlay: true,\n      loop: true,\n      style: {\n        width: \"90%\"\n      }\n    })]\n  });\n};\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    flex: 1; \\n    align-items: center; \\n    justify-content: center; \\n\\n\"])));","map":{"version":3,"sources":["/home/havard/Desktop/Achive/screens/LoadingScreen.js"],"names":["React","useEffect","UserContext","FirebaseContext","useContext","styled","LottieView","Text","LoadingScreen","firebase","_","setUser","setTimeout","user","getCurrentUser","uid","userInfo","isLoggedIn","email","username","profilePhotoUrl","state","require","width","Container","View"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR;AACA,SAAQC,eAAR;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,IAAP;;;AAEA,eAAeC,aAAa,GAAG,yBAAM;AAEjC,MAAMC,QAAQ,GAAGL,UAAU,CAACD,eAAD,CAA3B;;AACA,oBAAqBC,UAAU,CAACF,WAAD,CAA/B;AAAA;AAAA,MAAOQ,CAAP;AAAA,MAAUC,OAAV;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,cAAAA,IAFC,GAEMJ,QAAQ,CAACK,cAAT,EAFN;;AAAA,mBAGJD,IAHI;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIoBJ,QAAQ,CAACK,cAAT,CAAwBD,IAAI,CAACE,GAA7B,CAJpB;;AAAA;AAIGC,cAAAA,QAJH;AAMHL,cAAAA,OAAO,CAAC;AACJM,gBAAAA,UAAU,EAAE,IADR;AAEJC,gBAAAA,KAAK,EAAEF,QAAQ,CAACE,KAFZ;AAGJH,gBAAAA,GAAG,EAAEF,IAAI,CAACE,GAHN;AAIJI,gBAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAJf;AAKJC,gBAAAA,eAAe,EAAEJ,QAAQ,CAACI;AALtB,eAAD,CAAP;AANG;AAAA;;AAAA;AAcHT,cAAAA,OAAO,CAAC,UAACU,KAAD;AAAA,uDAAiBA,KAAjB;AAAwBJ,kBAAAA,UAAU,EAAE;AAApC;AAAA,eAAD,CAAP;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAgBP,GAhBO,CAAV;AAiBH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,SACI,MAAC,SAAD;AAAA,eACI,KAAC,IAAD;AAAM,MAAA,KAAK,MAAX;AAAY,MAAA,KAAK,EAAC,SAAlB;AAAA;AAAA,MADJ,EAKI,KAAC,UAAD;AACI,MAAA,MAAM,EAAEK,OAAO,0BADnB;AAEI,MAAA,QAAQ,MAFZ;AAGI,MAAA,IAAI,MAHR;AAII,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR;AAJX,MALJ;AAAA,IADJ;AAeH,CAxCD;AA0CA,IAAMC,SAAS,GAAGnB,MAAM,CAACoB,IAAV,uJAAf","sourcesContent":["import React, {useEffect} from \"react\";\nimport {UserContext} from \"../context/UserContext\"\nimport {FirebaseContext} from \"../context/FirebaseContext\"\nimport { useContext } from \"react\";\nimport styled from \"styled-components/native\"\nimport LottieView from \"lottie-react-native\";\nimport Text from \"../components/Text\";\n\nexport default LoadingScreen = () => {\n\n    const firebase = useContext(FirebaseContext); \n    const [_, setUser] = useContext(UserContext); \n\n    useEffect(() => {\n        setTimeout(async () => {\n\n            const user = firebase.getCurrentUser()\n            if(user){\n                const userInfo = await firebase.getCurrentUser(user.uid)\n\n                setUser({\n                    isLoggedIn: true, \n                    email: userInfo.email, \n                    uid: user.uid, \n                    username: userInfo.username,\n                    profilePhotoUrl: userInfo.profilePhotoUrl\n                })\n            } else {\n                setUser((state) => ({ ...state, isLoggedIn: false})); \n            }\n        }, 500)\n    }, [])\n\n    return (\n        <Container>\n            <Text title color=\"#88d498\">\n                Achive\n            </Text>\n\n            <LottieView \n                source={require(\"../assets/loading.json\")}\n                autoPlay\n                loop\n                style={{width: \"90%\"}}\n                >\n            </LottieView>\n        </Container>\n    );\n}\n\nconst Container = styled.View`\n    flex: 1; \n    align-items: center; \n    justify-content: center; \n\n`"]},"metadata":{},"sourceType":"module"}