{"ast":null,"code":"import React, { useCallback, useContext, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from \"./ChatBubble\";\nimport { PropsContext } from \"./Chatty\";\n\nfunction _SwipeableBubble(props) {\n  var _propsContext$bubbleP3;\n\n  var onReply = props.onReply,\n      message = props.message,\n      children = props.children;\n  var propsContext = useContext(PropsContext);\n  var swipeableRef = useRef(null);\n\n  var _onReply = useCallback(function () {\n    var _swipeableRef$current;\n\n    if (!message) return;\n    onReply(message);\n    (_swipeableRef$current = swipeableRef.current) === null || _swipeableRef$current === void 0 ? void 0 : _swipeableRef$current.close();\n  }, [message, onReply, swipeableRef]);\n\n  var renderLeftActions = useCallback(function () {\n    var _propsContext$bubbleP, _propsContext$bubbleP2;\n\n    return (_propsContext$bubbleP = (_propsContext$bubbleP2 = propsContext.bubbleProps) === null || _propsContext$bubbleP2 === void 0 ? void 0 : _propsContext$bubbleP2.replyDragElement) !== null && _propsContext$bubbleP !== void 0 ? _propsContext$bubbleP : React.createElement(Text, null, \" \");\n  }, [(_propsContext$bubbleP3 = propsContext.bubbleProps) === null || _propsContext$bubbleP3 === void 0 ? void 0 : _propsContext$bubbleP3.replyDragElement]);\n  if (!onReply) return children !== null && children !== void 0 ? children : React.createElement(ChatBubble, props);\n  return React.createElement(Swipeable, {\n    renderLeftActions: renderLeftActions,\n    friction: 2,\n    overshootFriction: 2,\n    onEnded: function onEnded() {\n      return _onReply();\n    },\n    enableTrackpadTwoFingerGesture: true,\n    ref: swipeableRef\n  }, children !== null && children !== void 0 ? children : React.createElement(ChatBubble, props));\n}\n\nexport var SwipeableBubble = React.memo(_SwipeableBubble);","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,MAAzC,QAAuD,OAAvD;;AAEA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,UAAT;AACA,SAASC,YAAT;;AAGA,SAASC,gBAAT,CAA0BC,KAA1B,EAAmD;EAAA;;EACjD,IAAQC,OAAR,GAAuCD,KAAvC,CAAQC,OAAR;EAAA,IAAiBC,OAAjB,GAAuCF,KAAvC,CAAiBE,OAAjB;EAAA,IAA0BC,QAA1B,GAAuCH,KAAvC,CAA0BG,QAA1B;EACA,IAAMC,YAAY,GAAGV,UAAU,CAACI,YAAD,CAA/B;EACA,IAAMO,YAAY,GAAGV,MAAM,CAAC,IAAD,CAA3B;;EAEA,IAAMW,QAAQ,GAAGb,WAAW,CAAC,YAAM;IAAA;;IACjC,IAAI,CAACS,OAAL,EAAc;IAEdD,OAAO,CAAEC,OAAF,CAAPD;IAEA,qCAAY,CAACM,OAAb,gFAAsBC,KAAtB;EAL0B,GAMzB,CAACN,OAAD,EAAUD,OAAV,EAAmBI,YAAnB,CANyB,CAA5B;;EAQA,IAAMI,iBAAiB,GAAGhB,WAAW,CAAC,YAAM;IAAA;;IAC1C,0DAAOW,YAAY,CAACM,WAApB,2DAAOC,uBAA0BC,gBAAjC,yEAAqDpB,oBAACqB,IAAD,YAArD;EADmC,GAElC,2BAACT,YAAY,CAACM,WAAd,2DAACI,uBAA0BF,gBAA3B,CAFkC,CAArC;EAIA,IAAI,CAACX,OAAL,EAAc,OAAOE,QAAP,SAAOA,YAAP,WAAOA,cAAYX,oBAACK,UAAD,EAAgBG,KAAhB,CAAnB;EAEd,OACER,oBAACI,SAAD;IACEa,iBAAiB,EAAEA,iBADrB;IAEEM,QAAQ,EAAE,CAFZ;IAGEC,iBAAiB,EAAE,CAHrB;IAIEC,OAAO,EAAE;MAAA,OAAMX,QAAQ,EAAd;IAAA,CAJX;IAKEY,8BAA8B,MALhC;IAMEC,GAAG,EAAEd;EANP,GAQGF,QARH,SAQGA,YARH,WAQGA,cAAYX,oBAACK,UAAD,EAAgBG,KAAhB,CARf,CADF;AAYD;;AAED,OAAO,IAAMoB,eAAe,GAAG5B,KAAK,CAAC6B,IAAN7B,CAAWO,gBAAXP,CAAxB","names":["React","useCallback","useContext","useRef","Swipeable","ChatBubble","PropsContext","_SwipeableBubble","props","onReply","message","children","propsContext","swipeableRef","_onReply","current","close","renderLeftActions","bubbleProps","_propsContext$bubbleP2","replyDragElement","Text","_propsContext$bubbleP3","friction","overshootFriction","onEnded","enableTrackpadTwoFingerGesture","ref","SwipeableBubble","memo"],"sources":["SwipeableBubble.tsx"],"sourcesContent":["import React, { useCallback, useContext, useRef } from 'react';\nimport { Text } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from './ChatBubble';\nimport { PropsContext } from './Chatty';\nimport type { ISwipeableBubble } from './types/Chatty.types';\n\nfunction _SwipeableBubble(props: ISwipeableBubble) {\n  const { onReply, message, children } = props;\n  const propsContext = useContext(PropsContext);\n  const swipeableRef = useRef(null);\n\n  const _onReply = useCallback(() => {\n    if (!message) return;\n\n    onReply!(message);\n    //@ts-ignore\n    swipeableRef.current?.close();\n  }, [message, onReply, swipeableRef]);\n\n  const renderLeftActions = useCallback(() => {\n    return propsContext.bubbleProps?.replyDragElement ?? <Text> </Text>;\n  }, [propsContext.bubbleProps?.replyDragElement]);\n\n  if (!onReply) return children ?? <ChatBubble {...props} />;\n\n  return (\n    <Swipeable\n      renderLeftActions={renderLeftActions}\n      friction={2}\n      overshootFriction={2}\n      onEnded={() => _onReply()}\n      enableTrackpadTwoFingerGesture\n      ref={swipeableRef}\n    >\n      {children ?? <ChatBubble {...props} />}\n    </Swipeable>\n  );\n}\n\nexport const SwipeableBubble = React.memo(_SwipeableBubble);\n"]},"metadata":{},"sourceType":"module"}