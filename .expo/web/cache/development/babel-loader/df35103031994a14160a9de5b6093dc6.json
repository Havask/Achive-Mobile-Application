{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { MaterialCommunityIcons as Icon } from '@expo/vector-icons';\nimport { getContrastYIQ } from \"./HelperFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StatusColorPicker = function (_Component) {\n  _inherits(StatusColorPicker, _Component);\n\n  var _super = _createSuper(StatusColorPicker);\n\n  function StatusColorPicker() {\n    var _this;\n\n    _classCallCheck(this, StatusColorPicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selectedColor: _this.props.selectedColor,\n      text: _this.props.text\n    };\n\n    _this.changeColor = function _callee() {\n      var colors, index;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              colors = _this.props.colors;\n              index = colors.findIndex(function (e) {\n                return e === _this.state.selectedColor;\n              }) + 1;\n              index = index < 0 || index >= colors.length ? 0 : index;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.setState({\n                selectedColor: colors[index]\n              }));\n\n            case 5:\n              _this.props.onChange(_this.state);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(StatusColorPicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var fontColor = getContrastYIQ(this.state.selectedColor);\n      return _jsxs(View, {\n        style: [styles.container, {\n          backgroundColor: this.state.selectedColor\n        }],\n        children: [_jsx(TextInput, {\n          placeholder: \"Type a Status\",\n          placeholderTextColor: fontColor,\n          multiline: true,\n          defaultValue: this.state.text,\n          onChangeText: function _callee2(text) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(_this2.setState({\n                      text: text\n                    }));\n\n                  case 2:\n                    _this2.props.onChange(_this2.state);\n\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          },\n          underlineColorAndroid: \"#0000\",\n          style: [styles.textInput, {\n            color: fontColor\n          }]\n        }), _jsx(View, {\n          style: {\n            justifyContent: 'center'\n          },\n          children: _jsx(Icon, {\n            name: \"palette\",\n            onPress: this.changeColor,\n            style: {\n              fontSize: 25,\n              color: fontColor,\n              alignSelf: 'center',\n              padding: 20\n            }\n          })\n        })]\n      });\n    }\n  }]);\n\n  return StatusColorPicker;\n}(Component);\n\nexport { StatusColorPicker as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 25\n  },\n  textInput: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    minWidth: 125\n  }\n});","map":{"version":3,"sources":["/Users/havardskjaerstein/Desktop/Achive/node_modules/react-native-status-color-picker/lib/FullScreenColorStatus.js"],"names":["React","Component","MaterialCommunityIcons","Icon","getContrastYIQ","StatusColorPicker","state","selectedColor","props","text","changeColor","colors","index","findIndex","e","length","setState","onChange","fontColor","styles","container","backgroundColor","textInput","color","justifyContent","fontSize","alignSelf","padding","StyleSheet","create","flex","alignItems","fontWeight","minWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TextInput, View, StyleSheet } from 'react-native';\r\nimport { MaterialCommunityIcons as Icon } from '@expo/vector-icons';\r\nimport { getContrastYIQ } from './HelperFunctions';\r\n\r\nexport default class StatusColorPicker extends Component {\r\n  state = {\r\n    selectedColor: this.props.selectedColor,\r\n    text: this.props.text,\r\n  };\r\n\r\n  changeColor = async () => {\r\n    const colors = this.props.colors;\r\n    let index = colors.findIndex(e => e === this.state.selectedColor) + 1;\r\n    index = index < 0 || index >= colors.length ? 0 : index;\r\n    await this.setState({ selectedColor: colors[index] });\r\n    this.props.onChange(this.state);\r\n  };\r\n\r\n  render() {\r\n    const fontColor = getContrastYIQ(this.state.selectedColor);\r\n    return (\r\n      <View\r\n        style={[\r\n          styles.container,\r\n          { backgroundColor: this.state.selectedColor },\r\n        ]}>\r\n        <TextInput\r\n          placeholder=\"Type a Status\"\r\n          placeholderTextColor={fontColor}\r\n          multiline={true}\r\n          defaultValue={this.state.text}\r\n          onChangeText={async (text) => {\r\n            await this.setState({ text });\r\n            this.props.onChange(this.state);\r\n          }}\r\n          underlineColorAndroid=\"#0000\"\r\n          style={[styles.textInput, { color: fontColor }]}\r\n        />\r\n        <View style={{ justifyContent: 'center' }}>\r\n          <Icon\r\n            name=\"palette\"\r\n            onPress={this.changeColor}\r\n            style={{\r\n              fontSize: 25,\r\n              color: fontColor,\r\n              alignSelf: 'center',\r\n              padding: 20,\r\n            }}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 25,\r\n  },\r\n  textInput: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    minWidth: 125,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}