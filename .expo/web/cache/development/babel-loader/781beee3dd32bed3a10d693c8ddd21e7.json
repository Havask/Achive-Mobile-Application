{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { UserContext } from \"../context/UserContext\";\nimport { FirebaseContext } from \"../context/FirebaseContext\";\nimport AuthStackScreens from \"./AuthStackScreens\";\nimport MainStackScreens from \"./MainStackScreens\";\nimport LoadingScreen from \"../screens/LoadingScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default AppStackScreen = function AppStackScreen() {\n  var AppStack = createStackNavigator();\n\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      User = _useContext2[0],\n      setUser = _useContext2[1];\n\n  return _jsx(AppStack.Navigator, {\n    header: \"none\",\n    children: User.isLoggedIn === true ? _jsx(AppStack.Screen, {\n      name: \"Main\",\n      component: MainStackScreens,\n      options: {\n        headerShown: false\n      }\n    }) : User.isLoggedIn === false ? _jsx(AppStack.Screen, {\n      name: \"Auth\",\n      component: AuthStackScreens,\n      options: {\n        headerShown: false\n      }\n    }) : _jsx(AppStack.Screen, {\n      name: \"Loading\",\n      component: LoadingScreen,\n      options: {\n        headerShown: false\n      }\n    })\n  });\n};","map":{"version":3,"sources":["/Users/havardskjaerstein/Desktop/Achive/stacks/AppStackScreens.js"],"names":["React","useState","useContext","useEffect","createStackNavigator","UserContext","FirebaseContext","AuthStackScreens","MainStackScreens","LoadingScreen","AppStackScreen","AppStack","User","setUser","isLoggedIn","headerShown"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAAQC,WAAR;AACA,SAAQC,eAAR;AACA,OAAOC,gBAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,aAAP;;AAIA,eAAeC,cAAc,GAAG,0BAAM;AAElC,MAAMC,QAAQ,GAAGP,oBAAoB,EAArC;;AACA,oBAAwBF,UAAU,CAACG,WAAD,CAAlC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AAEA,SAEQ,KAAC,QAAD,CAAU,SAAV;AAAoB,IAAA,MAAM,EAAC,MAA3B;AAAA,cACKD,IAAI,CAACE,UAAL,KAAoB,IAApB,GACG,KAAC,QAAD,CAAU,MAAV;AACI,MAAA,IAAI,EAAE,MADV;AAEI,MAAA,SAAS,EAAEN,gBAFf;AAGI,MAAA,OAAO,EAAE;AAACO,QAAAA,WAAW,EAAE;AAAd;AAHb,MADH,GAMGH,IAAI,CAACE,UAAL,KAAoB,KAApB,GACA,KAAC,QAAD,CAAU,MAAV;AACI,MAAA,IAAI,EAAG,MADX;AAEI,MAAA,SAAS,EAAEP,gBAFf;AAGI,MAAA,OAAO,EAAE;AAACQ,QAAAA,WAAW,EAAE;AAAd;AAHb,MADA,GAOA,KAAC,QAAD,CAAU,MAAV;AACI,MAAA,IAAI,EAAE,SADV;AAEI,MAAA,SAAS,EAAEN,aAFf;AAGI,MAAA,OAAO,EAAE;AAACM,QAAAA,WAAW,EAAE;AAAd;AAHb;AAdR,IAFR;AAwBH,CA7BD","sourcesContent":["import React, {useState, useContext, useEffect} from \"react\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport {UserContext} from \"../context/UserContext\"; \nimport {FirebaseContext} from \"../context/FirebaseContext\";\nimport AuthStackScreens from \"./AuthStackScreens\"\nimport MainStackScreens from \"./MainStackScreens\";\nimport LoadingScreen from \"../screens/LoadingScreen\"; \n\n\n\nexport default AppStackScreen = () => {\n\n    const AppStack = createStackNavigator()\n    const [User, setUser] = useContext(UserContext); \n\n    return(\n\n            <AppStack.Navigator header=\"none\">\n                {User.isLoggedIn === true? (\n                    <AppStack.Screen \n                        name= \"Main\" \n                        component={MainStackScreens} \n                        options={{headerShown: false}}\n                    />\n                ) : User.isLoggedIn === false ? (\n                    <AppStack.Screen \n                        name = \"Auth\" \n                        component={AuthStackScreens} \n                        options={{headerShown: false}}\n                    />\n                ) : (\n                    <AppStack.Screen \n                        name= \"Loading\" \n                        component={LoadingScreen} \n                        options={{headerShown: false}}\n                    />\n                )}\n            </AppStack.Navigator>\n    ); \n}"]},"metadata":{},"sourceType":"module"}