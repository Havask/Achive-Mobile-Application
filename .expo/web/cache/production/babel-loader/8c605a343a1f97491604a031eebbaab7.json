{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React from'react';import AccessibilityInfo from\"react-native-web/dist/exports/AccessibilityInfo\";export function useScreenReaderEnabled(){var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),enabled=_React$useState2[0],setEnabled=_React$useState2[1];var mountedRef=React.useRef(false);var handleSetEnabled=function handleSetEnabled(value){if(mountedRef.current){setEnabled(value);}};React.useEffect(function(){mountedRef.current=true;function setInitialValue(){var res;return _regeneratorRuntime.async(function setInitialValue$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(AccessibilityInfo.isScreenReaderEnabled());case 2:res=_context.sent;handleSetEnabled(res);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);}var handler=AccessibilityInfo.addEventListener('screenReaderChanged',function(event){handleSetEnabled(event);});setInitialValue();return function(){mountedRef.current=false;AccessibilityInfo.removeEventListener('screenReaderChanged',handler);};});return enabled;}","map":{"version":3,"mappings":"6HAAA,MAAOA,MAAP,KAAkB,OAAlB,C,+EAGA,MAAO,SAASC,uBAAT,EAAkC,CACvC,oBAA8BD,KAAK,CAACE,QAANF,CAAe,KAAfA,CAA9B,oDAAOG,OAAP,qBAAgBC,UAAhB,qBACA,GAAMC,WAAU,CAAGL,KAAK,CAACM,MAANN,CAAa,KAAbA,CAAnB,CAEA,GAAMO,iBAAgB,CAAIC,QAApBD,iBAAoBC,MAAD,CAAoB,CAC3C,GAAIH,UAAU,CAACI,OAAf,CAAwB,CACtBL,UAAU,CAACI,KAAD,CAAVJ,CACD,CAHH,EAMAJ,KAAK,CAACU,SAANV,CAAgB,UAAM,CACpBK,UAAU,CAACI,OAAXJ,CAAqB,IAArBA,CACA,QAAeM,gBAAf,qLACoBC,iBAAiB,CAACC,qBAAlBD,EADpB,SACQE,GADR,eAEEP,gBAAgB,CAACO,GAAD,CAAhBP,CAFF,qEAKA,GAAIQ,QAAY,CAAGH,iBAAiB,CAACI,gBAAlBJ,CACjB,qBADiBA,CAEhBK,cAAD,CAAgB,CACdV,gBAAgB,CAACU,KAAD,CAAhBV,CAHe,EAAnB,CAOAI,eAAe,GACf,MAAO,WAAM,CACXN,UAAU,CAACI,OAAXJ,CAAqB,KAArBA,CACAO,iBAAiB,CAACM,mBAAlBN,CAAsC,qBAAtCA,CAA6DG,OAA7DH,EAFF,EAfF,GAqBA,MAAOT,QAAP,CACD","names":["React","useScreenReaderEnabled","useState","enabled","setEnabled","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","AccessibilityInfo","isScreenReaderEnabled","res","handler","addEventListener","event","removeEventListener"],"sources":["useScreenReaderEnabled.ts"],"sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}