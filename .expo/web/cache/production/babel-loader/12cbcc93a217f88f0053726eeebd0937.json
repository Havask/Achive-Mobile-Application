{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"color\",\"size\",\"style\"];import React,{memo,forwardRef}from'react';import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{usePropsResolution,useStyledSystemPropsResolver}from\"../../../hooks\";import{getColor}from\"../../../theme\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useTheme}from\"../../../hooks\";var Spinner=function Spinner(props,ref){var _usePropsResolution=usePropsResolution('Spinner',props),color=_usePropsResolution.color,size=_usePropsResolution.size,style=_usePropsResolution.style,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var resolvedColor=getColor(color,useTheme().colors,useTheme());var resolvedStyle=useStyledSystemPropsResolver(resolvedProps);if(useHasResponsiveProps(props)){return null;}return React.createElement(ActivityIndicator,{accessible:true,accessibilityLabel:\"loading\",color:resolvedColor,ref:ref,size:size,style:[resolvedStyle,style]});};export default memo(forwardRef(Spinner));","map":{"version":3,"mappings":"4HAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,C,+EAEA,OACEC,kBADF,CAEEC,4BAFF,sBAIA,OAASC,QAAT,sBAEA,OAASC,qBAAT,4CACA,OAASC,QAAT,sBAEA,GAAMC,QAAO,CAAG,QAAVA,QAAU,CAACC,KAAD,CAAuBC,GAAvB,CAAoC,CAClD,wBAAiDP,kBAAkB,CACjE,SADiE,CAEjEM,KAFiE,CAAnE,CAAQE,KAAR,qBAAQA,KAAR,CAAeC,IAAf,qBAAeA,IAAf,CAAqBC,KAArB,qBAAqBA,KAArB,CAA+BC,aAA/B,yDAIA,GAAMC,cAAa,CAAGV,QAAQ,CAACM,KAAD,CAAQJ,QAAQ,GAAGS,MAAnB,CAA2BT,QAAQ,EAAnC,CAA9B,CACA,GAAMU,cAAa,CAAGb,4BAA4B,CAACU,aAAD,CAAlD,CAEA,GAAIR,qBAAqB,CAACG,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACET,qBAACkB,iBAAD,EACEC,UAAU,KADZ,CAEEC,kBAAkB,CAAC,SAFrB,CAGET,KAAK,CAAEI,aAHT,CAIEL,GAAG,CAAEA,GAJP,CAKEE,IAAI,CAAEA,IALR,CAMEC,KAAK,CAAE,CAACI,aAAD,CAAgBJ,KAAhB,CANT,EADF,CAXF,EAuBA,cAAeZ,KAAI,CAACC,UAAU,CAACM,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","color","size","style","resolvedProps","resolvedColor","colors","resolvedStyle","ActivityIndicator","accessible","accessibilityLabel"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ActivityIndicator\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"module"}