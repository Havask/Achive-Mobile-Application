{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"value\"],_excluded2=[\"children\",\"onPress\",\"_icon\",\"_stack\",\"_text\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo,useContext}from'react';import{CheckIcon}from\"../../primitives/Icon/Icons\";import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import MenuItem from\"./MenuItem\";import{MenuOptionContext}from\"./MenuOptionGroup\";import{useMenuOptionItem}from\"./useMenu\";import{HStack}from\"../../primitives/Stack\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var MenuItemOption=function MenuItemOption(_ref,ref){var value=_ref.value,props=_objectWithoutProperties(_ref,_excluded);var _useContext=useContext(MenuOptionContext),values=_useContext.values,onChange=_useContext.onChange,type=_useContext.type;var isChecked=values.includes(value);var menuOptionProps=useMenuOptionItem({isChecked:isChecked,type:type});var _usePropsResolution=usePropsResolution('MenuItem',props,{isChecked:isChecked}),children=_usePropsResolution.children,onPress=_usePropsResolution.onPress,_icon=_usePropsResolution._icon,_stack=_usePropsResolution._stack,_text=_usePropsResolution._text,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var modifiedOnPress=function modifiedOnPress(e){onChange(value);onPress&&onPress(e);};if(useHasResponsiveProps(props)){return null;}return React.createElement(MenuItem,_extends({},resolvedProps,menuOptionProps,{accessibilityRole:\"button\",onPress:modifiedOnPress,ref:ref}),React.createElement(HStack,_stack,React.createElement(CheckIcon,_icon),React.createElement(Box,{_text:_text},children)));};export default memo(forwardRef(MenuItemOption));","map":{"version":3,"mappings":"+bAAA,MAAOA,MAAP,EAAgBC,UAAhB,CAA4BC,IAA5B,CAAkCC,UAAlC,KAAoD,OAApD,CACA,OAASC,SAAT,mCACA,MAAOC,IAAP,4BACA,OAASC,kBAAT,oCACA,MAAOC,SAAP,kBAEA,OAASC,iBAAT,yBACA,OAASC,iBAAT,iBACA,OAASC,MAAT,8BACA,OAASC,qBAAT,4CAEA,GAAMC,eAAc,CAAG,QAAjBA,eAAiB,MAErBC,GAFqB,CAGlB,IAFDC,MAEC,MAFDA,KAEC,CAFSC,KAET,0CACH,gBAA4DZ,UAAU,CACpEK,iBADoE,CAAtE,CAAQQ,MAAR,aAAQA,MAAR,CAAgBC,QAAhB,aAAgBA,QAAhB,CAA0BC,IAA1B,aAA0BA,IAA1B,CAGA,GAAMC,UAAS,CAAGH,MAAM,CAACI,QAAPJ,CAAgBF,KAAhBE,CAAlB,CACA,GAAMK,gBAAe,CAAGZ,iBAAiB,CAAC,CAAEU,SAAF,CAAEA,SAAF,CAAaD,SAAb,CAAD,CAAzC,CACA,wBAOIZ,kBAAkB,CAAC,UAAD,CAAaS,KAAb,CAAoB,CAAEI,mBAAF,CAApB,CAPtB,CACEG,QADF,qBACEA,QADF,CAEEC,OAFF,qBAEEA,OAFF,CAGEC,KAHF,qBAGEA,KAHF,CAIEC,MAJF,qBAIEA,MAJF,CAKEC,KALF,qBAKEA,KALF,CAMKC,aANL,0DASA,GAAMC,gBAAe,CAAIC,QAAnBD,gBAAmBC,EAAD,CAAY,CAClCZ,QAAQ,CAACH,KAAD,CAARG,CACAM,OAAO,EAAIA,OAAO,CAACM,CAAD,CAAlBN,CAFF,EAMA,GAAIZ,qBAAqB,CAACI,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACEf,qBAACO,QAAD,aACMoB,aADN,CAEMN,eAFN,EAGES,iBAAiB,CAAC,QAHpB,CAIEP,OAAO,CAAEK,eAJX,CAKEf,GAAG,CAAEA,GALP,GAOEb,oBAACU,MAAD,CAAYe,MAAZ,CACEzB,oBAACI,SAAD,CAAeoB,KAAf,CADF,CAEExB,oBAACK,GAAD,EAAKqB,KAAK,CAAEA,KAAZ,EAAoBJ,QAApB,CAFF,CAPF,CADF,CA3BF,EA2CA,cAAepB,KAAI,CAACD,UAAU,CAACW,cAAD,CAAX,CAAnB","names":["React","forwardRef","memo","useContext","CheckIcon","Box","usePropsResolution","MenuItem","MenuOptionContext","useMenuOptionItem","HStack","useHasResponsiveProps","MenuItemOption","ref","value","props","values","onChange","type","isChecked","includes","menuOptionProps","children","onPress","_icon","_stack","_text","resolvedProps","modifiedOnPress","e","accessibilityRole"],"sources":["MenuItemOption.tsx"],"sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack {..._stack}>\n        <CheckIcon {..._icon} />\n        <Box _text={_text}>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}