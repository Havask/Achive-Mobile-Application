{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import $cgWTI$react,{useContext as $cgWTI$useContext,useMemo as $cgWTI$useMemo,useState as $cgWTI$useState,useLayoutEffect as $cgWTI$useLayoutEffect}from\"react\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $9d939cbc98267846$exports={};$parcel$export($9d939cbc98267846$exports,\"SSRProvider\",function(){return $9d939cbc98267846$export$9f8ac96af4b1b2ae;});$parcel$export($9d939cbc98267846$exports,\"useSSRSafeId\",function(){return $9d939cbc98267846$export$619500959fc48b26;});$parcel$export($9d939cbc98267846$exports,\"useIsSSR\",function(){return $9d939cbc98267846$export$535bd6ca7f90a273;});var $9d939cbc98267846$var$defaultContext={prefix:String(Math.round(Math.random()*10000000000)),current:0};var $9d939cbc98267846$var$SSRContext=$cgWTI$react.createContext($9d939cbc98267846$var$defaultContext);function $9d939cbc98267846$export$9f8ac96af4b1b2ae(props){var cur=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);var value=$cgWTI$useMemo(function(){return{prefix:cur===$9d939cbc98267846$var$defaultContext?'':cur.prefix+\"-\"+ ++cur.current,current:0};},[cur]);return $cgWTI$react.createElement($9d939cbc98267846$var$SSRContext.Provider,{value:value},props.children);}var $9d939cbc98267846$var$canUseDOM=Boolean(typeof window!=='undefined'&&window.document&&window.document.createElement);function $9d939cbc98267846$export$619500959fc48b26(defaultId){var ctx=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);if(ctx===$9d939cbc98267846$var$defaultContext&&!$9d939cbc98267846$var$canUseDOM)console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');return $cgWTI$useMemo(function(){return defaultId||\"react-aria\"+ctx.prefix+\"-\"+ ++ctx.current;},[defaultId]);}function $9d939cbc98267846$export$535bd6ca7f90a273(){var cur=$cgWTI$useContext($9d939cbc98267846$var$SSRContext);var isInSSRContext=cur!==$9d939cbc98267846$var$defaultContext;var _$cgWTI$useState=$cgWTI$useState(isInSSRContext),_$cgWTI$useState2=_slicedToArray(_$cgWTI$useState,2),isSSR=_$cgWTI$useState2[0],setIsSSR=_$cgWTI$useState2[1];if(typeof window!=='undefined'&&isInSSRContext)$cgWTI$useLayoutEffect(function(){setIsSSR(false);},[]);return isSSR;}export{$9d939cbc98267846$export$9f8ac96af4b1b2ae as SSRProvider,$9d939cbc98267846$export$619500959fc48b26 as useSSRSafeId,$9d939cbc98267846$export$535bd6ca7f90a273 as useIsSSR};","map":{"version":3,"mappings":"gtBAiCA,GAAMA,qCAAc,CAAoB,CACtCC,MAAM,CAAEC,MAAM,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,WAA3B,CAAD,CADwB,CAEtCC,OAAO,CAAE,CAF6B,CAAxC,CAKA,GAAMC,iCAAU,CAAGC,YAAK,CAACC,aAAN,CAAqCT,oCAArC,CAAnB,SAWgBU,2CAAYC,MAAsC,CAChE,GAAIC,IAAG,CAAGC,iBAAU,CAACN,gCAAD,CAApB,CACA,GAAIO,MAAK,CAAoBC,cAAO,kBAAQ,CAG1Cd,MAAM,CAAEW,GAAG,GAAKZ,oCAAR,CAAyB,EAAzB,CAAiCY,GAAG,CAACX,MAArC,KAA6C,GAAIW,GAAG,CAACN,OAHnB,CAI1CA,OAAO,CAAE,CAJiC,CAAR,GAKhC,CAACM,GAAD,CALgC,CAApC,CAOA,MAAMJ,4BACHD,gCAAU,CAACS,QADR,CACgB,CAACF,KAAK,CAAEA,KAAR,CADhB,CAEDH,KAAK,CAACM,QAFL,CAAN,CAKD,CAED,GAAIC,gCAAS,CAAGC,OAAO,CACrB,MAAOC,OAAP,GAAkB,WAAlB,EACAA,MAAM,CAACC,QADP,EAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHK,CAAvB,SAOgBC,2CAAaC,UAA4B,CACvD,GAAIC,IAAG,CAAGZ,iBAAU,CAACN,gCAAD,CAApB,CAIA,GAAIkB,GAAG,GAAKzB,oCAAR,EAAsB,CAAKkB,+BAA/B,CACEQ,OAAO,CAACC,IAAR,CAAa,iJAAb,EAGF,MAAOZ,eAAO,kBAAOS,UAAS,eAAiBC,GAAG,CAACxB,MAArB,KAA6B,GAAIwB,GAAG,CAACnB,OAArD,GAAgE,CAACkB,SAAD,CAAhE,CAAd,CACD,SAOeI,4CAAoB,CAClC,GAAIhB,IAAG,CAAGC,iBAAU,CAACN,gCAAD,CAApB,CACA,GAAIsB,eAAc,CAAGjB,GAAG,GAAKZ,oCAA7B,CACA,qBAAwB8B,eAAQ,CAACD,cAAD,CAAhC,sDAAKE,KAAL,sBAAYC,QAAZ,sBAIA,GAAI,MAAOZ,OAAP,GAAkB,WAAlB,EAAiCS,cAArC,CAIEI,sBAAe,WAAO,CACpBD,QAAQ,CAAC,KAAD,CAAR,CACD,CAFc,CAEZ,EAFY,CAAf,CAKF,MAAOD,MAAP,CACD","names":["$9d939cbc98267846$var$defaultContext","prefix","String","Math","round","random","current","$9d939cbc98267846$var$SSRContext","$cgWTI$react","createContext","$9d939cbc98267846$export$9f8ac96af4b1b2ae","props","cur","$cgWTI$useContext","value","$cgWTI$useMemo","Provider","children","$9d939cbc98267846$var$canUseDOM","Boolean","window","document","createElement","$9d939cbc98267846$export$619500959fc48b26","defaultId","ctx","console","warn","$9d939cbc98267846$export$535bd6ca7f90a273","isInSSRContext","$cgWTI$useState","isSSR","setIsSSR","$cgWTI$useLayoutEffect"],"sources":["packages/@react-aria/ssr/src/SSRProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is\n// guarded by a check that it only runs on the client side.\n// eslint-disable-next-line rulesdir/useLayoutEffectRule\nimport React, {ReactNode, useContext, useLayoutEffect, useMemo, useState} from 'react';\n\n// To support SSR, the auto incrementing id counter is stored in a context. This allows\n// it to be reset on every request to ensure the client and server are consistent.\n// There is also a prefix string that is used to support async loading components\n// Each async boundary must be wrapped in an SSR provider, which appends to the prefix\n// and resets the current id counter. This ensures that async loaded components have\n// consistent ids regardless of the loading order.\ninterface SSRContextValue {\n  prefix: string,\n  current: number\n}\n\n// Default context value to use in case there is no SSRProvider. This is fine for\n// client-only apps. In order to support multiple copies of React Aria potentially\n// being on the page at once, the prefix is set to a random number. SSRProvider\n// will reset this to zero for consistency between server and client, so in the\n// SSR case multiple copies of React Aria is not supported.\nconst defaultContext: SSRContextValue = {\n  prefix: String(Math.round(Math.random() * 10000000000)),\n  current: 0\n};\n\nconst SSRContext = React.createContext<SSRContextValue>(defaultContext);\n\ninterface SSRProviderProps {\n  /** Your application here. */\n  children: ReactNode\n}\n\n/**\n * When using SSR with React Aria, applications must be wrapped in an SSRProvider.\n * This ensures that auto generated ids are consistent between the client and server.\n */\nexport function SSRProvider(props: SSRProviderProps): JSX.Element {\n  let cur = useContext(SSRContext);\n  let value: SSRContextValue = useMemo(() => ({\n    // If this is the first SSRProvider, start with an empty string prefix, otherwise\n    // append and increment the counter.\n    prefix: cur === defaultContext ? '' : `${cur.prefix}-${++cur.current}`,\n    current: 0\n  }), [cur]);\n\n  return (\n    <SSRContext.Provider value={value}>\n      {props.children}\n    </SSRContext.Provider>\n  );\n}\n\nlet canUseDOM = Boolean(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\n/** @private */\nexport function useSSRSafeId(defaultId?: string): string {\n  let ctx = useContext(SSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider,\n  // provide a warning to hint to the developer to add one.\n  if (ctx === defaultContext && !canUseDOM) {\n    console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');\n  }\n\n  return useMemo(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);\n}\n\n/**\n * Returns whether the component is currently being server side rendered or\n * hydrated on the client. Can be used to delay browser-specific rendering\n * until after hydration.\n */\nexport function useIsSSR(): boolean {\n  let cur = useContext(SSRContext);\n  let isInSSRContext = cur !== defaultContext;\n  let [isSSR, setIsSSR] = useState(isInSSRContext);\n\n  // If on the client, and the component was initially server rendered,\n  // then schedule a layout effect to update the component after hydration.\n  if (typeof window !== 'undefined' && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"]},"metadata":{},"sourceType":"module"}