{"ast":null,"code":"export function loadParsedText(){try{var ReactNativeParsedText=require('react-native-parsed-text').default;return ReactNativeParsedText;}catch(err){console.warn(\"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\");}}export var HASHTAG_PATTERN_SHAPE={pattern:/#(\\w+)/,style:{color:'cyan'}};export var MENTION_PATTERN_SHAPE={pattern:/\\B@\\w+/g,style:{color:'orange'}};export var URL_PATTERN_SHAPE={type:'url',style:{color:'blue'}};export var ALL_PATERNS_SHAPES=[HASHTAG_PATTERN_SHAPE,MENTION_PATTERN_SHAPE,URL_PATTERN_SHAPE];export function LoadAllPaternShapes(onPress){ALL_PATERNS_SHAPES.map(function(pattern){if(pattern!==null&&pattern!==void 0&&pattern.onPress)return;pattern.onPress=onPress;Object.freeze(pattern);});}","map":{"version":3,"mappings":"AAEA,MAAO,SAASA,eAAT,EAA0B,CAC/B,GAAI,CACF,GAAMC,sBAAqB,CAAGC,OAAO,CAAC,0BAAD,CAAPA,CAAoCC,OAAlE,CAEA,MAAOF,sBAAP,CAHF,CAIE,MAAOG,GAAP,CAAY,CACZC,OAAO,CAACC,IAARD,CACE,kGADFA,EAGD,CACF,CAED,MAAO,IAAME,sBAAoC,CAAG,CAClDC,OAAO,CAAE,QADyC,CAElDC,KAAK,CAAE,CACLC,KAAK,CAAE,MADF,CAF2C,CAA7C,CAMP,MAAO,IAAMC,sBAAoC,CAAG,CAClDH,OAAO,CAAE,SADyC,CAElDC,KAAK,CAAE,CACLC,KAAK,CAAE,QADF,CAF2C,CAA7C,CAMP,MAAO,IAAME,kBAAgC,CAAG,CAC9CC,IAAI,CAAE,KADwC,CAE9CJ,KAAK,CAAE,CACLC,KAAK,CAAE,MADF,CAFuC,CAAzC,CAOP,MAAO,IAAMI,mBAAkB,CAAG,CAChCP,qBADgC,CAEhCI,qBAFgC,CAGhCC,iBAHgC,CAA3B,CAUP,MAAO,SAASG,oBAAT,CACLC,OADK,CAEL,CACAF,kBAAkB,CAACG,GAAnBH,CAAwBN,gBAAD,CAAa,CAClC,GAAIA,OAAJ,OAAIA,SAAJ,SAAIA,SAAO,CAAEQ,OAAb,CAAsB,OAEtBR,OAAO,CAACQ,OAARR,CAAkBQ,OAAlBR,CACAU,MAAM,CAACC,MAAPD,CAAcV,OAAdU,EAJF,GAMD","names":["loadParsedText","ReactNativeParsedText","require","default","err","console","warn","HASHTAG_PATTERN_SHAPE","pattern","style","color","MENTION_PATTERN_SHAPE","URL_PATTERN_SHAPE","type","ALL_PATERNS_SHAPES","LoadAllPaternShapes","onPress","map","Object","freeze"],"sources":["patterns.ts"],"sourcesContent":["import type { IPatternShape } from 'src/types/Chatty.types';\n\nexport function loadParsedText() {\n  try {\n    const ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\n      \"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\"\n    );\n  }\n}\n\nexport const HASHTAG_PATTERN_SHAPE: IPatternShape = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan',\n  },\n};\nexport const MENTION_PATTERN_SHAPE: IPatternShape = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange',\n  },\n};\nexport const URL_PATTERN_SHAPE: IPatternShape = {\n  type: 'url',\n  style: {\n    color: 'blue',\n  },\n};\n\nexport const ALL_PATERNS_SHAPES = [\n  HASHTAG_PATTERN_SHAPE,\n  MENTION_PATTERN_SHAPE,\n  URL_PATTERN_SHAPE,\n];\n\n/**\n * Load all the patterns and set the onPress function\n * @param onPress - (pattern: string, index: number) => void\n */\nexport function LoadAllPaternShapes(\n  onPress: (pattern: string, index: number) => void\n) {\n  ALL_PATERNS_SHAPES.map((pattern) => {\n    if (pattern?.onPress) return;\n\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}