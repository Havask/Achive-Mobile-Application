{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"wrapperRef\",\"isDisabled\",\"isInvalid\",\"isReadOnly\"],_excluded2=[\"totalLines\",\"onFocus\",\"onBlur\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Input}from\"../Input\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";import{useHover}from'@react-native-aria/interactions';import{mergeRefs}from\"../../../utils\";var TextArea=function TextArea(_ref2,ref){var wrapperRef=_ref2.wrapperRef,isDisabled=_ref2.isDisabled,isInvalid=_ref2.isInvalid,isReadOnly=_ref2.isReadOnly,props=_objectWithoutProperties(_ref2,_excluded);var _ref=React.useRef(null);var _useHover=useHover({},_ref),isHovered=_useHover.isHovered;var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),isFocused=_React$useState2[0],setIsFocused=_React$useState2[1];var handleFocus=function handleFocus(focusState,callback){setIsFocused(focusState);callback();};var _usePropsResolution=usePropsResolution('TextArea',props,{isHovered:isHovered,isDisabled:isDisabled,isFocused:isFocused,isInvalid:isInvalid,isReadOnly:isReadOnly},{extendTheme:['Input']}),totalLines=_usePropsResolution.totalLines,_onFocus=_usePropsResolution.onFocus,_onBlur=_usePropsResolution.onBlur,newProps=_objectWithoutProperties(_usePropsResolution,_excluded2);if(useHasResponsiveProps(props)){return null;}return React.createElement(Input,_extends({},newProps,{INTERNAL_notResolveThemeAndPseudoProps:true,numberOfLines:totalLines,wrapperRef:wrapperRef,ref:mergeRefs([_ref,ref]),onFocus:function onFocus(e){handleFocus(true,_onFocus?function(){return _onFocus(e);}:function(){});},onBlur:function onBlur(e){handleFocus(false,_onBlur?function(){return _onBlur(e);}:function(){});},isDisabled:isDisabled,isInvalid:isInvalid,isReadOnly:isReadOnly}));};export default memo(forwardRef(TextArea));","map":{"version":3,"mappings":"6hBAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,KAAT,gBAEA,OAASC,kBAAT,oCACA,OAASC,qBAAT,4CACA,OAASC,QAAT,KAAyB,iCAAzB,CACA,OAASC,SAAT,sBAcA,GAAMC,SAAQ,CAAG,QAAXA,SAAW,OAEfC,GAFe,CAGZ,IAFDC,WAEC,OAFDA,UAEC,CAFWC,UAEX,OAFWA,UAEX,CAFuBC,SAEvB,OAFuBA,SAEvB,CAFkCC,UAElC,OAFkCA,UAElC,CAFiDC,KAEjD,2CACH,GAAMC,KAAI,CAAGf,KAAK,CAACgB,MAANhB,CAAa,IAAbA,CAAb,CACA,cAAsBM,QAAQ,CAAC,EAAD,CAAKS,IAAL,CAA9B,CAAQE,SAAR,WAAQA,SAAR,CACA,oBAAkCjB,KAAK,CAACkB,QAANlB,CAAe,KAAfA,CAAlC,oDAAOmB,SAAP,qBAAkBC,YAAlB,qBACA,GAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,UAAD,CAAsBC,QAAtB,CAAwC,CAC1DH,YAAY,CAACE,UAAD,CAAZF,CACAG,QAAQ,GAFV,EAIA,wBAAqDnB,kBAAkB,CACrE,UADqE,CAErEU,KAFqE,CAGrE,CAAEG,SAAF,CAAEA,SAAF,CAAaN,UAAb,CAAaA,UAAb,CAAyBQ,SAAzB,CAAyBA,SAAzB,CAAoCP,SAApC,CAAoCA,SAApC,CAA+CC,qBAA/C,CAHqE,CAIrE,CAAEW,WAAW,CAAE,CAAC,OAAD,CAAf,CAJqE,CAAvE,CAAQC,UAAR,qBAAQA,UAAR,CAAoBC,QAApB,qBAAoBA,OAApB,CAA6BC,OAA7B,qBAA6BA,MAA7B,CAAwCC,QAAxC,0DAOA,GAAIvB,qBAAqB,CAACS,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CACD,MACEd,qBAACG,KAAD,aACMyB,QADN,EAEEC,sCAAsC,KAFxC,CAGEC,aAAa,CAAEL,UAHjB,CAIEf,UAAU,CAAEA,UAJd,CAKED,GAAG,CAAEF,SAAS,CAAC,CAACQ,IAAD,CAAON,GAAP,CAAD,CALhB,CAMEiB,OAAO,CAAGK,kBAAD,CAAO,CACdV,WAAW,CAAC,IAAD,CAAOK,QAAO,CAAG,iBAAMA,SAAO,CAACK,CAAD,CAAb,EAAH,CAAsB,UAAM,CAA1C,EAAXV,CAPJ,EASEM,MAAM,CAAGI,iBAAD,CAAO,CACbV,WAAW,CAAC,KAAD,CAAQM,OAAM,CAAG,iBAAMA,QAAM,CAACI,CAAD,CAAZ,EAAH,CAAqB,UAAM,CAAzC,EAAXV,CAVJ,EAYEV,UAAU,CAAEA,UAZd,CAaEC,SAAS,CAAEA,SAbb,CAcEC,UAAU,CAAEA,UAdd,GADF,CArBF,EAyCA,cAAeZ,KAAI,CAACC,UAAU,CAACM,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Input","usePropsResolution","useHasResponsiveProps","useHover","mergeRefs","TextArea","ref","wrapperRef","isDisabled","isInvalid","isReadOnly","props","_ref","useRef","isHovered","useState","isFocused","setIsFocused","handleFocus","focusState","callback","extendTheme","totalLines","onFocus","onBlur","newProps","INTERNAL_notResolveThemeAndPseudoProps","numberOfLines","e"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  { wrapperRef, isDisabled, isInvalid, isReadOnly, ...props }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    { isHovered, isDisabled, isFocused, isInvalid, isReadOnly },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}