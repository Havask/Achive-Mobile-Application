{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useControlledState as $fQ2SF$useControlledState}from\"@react-stately/utils\";import{useMemo as $fQ2SF$useMemo,useState as $fQ2SF$useState}from\"react\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $a54cdc5c1942b639$exports={};$parcel$export($a54cdc5c1942b639$exports,\"useRadioGroupState\",function(){return $a54cdc5c1942b639$export$bca9d026f8e704eb;});var $a54cdc5c1942b639$var$instance=Math.round(Math.random()*10000000000);var $a54cdc5c1942b639$var$i=0;function $a54cdc5c1942b639$export$bca9d026f8e704eb(props){var name=$fQ2SF$useMemo(function(){return props.name||\"radio-group-\"+$a54cdc5c1942b639$var$instance+\"-\"+ ++$a54cdc5c1942b639$var$i;},[props.name]);var _$fQ2SF$useControlled=$fQ2SF$useControlledState(props.value,props.defaultValue,props.onChange),_$fQ2SF$useControlled2=_slicedToArray(_$fQ2SF$useControlled,2),selectedValue=_$fQ2SF$useControlled2[0],setSelected=_$fQ2SF$useControlled2[1];var _$fQ2SF$useState=$fQ2SF$useState(null),_$fQ2SF$useState2=_slicedToArray(_$fQ2SF$useState,2),lastFocusedValue=_$fQ2SF$useState2[0],setLastFocusedValue=_$fQ2SF$useState2[1];var setSelectedValue=function setSelectedValue(value){if(!props.isReadOnly&&!props.isDisabled)setSelected(value);};return{name:name,selectedValue:selectedValue,setSelectedValue:setSelectedValue,lastFocusedValue:lastFocusedValue,setLastFocusedValue:setLastFocusedValue,isDisabled:props.isDisabled||false,isReadOnly:props.isReadOnly||false};}export{$a54cdc5c1942b639$export$bca9d026f8e704eb as useRadioGroupState};","map":{"version":3,"mappings":"ueA2CA,GAAIA,+BAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,WAA3B,CAAf,CACA,GAAIC,wBAAC,CAAG,CAAR,SAMgBC,2CAAmBC,MAA0C,CAE3E,GAAIC,KAAI,CAAGC,cAAO,kBAAOF,MAAK,CAACC,IAAN,iBAA6BP,8BAA7B,KAAuC,GAAII,uBAAlD,GAAuD,CAACE,KAAK,CAACC,IAAP,CAAvD,CAAlB,CACA,0BAAmCE,yBAAkB,CAACH,KAAK,CAACI,KAAP,CAAcJ,KAAK,CAACK,YAApB,CAAkCL,KAAK,CAACM,QAAxC,CAArD,gEAAKC,aAAL,2BAAoBC,WAApB,2BACA,qBAA8CC,eAAQ,CAAC,IAAD,CAAtD,sDAAKC,gBAAL,sBAAuBC,mBAAvB,sBAEA,GAAIC,iBAAgB,SAAhBA,iBAAgB,CAAIR,KAAJ,CAAc,CAChC,GAAE,CAAGJ,KAAK,CAACa,UAAT,EAAmB,CAAKb,KAAK,CAACc,UAAhC,CACEN,WAAW,CAACJ,KAAD,CAAX,CAEH,CAJD,CAMA,MAAO,MACLH,IADK,eAELM,aAFK,kBAGLK,gBAHK,kBAILF,gBAJK,qBAKLC,mBALK,CAMLG,UAAU,CAAEd,KAAK,CAACc,UAAN,EAAoB,KAN3B,CAOLD,UAAU,CAAEb,KAAK,CAACa,UAAN,EAAoB,KAP3B,CAAP,CASD","names":["$a54cdc5c1942b639$var$instance","Math","round","random","$a54cdc5c1942b639$var$i","$a54cdc5c1942b639$export$bca9d026f8e704eb","props","name","$fQ2SF$useMemo","$fQ2SF$useControlledState","value","defaultValue","onChange","selectedValue","setSelected","$fQ2SF$useState","lastFocusedValue","setLastFocusedValue","setSelectedValue","isReadOnly","isDisabled"],"sources":["packages/@react-stately/radio/src/useRadioGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n"]},"metadata":{},"sourceType":"module"}