{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";export var wait=function wait(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};export var extractUrlFromString=function extractUrlFromString(string){var regex=/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gm;var match=string.match(regex);if(match&&match.length>0){return match[0];}return null;};export var fetchMetaData=function fetchMetaData(url){var response,text,ogImage,ogTitle,ogDescription,image,title,description;return _regeneratorRuntime.async(function fetchMetaData$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(fetch(url));case 2:response=_context.sent;_context.next=5;return _regeneratorRuntime.awrap(response.text());case 5:text=_context.sent;ogImage=new RegExp('<meta.*property=\"og:image\".*content=\"(.*)\".*/>');ogTitle=new RegExp('<meta.*property=\"og:title\".*content=\"(.*)\".*/>');ogDescription=new RegExp('<meta.*property=\"og:description\".*content=\"(.*)\".*/>');image=text.match(ogImage);title=text.match(ogTitle);description=text.match(ogDescription);if(!(image&&title&&description)){_context.next=14;break;}return _context.abrupt(\"return\",{image:image[1],title:title[1],description:description[1],url:url});case 14:return _context.abrupt(\"return\",null);case 15:case\"end\":return _context.stop();}}},null,null,null,Promise);};","map":{"version":3,"mappings":"4DAMA,MAAO,IAAMA,KAAI,CAAIC,QAARD,KAAQC,GAAD,QAClB,IAAIC,QAAJ,CAAaC,gBAAD,QAAaC,WAAU,CAACD,OAAD,CAAUF,EAAV,CAAvB,EAAZ,CADkB,EAAb,CAQP,MAAO,IAAMI,qBAAoB,CAAIC,QAAxBD,qBAAwBC,OAAD,CAAmC,CACrE,GAAMC,MAAK,CACT,qNADF,CAEA,GAAMC,MAAK,CAAGF,MAAM,CAACE,KAAPF,CAAaC,KAAbD,CAAd,CAEA,GAAIE,KAAK,EAAIA,KAAK,CAACC,MAAND,CAAe,CAA5B,CAA+B,CAC7B,MAAOA,MAAK,CAAC,CAAD,CAAZ,CACD,CAED,MAAO,KAAP,CATK,EAoBP,MAAO,IAAME,cAAa,CAAG,QAAhBA,cAAgB,CAC3BC,GAD2B,kPAGJC,KAAK,CAACD,GAAD,CAHD,SAGrBE,QAHqB,gEAIRA,QAAQ,CAACC,IAATD,EAJQ,SAIrBC,IAJqB,eAMrBC,OANqB,CAMX,GAAIC,OAAJ,CAAW,gDAAX,CANW,CAOrBC,OAPqB,CAOX,GAAID,OAAJ,CAAW,gDAAX,CAPW,CAQrBE,aARqB,CAQL,GAAIF,OAAJ,CACpB,sDADoB,CARK,CAYrBG,KAZqB,CAYbL,IAAI,CAACN,KAALM,CAAWC,OAAXD,CAZa,CAarBM,KAbqB,CAabN,IAAI,CAACN,KAALM,CAAWG,OAAXH,CAba,CAcrBO,WAdqB,CAcPP,IAAI,CAACN,KAALM,CAAWI,aAAXJ,CAdO,MAgBvBK,KAAK,EAAIC,KAATD,EAAkBE,WAhBK,2DAiBlB,CACLF,KAAK,CAAEA,KAAK,CAAC,CAAD,CADP,CAELC,KAAK,CAAEA,KAAK,CAAC,CAAD,CAFP,CAGLC,WAAW,CAAEA,WAAW,CAAC,CAAD,CAHnB,CAILV,OAJK,CAjBkB,0CAyBpB,IAzBoB,wEAAtB","names":["wait","ms","Promise","resolve","setTimeout","extractUrlFromString","string","regex","match","length","fetchMetaData","url","fetch","response","text","ogImage","RegExp","ogTitle","ogDescription","image","title","description"],"sources":["helpers.ts"],"sourcesContent":["import type { IUrlPreviewBubble } from 'src/types/Chatty.types';\n\n/**\n * `wait` is a function that returns a promise that resolves after a given number of milliseconds\n * @param {number} ms - number\n */\nexport const wait = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * It takes a string and returns the first URL found in the string\n * @param {string} string - The string to extract the URL from.\n * @returns The first match of the regex.\n */\nexport const extractUrlFromString = (string: string): string | null => {\n  const regex =\n    /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gm;\n  const match = string.match(regex);\n\n  if (match && match.length > 0) {\n    return match[0];\n  }\n\n  return null;\n};\n\n/**\n * It takes a URL, fetches the HTML from that URL, and then parses the HTML for the og:image, og:title,\n * and og:description meta tags. If all three of these meta tags are found, it returns a\n * UrlPreviewBubble object with the image, title, and description. If any of these meta tags are\n * missing, it returns null\n * @param {string} url - The URL of the page to fetch.\n * @returns An object with the following properties:\n */\nexport const fetchMetaData = async (\n  url: string\n): Promise<IUrlPreviewBubble | null> => {\n  const response = await fetch(url);\n  const text = await response.text();\n\n  const ogImage = new RegExp('<meta.*property=\"og:image\".*content=\"(.*)\".*/>');\n  const ogTitle = new RegExp('<meta.*property=\"og:title\".*content=\"(.*)\".*/>');\n  const ogDescription = new RegExp(\n    '<meta.*property=\"og:description\".*content=\"(.*)\".*/>'\n  );\n\n  const image = text.match(ogImage);\n  const title = text.match(ogTitle);\n  const description = text.match(ogDescription);\n\n  if (image && title && description) {\n    return {\n      image: image[1],\n      title: title[1],\n      description: description[1],\n      url,\n    };\n  }\n\n  return null;\n};\n"]},"metadata":{},"sourceType":"module"}