{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import{PermissionStatus,createPermissionHook,UnavailabilityError}from'expo-modules-core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import ExpoBarCodeScannerModule from\"./ExpoBarCodeScannerModule\";import ExpoBarCodeScannerView from\"./ExpoBarCodeScannerView\";var BarCodeType=ExpoBarCodeScannerModule.BarCodeType,Type=ExpoBarCodeScannerModule.Type;var EVENT_THROTTLE_MS=500;export var BarCodeScanner=function(_React$Component){_inherits(BarCodeScanner,_React$Component);var _super=_createSuper(BarCodeScanner);function BarCodeScanner(){var _this;_classCallCheck(this,BarCodeScanner);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.lastEvents={};_this.lastEventsTimes={};_this.onObjectDetected=function(callback){return function(_ref){var nativeEvent=_ref.nativeEvent;var type=nativeEvent.type;if(_this.lastEvents[type]&&_this.lastEventsTimes[type]&&JSON.stringify(nativeEvent)===_this.lastEvents[type]&&Date.now()-_this.lastEventsTimes[type]<EVENT_THROTTLE_MS){return;}if(callback){callback(nativeEvent);_this.lastEventsTimes[type]=new Date();_this.lastEvents[type]=JSON.stringify(nativeEvent);}};};return _this;}_createClass(BarCodeScanner,[{key:\"render\",value:function render(){var nativeProps=this.convertNativeProps(this.props);var onBarCodeScanned=this.props.onBarCodeScanned;return React.createElement(ExpoBarCodeScannerView,_objectSpread(_objectSpread({},nativeProps),{},{onBarCodeScanned:this.onObjectDetected(onBarCodeScanned)}));}},{key:\"convertNativeProps\",value:function convertNativeProps(props){var nativeProps={};for(var _i=0,_Object$entries=Object.entries(props);_i<_Object$entries.length;_i++){var _ref2=_Object$entries[_i];var _ref3=_slicedToArray(_ref2,2);var key=_ref3[0];var value=_ref3[1];if(typeof value==='string'&&BarCodeScanner.ConversionTables[key]){nativeProps[key]=BarCodeScanner.ConversionTables[key][value];}else{nativeProps[key]=value;}}return nativeProps;}}],[{key:\"getPermissionsAsync\",value:function getPermissionsAsync(){return _regeneratorRuntime.async(function getPermissionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",ExpoBarCodeScannerModule.getPermissionsAsync());case 1:case\"end\":return _context.stop();}}},null,null,null,Promise);}},{key:\"requestPermissionsAsync\",value:function requestPermissionsAsync(){return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",ExpoBarCodeScannerModule.requestPermissionsAsync());case 1:case\"end\":return _context2.stop();}}},null,null,null,Promise);}},{key:\"scanFromURLAsync\",value:function scanFromURLAsync(url){var barCodeTypes,_args3=arguments;return _regeneratorRuntime.async(function scanFromURLAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:barCodeTypes=_args3.length>1&&_args3[1]!==undefined?_args3[1]:Object.values(BarCodeType);if(ExpoBarCodeScannerModule.scanFromURLAsync){_context3.next=3;break;}throw new UnavailabilityError('expo-barcode-scanner','scanFromURLAsync');case 3:if(!(Array.isArray(barCodeTypes)&&!barCodeTypes.length)){_context3.next=5;break;}throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');case 5:if(!(Platform.OS==='ios')){_context3.next=11;break;}if(!(Array.isArray(barCodeTypes)&&!barCodeTypes.includes(BarCodeType.qr))){_context3.next=8;break;}throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');case 8:_context3.next=10;return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url,[BarCodeType.qr]));case 10:return _context3.abrupt(\"return\",_context3.sent);case 11:_context3.next=13;return _regeneratorRuntime.awrap(ExpoBarCodeScannerModule.scanFromURLAsync(url,barCodeTypes));case 13:return _context3.abrupt(\"return\",_context3.sent);case 14:case\"end\":return _context3.stop();}}},null,null,null,Promise);}}]);return BarCodeScanner;}(React.Component);BarCodeScanner.Constants={BarCodeType:BarCodeType,Type:Type};BarCodeScanner.ConversionTables={type:Type};BarCodeScanner.defaultProps={type:Type.back,barCodeTypes:Object.values(BarCodeType)};BarCodeScanner.usePermissions=createPermissionHook({getMethod:BarCodeScanner.getPermissionsAsync,requestMethod:BarCodeScanner.requestPermissionsAsync});export{PermissionStatus};var Constants=BarCodeScanner.Constants,getPermissionsAsync=BarCodeScanner.getPermissionsAsync,requestPermissionsAsync=BarCodeScanner.requestPermissionsAsync,usePermissions=BarCodeScanner.usePermissions,scanFromURLAsync=BarCodeScanner.scanFromURLAsync;export{Constants,getPermissionsAsync,requestPermissionsAsync,usePermissions,scanFromURLAsync};","map":{"version":3,"mappings":"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","names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","BarCodeType","Type","EVENT_THROTTLE_MS","BarCodeScanner","lastEvents","lastEventsTimes","onObjectDetected","callback","nativeEvent","type","JSON","stringify","Date","now","nativeProps","convertNativeProps","props","onBarCodeScanned","Object","entries","key","value","ConversionTables","getPermissionsAsync","requestPermissionsAsync","url","barCodeTypes","values","scanFromURLAsync","Array","isArray","length","Error","Platform","OS","includes","qr","Component","Constants","defaultProps","back","usePermissions","getMethod","requestMethod"],"sourceRoot":"","sources":["../src/BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\n/**\n * > __Note:__ `bounds` and `cornerPoints` are not always available. On iOS, for `code39` and `pdf417`\n * > you don't get those values. Moreover, on iOS, those values don't have to bounds the whole barcode.\n * > For some types, they will represent the area used by the scanner.\n */\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   */\n  bounds?: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   */\n  cornerPoints?: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const {\n  Constants,\n  getPermissionsAsync,\n  requestPermissionsAsync,\n  usePermissions,\n  scanFromURLAsync,\n} = BarCodeScanner;\n"]},"metadata":{},"sourceType":"module"}