{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import Platform from\"react-native-web/dist/exports/Platform\";import{HapticType}from\"../types/Chatty.types\";var hapticEngine;var triggerHaptic;try{if(Platform.OS==='web'){throw new Error('Haptics are not supported on web');}hapticEngine=require('expo-haptics');triggerHaptic=function triggerHaptic(type){return _regeneratorRuntime.async(function triggerHaptic$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=type;_context.next=_context.t0===HapticType.Light?3:_context.t0===HapticType.Medium?6:_context.t0===HapticType.Heavy?9:12;break;case 3:_context.next=5;return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light));case 5:return _context.abrupt(\"break\",13);case 6:_context.next=8;return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium));case 8:return _context.abrupt(\"break\",13);case 9:_context.next=11;return _regeneratorRuntime.awrap(hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy));case 11:return _context.abrupt(\"break\",13);case 12:return _context.abrupt(\"break\",13);case 13:case\"end\":return _context.stop();}}},null,null,null,Promise);};}catch(_unused){try{hapticEngine=require('react-native-haptic-feedback');triggerHaptic=function triggerHaptic(type){return _regeneratorRuntime.async(function triggerHaptic$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=type;_context2.next=_context2.t0===HapticType.Light?3:_context2.t0===HapticType.Medium?5:_context2.t0===HapticType.Heavy?7:9;break;case 3:hapticEngine.trigger('impactLight');return _context2.abrupt(\"break\",10);case 5:hapticEngine.trigger('impactMedium');return _context2.abrupt(\"break\",10);case 7:hapticEngine.trigger('impactHeavy');return _context2.abrupt(\"break\",10);case 9:return _context2.abrupt(\"break\",10);case 10:case\"end\":return _context2.stop();}}},null,null,null,Promise);};}catch(error){console.warn('Haptic engine not found');}console.warn('Haptic engine not found');}export{triggerHaptic,hapticEngine};","map":{"version":3,"mappings":"yHACA,OAASA,UAAT,6BAEA,GAAIC,aAAJ,CAGA,GAAIC,cAAJ,CAEA,GAAI,CACF,GAAIC,QAAQ,CAACC,EAATD,GAAgB,KAApB,CAA2B,CACzB,KAAM,IAAIE,MAAJ,CAAU,kCAAV,CAAN,CACD,CAEDJ,YAAY,CAAGK,OAAO,CAAC,cAAD,CAAtBL,CAGAC,aAAa,CAAG,uBAAOK,IAAP,qIACNA,IADM,6BAEPP,UAAU,CAACQ,KAFJ,iBAKPR,UAAU,CAACS,MALJ,iBAQPT,UAAU,CAACU,KARJ,oEAGJT,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCO,KAA1DP,CAHI,oGAMJA,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCQ,MAA1DR,CANI,qGASJA,YAAY,CAACU,WAAbV,CAAyBA,YAAY,CAACW,mBAAbX,CAAiCS,KAA1DT,CATI,8JAAhBC,CARF,CAwBE,cAAM,CACN,GAAI,CACFD,YAAY,CAAGK,OAAO,CAAC,8BAAD,CAAtBL,CACAC,aAAa,CAAG,uBAAOK,IAAP,yIACNA,IADM,+BAEPP,UAAU,CAACQ,KAFJ,kBAKPR,UAAU,CAACS,MALJ,kBAQPT,UAAU,CAACU,KARJ,kBAGVT,YAAY,CAACY,OAAbZ,CAAqB,aAArBA,EAHU,2CAMVA,YAAY,CAACY,OAAbZ,CAAqB,cAArBA,EANU,2CASVA,YAAY,CAACY,OAAbZ,CAAqB,aAArBA,EATU,sJAAhBC,CAFF,CAkBE,MAAOY,KAAP,CAAc,CACdC,OAAO,CAACC,IAARD,CAAa,yBAAbA,EACD,CACDA,OAAO,CAACC,IAARD,CAAa,yBAAbA,EACD,CAED,OAASb,aAAT,CAAwBD,YAAxB","names":["HapticType","hapticEngine","triggerHaptic","Platform","OS","Error","require","type","Light","Medium","Heavy","impactAsync","ImpactFeedbackStyle","trigger","error","console","warn"],"sources":["hapticEngine.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { HapticType } from '../types/Chatty.types';\n\nlet hapticEngine: any;\n\n/* This is a function that returns a promise. It is used to trigger haptic feedback. */\nlet triggerHaptic: (type: HapticType) => Promise<void>;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  // We're intitalizing the triggerHaptic function based on package they use.\n  triggerHaptic = async (type: HapticType) => {\n    switch (type) {\n      case HapticType.Light:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light);\n        break;\n      case HapticType.Medium:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium);\n        break;\n      case HapticType.Heavy:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy);\n        break;\n\n      default:\n        break;\n    }\n  };\n} catch {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n    triggerHaptic = async (type: HapticType) => {\n      switch (type) {\n        case HapticType.Light:\n          hapticEngine.trigger('impactLight');\n          break;\n        case HapticType.Medium:\n          hapticEngine.trigger('impactMedium');\n          break;\n        case HapticType.Heavy:\n          hapticEngine.trigger('impactHeavy');\n          break;\n\n        default:\n          break;\n      }\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };\n"]},"metadata":{},"sourceType":"module"}