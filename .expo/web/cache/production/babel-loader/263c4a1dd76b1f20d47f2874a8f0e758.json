{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{UnavailabilityError}from'expo-modules-core';import ExpoHaptics from\"./ExpoHaptics\";import{NotificationFeedbackType,ImpactFeedbackStyle}from\"./Haptics.types\";export function notificationAsync(){var type,_args=arguments;return _regeneratorRuntime.async(function notificationAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:type=_args.length>0&&_args[0]!==undefined?_args[0]:NotificationFeedbackType.Success;if(ExpoHaptics.notificationAsync){_context.next=3;break;}throw new UnavailabilityError('Haptics','notificationAsync');case 3:_context.next=5;return _regeneratorRuntime.awrap(ExpoHaptics.notificationAsync(type));case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function impactAsync(){var style,_args2=arguments;return _regeneratorRuntime.async(function impactAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:style=_args2.length>0&&_args2[0]!==undefined?_args2[0]:ImpactFeedbackStyle.Medium;if(ExpoHaptics.impactAsync){_context2.next=3;break;}throw new UnavailabilityError('Haptic','impactAsync');case 3:_context2.next=5;return _regeneratorRuntime.awrap(ExpoHaptics.impactAsync(style));case 5:case\"end\":return _context2.stop();}}},null,null,null,Promise);}export function selectionAsync(){return _regeneratorRuntime.async(function selectionAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(ExpoHaptics.selectionAsync){_context3.next=2;break;}throw new UnavailabilityError('Haptic','selectionAsync');case 2:_context3.next=4;return _regeneratorRuntime.awrap(ExpoHaptics.selectionAsync());case 4:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export{NotificationFeedbackType,ImpactFeedbackStyle};","map":{"version":3,"mappings":"4DAAA,OAASA,mBAAT,KAAoC,mBAApC,CAEA,MAAOC,YAAP,qBACA,OAASC,wBAAT,CAAmCC,mBAAnC,uBAUA,MAAO,SAAeC,kBAAf,uJACLC,IADK,+CAC4BH,wBAAwB,CAACI,OADrD,IAGAL,WAAW,CAACG,iBAHZ,8BAIG,IAAIJ,oBAAJ,CAAwB,SAAxB,CAAmC,mBAAnC,CAJH,yDAMCC,WAAW,CAACG,iBAAZ,CAA8BC,IAA9B,CAND,uEAgBP,MAAO,SAAeE,YAAf,sJACLC,KADK,kDACwBL,mBAAmB,CAACM,MAD5C,IAGAR,WAAW,CAACM,WAHZ,+BAIG,IAAIP,oBAAJ,CAAwB,QAAxB,CAAkC,aAAlC,CAJH,0DAMCC,WAAW,CAACM,WAAZ,CAAwBC,KAAxB,CAND,wEAcP,MAAO,SAAeE,eAAf,iIACAT,WAAW,CAACS,cADZ,+BAEG,IAAIV,oBAAJ,CAAwB,QAAxB,CAAkC,gBAAlC,CAFH,0DAICC,WAAW,CAACS,cAAZ,EAJD,wEAOP,OAASR,wBAAT,CAAmCC,mBAAnC","names":["UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","notificationAsync","type","Success","impactAsync","style","Medium","selectionAsync"],"sourceRoot":"","sources":["../src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"]},"metadata":{},"sourceType":"module"}