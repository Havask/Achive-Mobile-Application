{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _createClass from\"@babel/runtime/helpers/createClass\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import NativeModules from\"react-native-web/dist/exports/NativeModules\";var defaultOptions={enableVibrateFallback:false,ignoreAndroidSystemSettings:false};var RNReactNativeHapticFeedback=_createClass(function RNReactNativeHapticFeedback(){_classCallCheck(this,RNReactNativeHapticFeedback);});RNReactNativeHapticFeedback.trigger=function(){var type=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'selection';var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var triggerOptions=createTriggerOptions(options);try{NativeModules.RNReactNativeHapticFeedback.trigger(type,triggerOptions);}catch(err){console.warn('RNReactNativeHapticFeedback is not available');}};var createTriggerOptions=function createTriggerOptions(options){if(typeof options==='boolean'){return _objectSpread(_objectSpread({},defaultOptions),{},{enableVibrateFallback:options});}else{return _objectSpread(_objectSpread({},defaultOptions),options);}};export default RNReactNativeHapticFeedback;","map":{"version":3,"names":["defaultOptions","enableVibrateFallback","ignoreAndroidSystemSettings","RNReactNativeHapticFeedback","trigger","type","options","triggerOptions","createTriggerOptions","NativeModules","err","console","warn"],"sources":["/Users/havardskjaerstein/Desktop/Achive/node_modules/react-native-haptic-feedback/index.js"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nconst defaultOptions = {\n    enableVibrateFallback: false,\n    ignoreAndroidSystemSettings: false,\n}\n\nclass RNReactNativeHapticFeedback {\n    static trigger = (type = 'selection', options = {}) => {\n        const triggerOptions = createTriggerOptions(options)\n\n        try {\n            NativeModules.RNReactNativeHapticFeedback.trigger(type, triggerOptions);\n        } catch (err) {\n            console.warn('RNReactNativeHapticFeedback is not available');\n        }\n    }\n}\n\nconst createTriggerOptions = options => {\n    // if options is a boolean we're using an api <=1.6 and we should pass use it to set the enableVibrateFallback option\n    if (typeof options === 'boolean') {\n        return {\n            ...defaultOptions,\n            enableVibrateFallback: options\n        }\n    } else {\n        return { ...defaultOptions, ...options }\n    }\n}\n\nexport default RNReactNativeHapticFeedback;\n"],"mappings":"+gCAEA,GAAMA,eAAc,CAAG,CACnBC,qBAAqB,CAAE,KADJ,CAEnBC,2BAA2B,CAAE,KAFV,CAAvB,C,GAKMC,4B,0GAAAA,2B,CACKC,O,CAAU,UAAsC,IAArCC,KAAqC,2DAA9B,WAA8B,IAAjBC,QAAiB,2DAAP,EAAO,CACnD,GAAMC,eAAc,CAAGC,oBAAoB,CAACF,OAAD,CAA3C,CAEA,GAAI,CACAG,aAAa,CAACN,2BAAd,CAA0CC,OAA1C,CAAkDC,IAAlD,CAAwDE,cAAxD,EACH,CAAC,MAAOG,GAAP,CAAY,CACVC,OAAO,CAACC,IAAR,CAAa,8CAAb,EACH,CACJ,C,CAGL,GAAMJ,qBAAoB,CAAG,QAAvBA,qBAAuB,CAAAF,OAAO,CAAI,CAEpC,GAAI,MAAOA,QAAP,GAAmB,SAAvB,CAAkC,CAC9B,sCACON,cADP,MAEIC,qBAAqB,CAAEK,OAF3B,GAIH,CALD,IAKO,CACH,sCAAYN,cAAZ,EAA+BM,OAA/B,EACH,CACJ,CAVD,CAYA,cAAeH,4BAAf"},"metadata":{},"sourceType":"module"}