{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"_image\",\"_badgeSize\",\"source\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Box,Image}from\"../../primitives\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Avatar=function Avatar(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),error=_React$useState2[0],setError=_React$useState2[1];var _usePropsResolution=usePropsResolution('Avatar',props),_image=_usePropsResolution._image,_badgeSize=_usePropsResolution._badgeSize,source=_usePropsResolution.source,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var Badge=React.createElement(React.Fragment,null);var remainingChildren=[];React.Children.map(children,function(child){if(typeof(child===null||child===void 0?void 0:child.type)==='object'&&(child===null||child===void 0?void 0:child.type.displayName)==='AvatarBadge'){Badge=React.cloneElement(child,{size:_badgeSize[0]});}else{remainingChildren.push(child);}});if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,resolvedProps,!!(source!==null&&source!==void 0&&source.uri)&&!error?React.createElement(Image,_extends({source:source,onError:function onError(){setError(true);}},_image,{ref:ref})):remainingChildren.length!==0&&remainingChildren,Badge);};export default memo(forwardRef(Avatar));","map":{"version":3,"mappings":"ofAAA,MAAOA,MAAP,EAAgBC,IAAhB,CAAsBC,UAAtB,KAAwC,OAAxC,CACA,OAASC,GAAT,CAAcC,KAAd,wBACA,OAASC,kBAAT,oCAEA,OAASC,qBAAT,4CAEA,GAAMC,OAAM,CAAG,QAATA,OAAS,MAAuCC,GAAvC,CAAoD,IAAjDC,SAAiD,MAAjDA,QAAiD,CAApCC,KAAoC,0CACjE,oBAA0BV,KAAK,CAACW,QAANX,CAAe,KAAfA,CAA1B,oDAAOY,KAAP,qBAAcC,QAAd,qBACA,wBAAyDR,kBAAkB,CACzE,QADyE,CAEzEK,KAFyE,CAA3E,CAAQI,MAAR,qBAAQA,MAAR,CAAgBC,UAAhB,qBAAgBA,UAAhB,CAA4BC,MAA5B,qBAA4BA,MAA5B,CAAuCC,aAAvC,0DAKA,GAAIC,MAAK,CAAGlB,wCAAZ,CACA,GAAMmB,kBAAgC,CAAG,EAAzC,CAEAnB,KAAK,CAACoB,QAANpB,CAAeqB,GAAfrB,CAAmBS,QAAnBT,CAA8BsB,cAAD,CAAW,CACtC,GACE,OAAOA,KAAP,OAAOA,OAAP,SAAOA,CAAP,MAAOA,MAAK,CAAEC,IAAd,IAAuB,QAAvB,EACA,MAAK,OAALD,OAAK,SAALA,aAAK,CAAEC,IAAPD,CAAYE,WAAZ,IAA4B,aAF9B,CAGE,CACAN,KAAK,CAAGlB,KAAK,CAACyB,YAANzB,CAAmBsB,KAAnBtB,CAA0B,CAAE0B,IAAI,CAAEX,UAAU,CAAC,CAAD,CAAlB,CAA1Bf,CAARkB,CAJF,KAKO,CACLC,iBAAiB,CAACQ,IAAlBR,CAAuBG,KAAvBH,EACD,CARH,GAYA,GAAIb,qBAAqB,CAACI,KAAD,CAAzB,CAAkC,CAChC,MAAO,KAAP,CACD,CAED,MACEV,qBAACG,GAAD,CAASc,aAAT,CACG,CAAC,EAACD,MAAD,OAACA,QAAD,SAACA,QAAM,CAAEY,GAAT,CAAD,EAAiB,CAAChB,KAAlB,CACCZ,oBAACI,KAAD,WACEY,MAAM,CAAEA,MADV,CAEEa,OAAO,CAAE,kBAAM,CACbhB,QAAQ,CAAC,IAAD,CAARA,CACD,CAJH,EAKMC,MALN,EAMEN,GAAG,CAAEA,GANP,GADD,CAUCW,iBAAiB,CAACW,MAAlBX,GAA6B,CAA7BA,EAAkCA,iBAXtC,CAaGD,KAbH,CADF,CA1BF,EA6CA,cAAejB,KAAI,CAACC,UAAU,CAACK,MAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","Image","usePropsResolution","useHasResponsiveProps","Avatar","ref","children","props","useState","error","setError","_image","_badgeSize","source","resolvedProps","Badge","remainingChildren","Children","map","child","type","displayName","cloneElement","size","push","uri","onError","length"],"sources":["Avatar.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, { size: _badgeSize[0] });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps}>\n      {!!source?.uri && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}