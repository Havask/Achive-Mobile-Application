{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";var imagePicker;try{imagePicker=require('expo-image-picker');}catch(_unused){try{imagePicker=require('react-native-image-picker');}catch(_unused2){console.warn('expo-image-picker or react-native-image-picker not found. Please install it to use this feature.');}}export function selectImage(){var _imagePicker;return _regeneratorRuntime.async(function selectImage$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!((_imagePicker=imagePicker)!==null&&_imagePicker!==void 0&&_imagePicker.launchImageLibraryAsync)){_context.next=4;break;}_context.next=3;return _regeneratorRuntime.awrap(imagePicker.launchImageLibraryAsync({base64:true}));case 3:return _context.abrupt(\"return\",_context.sent);case 4:_context.next=6;return _regeneratorRuntime.awrap(imagePicker.launchImageLibrary({includeBase64:true}));case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"mappings":"4DAAA,GAAIA,YAAJ,CAEA,GAAI,CACFA,WAAW,CAAGC,OAAO,CAAC,mBAAD,CAArBD,CADF,CAEE,cAAM,CACN,GAAI,CACFA,WAAW,CAAGC,OAAO,CAAC,2BAAD,CAArBD,CADF,CAEE,eAAM,CACNE,OAAO,CAACC,IAARD,CACE,kGADFA,EAGD,CACF,CAMD,MAAO,SAAeE,YAAf,8IACL,cAAIJ,WAAJ,iCAAIK,aAAaC,uBADZ,2EAEUN,WAAW,CAACM,uBAAZN,CAAoC,CAC/CO,MAAM,CAAE,IADuC,CAApCP,CAFV,gHAOQA,WAAW,CAACQ,kBAAZR,CAA+B,CAC1CS,aAAa,CAAE,IAD2B,CAA/BT,CAPR","names":["imagePicker","require","console","warn","selectImage","_imagePicker","launchImageLibraryAsync","base64","launchImageLibrary","includeBase64"],"sources":["imagePicker.ts"],"sourcesContent":["let imagePicker: any;\n\ntry {\n  imagePicker = require('expo-image-picker');\n} catch {\n  try {\n    imagePicker = require('react-native-image-picker');\n  } catch {\n    console.warn(\n      'expo-image-picker or react-native-image-picker not found. Please install it to use this feature.'\n    );\n  }\n}\n\n/**\n * It launches the native image picker\n * @returns The image data is being returned as a base64 string.\n */\nexport async function selectImage() {\n  if (imagePicker?.launchImageLibraryAsync) {\n    return await imagePicker.launchImageLibraryAsync({\n      base64: true,\n    });\n  }\n\n  return await imagePicker.launchImageLibrary({\n    includeBase64: true,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}