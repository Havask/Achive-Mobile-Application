{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useControlledState as $b3nuO$useControlledState}from\"@react-stately/utils\";function $parcel$export(e,n,v,s){Object.defineProperty(e,n,{get:v,set:s,enumerable:true,configurable:true});}var $587d3ad58be6d31f$exports={};$parcel$export($587d3ad58be6d31f$exports,\"useCheckboxGroupState\",function(){return $587d3ad58be6d31f$export$daff6da51032a415;});function $587d3ad58be6d31f$export$daff6da51032a415(){var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var _$b3nuO$useControlled=$b3nuO$useControlledState(props.value,props.defaultValue||[],props.onChange),_$b3nuO$useControlled2=_slicedToArray(_$b3nuO$useControlled,2),selectedValues=_$b3nuO$useControlled2[0],_setValue=_$b3nuO$useControlled2[1];var state={value:selectedValues,setValue:function setValue(value){if(props.isReadOnly||props.isDisabled)return;_setValue(value);},isDisabled:props.isDisabled||false,isReadOnly:props.isReadOnly||false,isSelected:function isSelected(value){return selectedValues.includes(value);},addValue:function addValue(value){if(props.isReadOnly||props.isDisabled)return;if(!selectedValues.includes(value))_setValue(selectedValues.concat(value));},removeValue:function removeValue(value){if(props.isReadOnly||props.isDisabled)return;if(selectedValues.includes(value))_setValue(selectedValues.filter(function(existingValue){return existingValue!==value;}));},toggleValue:function toggleValue(value){if(props.isReadOnly||props.isDisabled)return;if(selectedValues.includes(value))_setValue(selectedValues.filter(function(existingValue){return existingValue!==value;}));else _setValue(selectedValues.concat(value));}};return state;}export{$587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState};","map":{"version":3,"mappings":"yaA6CgBA,4CAA0E,IAApDC,MAAoD,2DAAxB,EAAwB,CACxF,0BAAiCC,yBAAkB,CAACD,KAAK,CAACE,KAAP,CAAcF,KAAK,CAACG,YAAN,EAAsB,EAApC,CAAwCH,KAAK,CAACI,QAA9C,CAAnD,gEAAKC,cAAL,2BAAqBC,SAArB,2BAEA,GAAMC,MAAK,CAAuB,CAChCL,KAAK,CAAEG,cADyB,CAEhCC,QAFgC,mBAEvBJ,KAFuB,CAEhB,CACd,GAAIF,KAAK,CAACQ,UAAN,EAAoBR,KAAK,CAACS,UAA9B,CACE,OAGFH,SAAQ,CAACJ,KAAD,CAAR,CACD,CAR+B,CAShCO,UAAU,CAAET,KAAK,CAACS,UAAN,EAAoB,KATA,CAUhCD,UAAU,CAAER,KAAK,CAACQ,UAAN,EAAoB,KAVA,CAWhCE,UAXgC,qBAWrBR,KAXqB,CAWd,CAChB,MAAOG,eAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAP,CACD,CAb+B,CAchCU,QAdgC,mBAcvBV,KAduB,CAchB,CACd,GAAIF,KAAK,CAACQ,UAAN,EAAoBR,KAAK,CAACS,UAA9B,CACE,OAEF,GAAE,CAAGJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAL,CACEI,SAAQ,CAACD,cAAc,CAACQ,MAAf,CAAsBX,KAAtB,CAAD,CAAR,CAEH,CArB+B,CAsBhCY,WAtBgC,sBAsBpBZ,KAtBoB,CAsBb,CACjB,GAAIF,KAAK,CAACQ,UAAN,EAAoBR,KAAK,CAACS,UAA9B,CACE,OAEF,GAAIJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAJ,CACEI,SAAQ,CAACD,cAAc,CAACU,MAAf,CAAqB,SAACC,aAAD,QAAkBA,cAAa,GAAKd,KAApC,EAArB,CAAD,CAAR,CAEH,CA7B+B,CA8BhCe,WA9BgC,sBA8BpBf,KA9BoB,CA8Bb,CACjB,GAAIF,KAAK,CAACQ,UAAN,EAAoBR,KAAK,CAACS,UAA9B,CACE,OAEF,GAAIJ,cAAc,CAACM,QAAf,CAAwBT,KAAxB,CAAJ,CACEI,SAAQ,CAACD,cAAc,CAACU,MAAf,CAAqB,SAACC,aAAD,QAAkBA,cAAa,GAAKd,KAApC,EAArB,CAAD,CAAR,CADF,IAGEI,UAAQ,CAACD,cAAc,CAACQ,MAAf,CAAsBX,KAAtB,CAAD,CAAR,CAEH,CAvC+B,CAAlC,CA0CA,MAAOK,MAAP,CACD","names":["$587d3ad58be6d31f$export$daff6da51032a415","props","$b3nuO$useControlledState","value","defaultValue","onChange","selectedValues","setValue","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue"],"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}