{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useContext,useImperativeHandle,useState}from'react';import Text from\"react-native-web/dist/exports/Text\";import{ChatBubble}from\"../ChatBubble\";import{PropsContext}from\"../Chatty\";import{loadLottie}from\"../utils/lottie\";function _TypingStatus(_,ref){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTyping=_useState2[0],_setIsTyping=_useState2[1];var propsContext=useContext(PropsContext);var LottieView=loadLottie();useImperativeHandle(ref,function(){return{setIsTyping:function setIsTyping(_isTyping){_setIsTyping(_isTyping);}};},[]);if(!isTyping)return null;if(LottieView){if(propsContext!==null&&propsContext!==void 0&&propsContext.renderTypingBubble){return propsContext.renderTypingBubble({typingAnimation:React.createElement(LottieView,{source:require(\"../assets/lottie/typing.json\"),autoPlay:true,style:{width:30}})});}return React.createElement(ChatBubble,null,React.createElement(LottieView,{source:require(\"../assets/lottie/typing.json\"),autoPlay:true,style:{width:30}}));}else{if(propsContext!==null&&propsContext!==void 0&&propsContext.renderTypingBubble){return propsContext.renderTypingBubble();}return React.createElement(Text,null,\"Typing...\");}}export var TypingStatus=React.memo(React.forwardRef(_TypingStatus));","map":{"version":3,"mappings":"iEAAA,MAAOA,MAAP,EAAqBC,UAArB,CAAiCC,mBAAjC,CAAsDC,QAAtD,KAAsE,OAAtE,C,qDAGA,OAASC,UAAT,qBACA,OAASC,YAAT,iBACA,OAASC,UAAT,uBAEA,QAASC,cAAT,CAAuBC,CAAvB,CAA+BC,GAA/B,CAA2D,CACzD,cAAgCN,QAAQ,CAAC,KAAD,CAAxC,wCAAOO,QAAP,eAAiBC,YAAjB,eACA,GAAMC,aAAY,CAAGX,UAAU,CAACI,YAAD,CAA/B,CACA,GAAMQ,WAAU,CAAGP,UAAU,EAA7B,CAEAJ,mBAAmB,CACjBO,GADiB,CAEjB,iBAAO,CACLE,WAAW,CAAGG,8BAAD,CAAwB,CACnCH,YAAW,CAACG,SAAD,CAAXH,CACD,CAHI,CAAP,EAFiB,CAOjB,EAPiB,CAAnBT,CAUA,GAAI,CAACQ,QAAL,CAAe,MAAO,KAAP,CAEf,GAAIG,UAAJ,CAAgB,CACd,GAAID,YAAJ,OAAIA,cAAJ,SAAIA,cAAY,CAAEG,kBAAlB,CAAsC,CACpC,MAAOH,aAAY,CAACG,kBAAbH,CAAgC,CACrCI,eAAe,CACbhB,oBAACa,UAAD,EACEI,MAAM,CAAEC,OAAO,gCADjB,CAEEC,QAAQ,KAFV,CAGEC,KAAK,CAAE,CAAEC,KAAK,CAAE,EAAT,CAHT,EAFmC,CAAhCT,CAAP,CASD,CAED,MACEZ,qBAACI,UAAD,MACEJ,oBAACa,UAAD,EACEI,MAAM,CAAEC,OAAO,gCADjB,CAEEC,QAAQ,KAFV,CAGEC,KAAK,CAAE,CAAEC,KAAK,CAAE,EAAT,CAHT,EADF,CADF,CAbF,KAsBO,CACL,GAAIT,YAAJ,OAAIA,cAAJ,SAAIA,cAAY,CAAEG,kBAAlB,CAAsC,CACpC,MAAOH,aAAY,CAACG,kBAAbH,EAAP,CACD,CAED,MAAOZ,qBAACsB,IAAD,kBAAP,CACD,CACF,CAED,MAAO,IAAMC,aAAY,CAAGvB,KAAK,CAACwB,IAANxB,CAAWA,KAAK,CAACyB,UAANzB,CAAiBO,aAAjBP,CAAXA,CAArB","names":["React","useContext","useImperativeHandle","useState","ChatBubble","PropsContext","loadLottie","_TypingStatus","_","ref","isTyping","setIsTyping","propsContext","LottieView","_isTyping","renderTypingBubble","typingAnimation","source","require","autoPlay","style","width","Text","TypingStatus","memo","forwardRef"],"sources":["TypingStatus.tsx"],"sourcesContent":["import React, { Ref, useContext, useImperativeHandle, useState } from 'react';\nimport { Text } from 'react-native';\nimport type { ITypingStatusRef } from 'src/types/Chatty.types';\nimport { ChatBubble } from '../ChatBubble';\nimport { PropsContext } from '../Chatty';\nimport { loadLottie } from '../utils/lottie';\n\nfunction _TypingStatus(_: any, ref: Ref<ITypingStatusRef>) {\n  const [isTyping, setIsTyping] = useState(false);\n  const propsContext = useContext(PropsContext);\n  const LottieView = loadLottie();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setIsTyping: (_isTyping: boolean) => {\n        setIsTyping(_isTyping);\n      },\n    }),\n    []\n  );\n\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: (\n          <LottieView\n            source={require('../assets/lottie/typing.json')}\n            autoPlay\n            style={{ width: 30 }}\n          />\n        ),\n      });\n    }\n\n    return (\n      <ChatBubble>\n        <LottieView\n          source={require('../assets/lottie/typing.json')}\n          autoPlay\n          style={{ width: 30 }}\n        />\n      </ChatBubble>\n    );\n  } else {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return <Text>Typing...</Text>;\n  }\n}\n\nexport const TypingStatus = React.memo(React.forwardRef(_TypingStatus));\n"]},"metadata":{},"sourceType":"module"}