{"ast":null,"code":"import React,{useCallback,useContext,useRef}from'react';import Text from\"react-native-web/dist/exports/Text\";import{Swipeable}from'react-native-gesture-handler';import{ChatBubble}from\"./ChatBubble\";import{PropsContext}from\"./Chatty\";function _SwipeableBubble(props){var _propsContext$bubbleP3;var onReply=props.onReply,message=props.message,children=props.children;var propsContext=useContext(PropsContext);var swipeableRef=useRef(null);var _onReply=useCallback(function(){var _swipeableRef$current;if(!message)return;onReply(message);(_swipeableRef$current=swipeableRef.current)===null||_swipeableRef$current===void 0?void 0:_swipeableRef$current.close();},[message,onReply,swipeableRef]);var renderLeftActions=useCallback(function(){var _propsContext$bubbleP,_propsContext$bubbleP2;return(_propsContext$bubbleP=(_propsContext$bubbleP2=propsContext.bubbleProps)===null||_propsContext$bubbleP2===void 0?void 0:_propsContext$bubbleP2.replyDragElement)!==null&&_propsContext$bubbleP!==void 0?_propsContext$bubbleP:React.createElement(Text,null,\" \");},[(_propsContext$bubbleP3=propsContext.bubbleProps)===null||_propsContext$bubbleP3===void 0?void 0:_propsContext$bubbleP3.replyDragElement]);if(!onReply)return children!==null&&children!==void 0?children:React.createElement(ChatBubble,props);return React.createElement(Swipeable,{renderLeftActions:renderLeftActions,friction:2,overshootFriction:2,onEnded:function onEnded(){return _onReply();},enableTrackpadTwoFingerGesture:true,ref:swipeableRef},children!==null&&children!==void 0?children:React.createElement(ChatBubble,props));}export var SwipeableBubble=React.memo(_SwipeableBubble);","map":{"version":3,"mappings":"AAAA,MAAOA,MAAP,EAAgBC,WAAhB,CAA6BC,UAA7B,CAAyCC,MAAzC,KAAuD,OAAvD,C,qDAEA,OAASC,SAAT,KAA0B,8BAA1B,CACA,OAASC,UAAT,oBACA,OAASC,YAAT,gBAGA,QAASC,iBAAT,CAA0BC,KAA1B,CAAmD,4BACjD,GAAQC,QAAR,CAAuCD,KAAvC,CAAQC,OAAR,CAAiBC,OAAjB,CAAuCF,KAAvC,CAAiBE,OAAjB,CAA0BC,QAA1B,CAAuCH,KAAvC,CAA0BG,QAA1B,CACA,GAAMC,aAAY,CAAGV,UAAU,CAACI,YAAD,CAA/B,CACA,GAAMO,aAAY,CAAGV,MAAM,CAAC,IAAD,CAA3B,CAEA,GAAMW,SAAQ,CAAGb,WAAW,CAAC,UAAM,2BACjC,GAAI,CAACS,OAAL,CAAc,OAEdD,OAAO,CAAEC,OAAF,CAAPD,CAEA,mCAAY,CAACM,OAAb,sEAAsBC,KAAtB,GAL0B,EAMzB,CAACN,OAAD,CAAUD,OAAV,CAAmBI,YAAnB,CANyB,CAA5B,CAQA,GAAMI,kBAAiB,CAAGhB,WAAW,CAAC,UAAM,kDAC1C,qDAAOW,YAAY,CAACM,WAApB,iDAAOC,uBAA0BC,gBAAjC,+DAAqDpB,oBAACqB,IAAD,UAArD,CADmC,EAElC,yBAACT,YAAY,CAACM,WAAd,iDAACI,uBAA0BF,gBAA3B,CAFkC,CAArC,CAIA,GAAI,CAACX,OAAL,CAAc,MAAOE,SAAP,OAAOA,UAAP,SAAOA,UAAYX,oBAACK,UAAD,CAAgBG,KAAhB,CAAnB,CAEd,MACER,qBAACI,SAAD,EACEa,iBAAiB,CAAEA,iBADrB,CAEEM,QAAQ,CAAE,CAFZ,CAGEC,iBAAiB,CAAE,CAHrB,CAIEC,OAAO,CAAE,yBAAMX,SAAQ,EAAd,EAJX,CAKEY,8BAA8B,KALhC,CAMEC,GAAG,CAAEd,YANP,EAQGF,QARH,OAQGA,UARH,SAQGA,UAAYX,oBAACK,UAAD,CAAgBG,KAAhB,CARf,CADF,CAYD,CAED,MAAO,IAAMoB,gBAAe,CAAG5B,KAAK,CAAC6B,IAAN7B,CAAWO,gBAAXP,CAAxB","names":["React","useCallback","useContext","useRef","Swipeable","ChatBubble","PropsContext","_SwipeableBubble","props","onReply","message","children","propsContext","swipeableRef","_onReply","current","close","renderLeftActions","bubbleProps","_propsContext$bubbleP2","replyDragElement","Text","_propsContext$bubbleP3","friction","overshootFriction","onEnded","enableTrackpadTwoFingerGesture","ref","SwipeableBubble","memo"],"sources":["SwipeableBubble.tsx"],"sourcesContent":["import React, { useCallback, useContext, useRef } from 'react';\nimport { Text } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from './ChatBubble';\nimport { PropsContext } from './Chatty';\nimport type { ISwipeableBubble } from './types/Chatty.types';\n\nfunction _SwipeableBubble(props: ISwipeableBubble) {\n  const { onReply, message, children } = props;\n  const propsContext = useContext(PropsContext);\n  const swipeableRef = useRef(null);\n\n  const _onReply = useCallback(() => {\n    if (!message) return;\n\n    onReply!(message);\n    //@ts-ignore\n    swipeableRef.current?.close();\n  }, [message, onReply, swipeableRef]);\n\n  const renderLeftActions = useCallback(() => {\n    return propsContext.bubbleProps?.replyDragElement ?? <Text> </Text>;\n  }, [propsContext.bubbleProps?.replyDragElement]);\n\n  if (!onReply) return children ?? <ChatBubble {...props} />;\n\n  return (\n    <Swipeable\n      renderLeftActions={renderLeftActions}\n      friction={2}\n      overshootFriction={2}\n      onEnded={() => _onReply()}\n      enableTrackpadTwoFingerGesture\n      ref={swipeableRef}\n    >\n      {children ?? <ChatBubble {...props} />}\n    </Swipeable>\n  );\n}\n\nexport const SwipeableBubble = React.memo(_SwipeableBubble);\n"]},"metadata":{},"sourceType":"module"}