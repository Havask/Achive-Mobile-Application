{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import React,{useState,useEffect}from'react';import{HybridContext}from\"./../hybrid-overlay/Context\";import useColorScheme from\"react-native-web/dist/exports/useColorScheme\";export var useColorMode=function useColorMode(){var _React$useContext=React.useContext(HybridContext),colorModeContext=_React$useContext.colorMode;if(colorModeContext===undefined){throw new Error('useColorMode must be used within a NativeBaseProvider');}return colorModeContext;};export function useColorModeValue(light,dark){var _useColorMode=useColorMode(),colorMode=_useColorMode.colorMode;return colorMode==='dark'?dark:light;}export function useModeManager(initialColorMode,useSystemColorMode,colorModeManager){var systemColorMode=useColorScheme();if(useSystemColorMode){initialColorMode=systemColorMode;}var _useState=useState(initialColorMode),_useState2=_slicedToArray(_useState,2),colorMode=_useState2[0],setRawMode=_useState2[1];var setColorMode=React.useCallback(function _callee(val){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!colorModeManager){_context.next=3;break;}_context.next=3;return _regeneratorRuntime.awrap(colorModeManager.set(val));case 3:setRawMode(val);case 4:case\"end\":return _context.stop();}}},null,null,null,Promise);},[colorModeManager]);useEffect(function(){if(colorModeManager){(function getMode(){var value;return _regeneratorRuntime.async(function getMode$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(colorModeManager.get(initialColorMode));case 2:value=_context2.sent;if(value&&value!==colorMode){setRawMode(value);}case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);})();}},[colorMode,initialColorMode,colorModeManager]);useEffect(function(){if(!colorModeManager&&useSystemColorMode){setRawMode(systemColorMode);}},[systemColorMode,colorModeManager,useSystemColorMode,setRawMode]);return{colorMode:colorMode,setColorMode:setColorMode};}export function useAccessibleColors(){var _React$useContext2=React.useContext(HybridContext),colorModeContext=_React$useContext2.colorMode;var toggleAccessibleColors=function toggleAccessibleColors(){return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);};return[colorModeContext.accessibleColors,colorModeContext.setAccessibleColors,toggleAccessibleColors];}","map":{"version":3,"mappings":"6HAAA,MAAOA,MAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAMA,OAASC,aAAT,mC,yEAIA,MAAO,IAAMC,aAAY,CAAG,QAAfA,aAAe,EAA8B,CACxD,sBAIIJ,KAAK,CAACK,UAANL,CAAsCG,aAAtCH,CAJJ,CACaM,gBADb,mBACEC,SADF,CAKA,GAAID,gBAAgB,GAAKE,SAAzB,CAAoC,CAClC,KAAM,IAAIC,MAAJ,CAAU,uDAAV,CAAN,CACD,CACD,MAAOH,iBAAP,CATK,EAYP,MAAO,SAASI,kBAAT,CAA2BC,KAA3B,CAAuCC,IAAvC,CAAkD,CACvD,kBAAsBR,YAAY,EAAlC,CAAQG,SAAR,eAAQA,SAAR,CACA,MAAOA,UAAS,GAAK,MAAdA,CAAuBK,IAAvBL,CAA8BI,KAArC,CACD,CAED,MAAO,SAASE,eAAT,CACLC,gBADK,CAELC,kBAFK,CAGLC,gBAHK,CAIL,CACA,GAAMC,gBAAe,CAAGC,cAAc,EAAtC,CAEA,GAAIH,kBAAJ,CAAwB,CACtBD,gBAAgB,CAAGG,eAAnBH,CACD,CAED,cAAgCb,QAAQ,CAAYa,gBAAZ,CAAxC,wCAAOP,SAAP,eAAkBY,UAAlB,eACA,GAAMC,aAAY,CAAGpB,KAAK,CAACqB,WAANrB,CACnB,iBAAOsB,GAAP,uHACMN,gBADN,0EAEUA,gBAAgB,CAACO,GAAjBP,CAAqBM,GAArBN,CAFV,SAIEG,UAAU,CAACG,GAAD,CAAVH,CAJF,qEADmBnB,CAOnB,CAACgB,gBAAD,CAPmBhB,CAArB,CAWAE,SAAS,CAAC,UAAM,CACd,GAAIc,gBAAJ,CAAsB,CACpB,CAAC,QAAeQ,QAAf,mLACmBR,gBAAgB,CAACS,GAAjBT,CAAqBF,gBAArBE,CADnB,SACKU,KADL,gBAEC,GAAIA,KAAK,EAAIA,KAAK,GAAKnB,SAAvB,CAAkC,CAChCY,UAAU,CAACO,KAAD,CAAVP,CACD,CAJF,sEAAD,IAMD,CARM,EASN,CAACZ,SAAD,CAAYO,gBAAZ,CAA8BE,gBAA9B,CATM,CAATd,CAYAA,SAAS,CAAC,UAAM,CACd,GAAI,CAACc,gBAAD,EAAqBD,kBAAzB,CAA6C,CAC3CI,UAAU,CAACF,eAAD,CAAVE,CACD,CAHM,EAIN,CAACF,eAAD,CAAkBD,gBAAlB,CAAoCD,kBAApC,CAAwDI,UAAxD,CAJM,CAATjB,CAMA,MAAO,CAAEK,SAAF,CAAEA,SAAF,CAAaa,yBAAb,CAAP,CACD,CAED,MAAO,SAASO,oBAAT,EAIL,CACA,uBAII3B,KAAK,CAACK,UAANL,CAAsCG,aAAtCH,CAJJ,CACaM,gBADb,oBACEC,SADF,CAKA,GAAMqB,uBAAsB,CAAG,QAAzBA,uBAAyB,SAC7BtB,iBAAgB,CAACuB,mBAAjBvB,CAAqC,CAACA,gBAAgB,CAACwB,gBAAvDxB,CAD6B,EAA/B,CAEA,MAAO,CACLA,gBAAgB,CAACwB,gBADZ,CAELxB,gBAAgB,CAACuB,mBAFZ,CAGLD,sBAHK,CAAP,CAKD","names":["React","useState","useEffect","HybridContext","useColorMode","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","useColorScheme","setRawMode","setColorMode","useCallback","val","set","getMode","get","value","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { useColorScheme } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}